
rover_firmware.elf:     file format elf32-littlearm
rover_firmware.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0011b1

Program Header:
0x70000001 off    0x00004abc vaddr 0x1a003abc paddr 0x1a003abc align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x0000005c vaddr 0x1000005c paddr 0x1000005c align 2**12
         filesz 0x00000000 memsz 0x000001a8 flags rw-
    LOAD off    0x00001000 vaddr 0x1a000000 paddr 0x1a000000 align 2**12
         filesz 0x00003ac4 memsz 0x00003ac4 flags r-x
    LOAD off    0x00005000 vaddr 0x10000000 paddr 0x1a003ac4 align 2**12
         filesz 0x0000005c memsz 0x0000005c flags rw-
private flags = 0x5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000300  1a000000  1a000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  10000000  1a003ac4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  0000505c  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  0000505c  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  0000505c  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  0000505c  2**2
                  CONTENTS
  6 .bss          000001a8  1000005c  1000005c  0000105c  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  0000505c  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  0000505c  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  0000505c  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  0000505c  2**2
                  CONTENTS
 11 .text         000037bc  1a000300  1a000300  00001300  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .ARM.exidx    00000008  1a003abc  1a003abc  00004abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  0000505c  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  0000505c  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  0000505c  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  0000505c  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  0000505c  2**2
                  CONTENTS
 18 .noinit       00000000  10000204  10000204  00000000  2**2
                  ALLOC
 19 .debug_info   00019aa9  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 000055f9  00000000  00000000  0001eb05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000047f6  00000000  00000000  000240fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_aranges 00000948  00000000  00000000  000288f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 0000043f  00000000  00000000  00029240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  000082ad  00000000  00000000  0002967f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line   0000cf60  00000000  00000000  0003192c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    0001e750  00000000  00000000  0003e88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .comment      0000008e  00000000  00000000  0005cfdc  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  0005d06a  2**0
                  CONTENTS, READONLY
 29 .debug_frame  000015c8  00000000  00000000  0005d09c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_ranges 00000350  00000000  00000000  0005e664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_loc    00002be8  00000000  00000000  0005e9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 32 .debug_line_str 00000154  00000000  00000000  0006159c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
1000005c l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a000300 l    d  .text	00000000 .text
1a003abc l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000204 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 impure.c
00000000 l    df *ABS*	00000000 findfp.c
1a003318 l     F .text	00000004 __fp_lock
1a00331c l     F .text	00000018 stdio_exit_handler
1a003334 l     F .text	00000040 cleanup_stdio
1a003374 l     F .text	00000004 __fp_unlock
1a003378 l     F .text	000000d0 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 main.c
1a000300 l     F .text	00000020 control_motors
1a000320 l     F .text	000000e4 process_rover_command
1000005c l     O .bss	00000004 tick_counter
00000000 l    df *ABS*	00000000 uart_comm.c
1000006a l     O .bss	00000001 new_command_received
10000060 l     O .bss	0000000a last_received_command
1a000508 l     F .text	00000024 send_response
1a00052c l     F .text	000000a0 parse_command_string
1000006c l     O .bss	00000002 rx_write_index
10000070 l     O .bss	00000040 rx_buffer
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000708 l     F .text	000000a0 pll_calc_divs
1a0007a8 l     F .text	00000100 pll_get_frac
1a0008a8 l     F .text	0000004c Chip_Clock_FindBaseClock
1a000b1c l     F .text	00000022 Chip_Clock_GetDivRate
100000b0 l     O .bss	00000008 audio_usb_pll_freq
1a003868 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a0038d4 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000e04 l     F .text	0000002c Chip_UART_GetIndex
1a00391c l     O .text	00000008 UART_BClock
1a003924 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 board.c
1a000fac l     F .text	00000048 Board_LED_Init
1a00392c l     O .text	0000000c gpioLEDBits
00000000 l    df *ABS*	00000000 board_sysinit.c
1a0010f4 l     F .text	00000034 Chip_SCU_SetPinMuxing
1a003940 l     O .text	00000060 pinmuxing
1a0039a0 l     O .text	0000000c InitClkStates
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 system.c
100000b8 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 nano-svfprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 libc_a-strlen.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
1a001c7c l     F .text	00000048 sbrk_aligned
00000000 l    df *ABS*	00000000 freer.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 libc_a-memcpy.o
00000000 l    df *ABS*	00000000 reallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 msizer.c
00000000 l    df *ABS*	00000000 nano-svfscanf.c
00000000 l    df *ABS*	00000000 nano-vfscanf_i.c
00000000 l    df *ABS*	00000000 strtol.c
1a002e60 l     F .text	00000138 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 strtoul.c
1a0031b0 l     F .text	00000134 _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 ctype_.c
1a002710 g     F .text	00000010 _malloc_usable_size_r
1a002b58 g     F .text	000000d0 _scanf_chars
1a000940 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0004a4 g     F .text	0000000c uart_is_new_command_available
1a00018a  w    F .text	00000002 TIMER2_IRQHandler
1a001242 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a0015ac g     F .text	0000003c _siprintf_r
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a00018a  w    F .text	00000002 I2C0_IRQHandler
1a0026e4 g     F .text	00000022 __sseek
1a0034ec g     F .text	00000020 __sinit
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a003198 g     F .text	00000018 ungetc
1a002564 g     F .text	00000002 __malloc_unlock
1a000494 g     F .text	00000010 SysTick_Handler
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a001044 g     F .text	0000001c Board_UARTGetChar
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a001e80 g     F .text	000000fe memmove
1a000186  w    F .text	00000002 PendSV_Handler
1a0025ec g     F .text	00000090 snprintf
1a000178  w    F .text	00000002 NMI_Handler
1a003ac4 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a0036e4 g     F .text	0000000c __errno
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
1a00018a  w    F .text	00000002 CAN1_IRQHandler
100001fc g     O .bss	00000004 __stdio_exit_handler
1a002c28 g     F .text	00000238 _scanf_i
1a0026a0 g     F .text	00000004 __seofread
1a003ac4 g       .ARM.exidx	00000000 _etext
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a00018a  w    F .text	00000002 TIMER3_IRQHandler
1a000bbe g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a00018a  w    F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a002020 g     F .text	00000134 memcpy
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a0004b0 g     F .text	00000040 uart_get_received_command
1a0017f4 g     F .text	00000238 _svfprintf_r
1a0012bc g     F .text	00000000 .hidden __aeabi_uldivmod
10000204 g       .noinit	00000000 _noinit
10000200 g     O .bss	00000004 SystemCoreClock
1a000e30 g     F .text	00000054 Chip_UART_Init
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a000c08 g     F .text	0000004c Chip_Clock_GetRate
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
1a00279c g     F .text	00000038 __ssrefill_r
1a001138 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a003300 g     F .text	00000018 strtoul
1a0012ec g     F .text	000002bc .hidden __udivmoddi4
1a001274 g     F .text	00000020 _sbrk_r
1a00393c g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00124c g     F .text	00000028 _read_r
1a00018a  w    F .text	00000002 GPIO1_IRQHandler
1a003698 g     F .text	0000004c fflush
1a0027d4 g     F .text	00000384 __ssvfscanf_r
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a003abc g       .text	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a002154 g     F .text	00000064 _realloc_r
1a002f9c g     F .text	00000018 strtol_l
1a00018a  w    F .text	00000002 ADC1_IRQHandler
1a003514 g     F .text	00000014 __fp_lock_all
1a0010cc g     F .text	00000028 Board_Init
1a000114 g       .text	00000000 __data_section_table
1a002fb4 g     F .text	00000018 strtol
1a00018a  w    F .text	00000002 RTC_IRQHandler
10000204 g       .bss	00000000 _ebss
1a00018a  w    F .text	00000002 TIMER0_IRQHandler
1a002568 g     F .text	00000084 _sniprintf_r
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a0008f4 g     F .text	0000004c Chip_Clock_EnableCrystal
100000c4 g     O .bss	00000138 __sf
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018c g     F .text	0000001e data_init
1a00018a  w    F .text	00000002 TIMER1_IRQHandler
1a0025ec g     F .text	00000090 sniprintf
1a001a84 g     F .text	00000058 _siscanf_r
1a0005cc g     F .text	000000a8 UART2_IRQHandler
1a000ab0 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a00162c g     F .text	000000c0 __ssputs_r
1a002568 g     F .text	00000084 _snprintf_r
1a00018a  w    F .text	00000002 GPIO2_IRQHandler
1a000674 g     F .text	00000080 uart_init
1a00350c g     F .text	00000002 __sfp_lock_acquire
1a001f80 g     F .text	00000000 memchr
1a0015ac g     F .text	0000003c _sprintf_r
1a001dc4 g     F .text	000000bc _free_r
1a000b98 g     F .text	00000026 Chip_Clock_GetBaseClock
1000005c g       .bss	00000000 _bss
1a002720 g     F .text	0000007c _sungetc_r
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a0016ec g     F .text	00000108 __ssprint_r
1a000ca8 g     F .text	00000002 Chip_GPIO_Init
1a003938 g     O .text	00000004 OscRateIn
10000204 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a0032e4 g     F .text	00000002 _strtoul_r
1a000178 g       .text	00000000 __bss_section_table_end
1a001238 g     F .text	0000000a _close_r
1a001a2c g     F .text	00000058 sscanf
1a0015a8  w    F .text	00000002 .hidden __aeabi_ldiv0
1a003448 g     F .text	000000a4 __sfp
1a00267c g     F .text	00000022 __sread
1a00018a  w    F .text	00000002 USB0_IRQHandler
1a00018a  w    F .text	00000002 GPIO3_IRQHandler
1a002560 g     F .text	00000002 __malloc_lock
1a001030 g     F .text	00000014 Board_UARTPutChar
1a000e84 g     F .text	00000028 Chip_UART_Send
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a003660 g     F .text	00000036 _fflush_r
1a00095c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001bd8 g     F .text	000000a2 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000404 g     F .text	00000090 main
1a00018a  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a002708 g     F .text	00000008 __sclose
1a002f98 g     F .text	00000002 _strtol_r
1a0010b4 g     F .text	00000016 Board_LED_Toggle
1a001cc4 g     F .text	00000100 _malloc_r
1a003064 g     F .text	00000072 __submore
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a000bcc g     F .text	0000003c Chip_Clock_EnableOpts
1a000978 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000c54 g     F .text	00000054 fpuInit
1a001088 g     F .text	0000002c Board_LED_Test
1a001a2c g     F .text	00000058 siscanf
1a000a30 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a00122c g     F .text	0000000c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a0032e8 g     F .text	00000018 strtoul_l
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a000eac g     F .text	00000024 Chip_UART_SendBlocking
1a0015e8 g     F .text	00000044 sprintf
1a001128 g     F .text	00000010 Board_SetupMuxing
1a000ed0 g     F .text	000000dc Chip_UART_SetBaudFDR
1a001294 g     F .text	00000028 _write_r
1a00018a  w    F .text	00000002 ETH_IRQHandler
1a0021b8 g     F .text	00000122 _printf_common
10000000 g     O .data	00000004 _impure_ptr
1a00353c g     F .text	00000124 __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0036f0 g     F .text	00000044 _fwalk_sglue
1a0017f4 g     F .text	00000238 _svfiprintf_r
1a00018a  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a003528 g     F .text	00000014 __fp_unlock_all
10000204 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1a0027d4 g     F .text	00000384 __ssvfiscanf_r
1a00018a  w    F .text	00000002 DAC_IRQHandler
1a001008 g     F .text	00000028 Board_Debug_Init
1a001a84 g     F .text	00000058 _sscanf_r
10000050 g     O .data	0000000c __sglue
1000005c g       .data	00000000 _edata
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
1a000cac g     F .text	00000158 Chip_SetupCoreClock
1a0026a4 g     F .text	0000003e __swrite
1a00018a  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a0011b0 g     F .text	0000007c ResetISR
1a0006f4 g     F .text	00000014 SystemCoreClockUpdate
10000004 g     O .data	0000004c _impure_data
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a003510 g     F .text	00000002 __sfp_lock_release
1a0015e8 g     F .text	00000044 siprintf
1a002fcc g     F .text	00000098 __sccl
1a0039b8 g     O .text	00000101 _ctype_
1a0015a8  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a0004f0 g     F .text	00000018 uart_send_string_blocking
1a001b00 g     F .text	000000d8 strlen
1a0022dc g     F .text	00000284 _printf_i
1a00018a  w    F .text	00000002 UART3_IRQHandler
100000bc g     O .bss	00000004 __malloc_sbrk_start
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a001060 g     F .text	00000028 Board_LED_Set
1a00018a  w    F .text	00000002 M0APP_IRQHandler
100000c0 g     O .bss	00000004 __malloc_free_list
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a0030d8 g     F .text	000000be _ungetc_r
1a000ff4 g     F .text	00000014 Board_UART_Init
1a000b40 g     F .text	00000058 Chip_Clock_SetBaseClock
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
1a0011a4 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 b1 11 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 00 00 00 00     }...............
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	95 04 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00006c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00007c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a cd 05 00 1a     ................
1a0000ac:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000bc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000cc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a003ac4 	.word	0x1a003ac4
1a000118:	10000000 	.word	0x10000000
1a00011c:	0000005c 	.word	0x0000005c
1a000120:	1a003ac4 	.word	0x1a003ac4
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a003ac4 	.word	0x1a003ac4
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a003ac4 	.word	0x1a003ac4
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a003ac4 	.word	0x1a003ac4
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	1000005c 	.word	0x1000005c
1a000154:	000001a8 	.word	0x000001a8
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	f850 4b04 	ldr.w	r4, [r0], #4
1a000198:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	3304      	adds	r3, #4
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	428b      	cmp	r3, r1
1a0001ae:	d204      	bcs.n	1a0001ba <bss_init+0x10>
        *pulDest++ = 0;
1a0001b0:	2200      	movs	r2, #0
1a0001b2:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
1a0001b8:	e7f8      	b.n	1a0001ac <bss_init+0x2>
}
1a0001ba:	4770      	bx	lr
1a0001bc:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

Disassembly of section .text:

1a000300 <control_motors>:
 * @brief Control de Motores
 *
 * Envia comandos de control a los motores. Por ahora es un placeholder para debugear.
 */
static void control_motors(int speed_m1, int speed_m2)
{
1a000300:	b500      	push	{lr}
1a000302:	b08f      	sub	sp, #60	@ 0x3c
1a000304:	4602      	mov	r2, r0
1a000306:	460b      	mov	r3, r1
   // Placeholder: Imprime velocidades recibidas por UART (útil para debug inicial)
   char debug_msg[50];
   sprintf(debug_msg, "Motores: M1=%d, M2=%d\n", speed_m1, speed_m2);
1a000308:	4904      	ldr	r1, [pc, #16]	@ (1a00031c <control_motors+0x1c>)
1a00030a:	a801      	add	r0, sp, #4
1a00030c:	f001 f96c 	bl	1a0015e8 <siprintf>
   uart_send_string_blocking(debug_msg);
1a000310:	a801      	add	r0, sp, #4
1a000312:	f000 f8ed 	bl	1a0004f0 <uart_send_string_blocking>
}
1a000316:	b00f      	add	sp, #60	@ 0x3c
1a000318:	f85d fb04 	ldr.w	pc, [sp], #4
1a00031c:	1a003734 	.word	0x1a003734

1a000320 <process_rover_command>:
{
1a000320:	b500      	push	{lr}
1a000322:	b085      	sub	sp, #20
1a000324:	ab04      	add	r3, sp, #16
1a000326:	e903 0007 	stmdb	r3, {r0, r1, r2}
   if (!cmd.valid)
1a00032a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00032e:	b13b      	cbz	r3, 1a000340 <process_rover_command+0x20>
   switch (cmd.cmd_type)
1a000330:	f89d 3004 	ldrb.w	r3, [sp, #4]
1a000334:	2b03      	cmp	r3, #3
1a000336:	d851      	bhi.n	1a0003dc <process_rover_command+0xbc>
1a000338:	e8df f003 	tbb	[pc, r3]
1a00033c:	3e2c1a08 	.word	0x3e2c1a08
      uart_send_string_blocking("Error: Comando Invalido\n");
1a000340:	482a      	ldr	r0, [pc, #168]	@ (1a0003ec <process_rover_command+0xcc>)
1a000342:	f000 f8d5 	bl	1a0004f0 <uart_send_string_blocking>
}
1a000346:	b005      	add	sp, #20
1a000348:	f85d fb04 	ldr.w	pc, [sp], #4
      Board_LED_Set(LED_1, true);
1a00034c:	2101      	movs	r1, #1
1a00034e:	2000      	movs	r0, #0
1a000350:	f000 fe86 	bl	1a001060 <Board_LED_Set>
      Board_LED_Set(LED_2, false);
1a000354:	2100      	movs	r1, #0
1a000356:	2001      	movs	r0, #1
1a000358:	f000 fe82 	bl	1a001060 <Board_LED_Set>
      control_motors(cmd.speed_M1, cmd.speed_M2);
1a00035c:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
1a000360:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
1a000364:	f7ff ffcc 	bl	1a000300 <control_motors>
      uart_send_string_blocking("OK: FORWARD\n");
1a000368:	4821      	ldr	r0, [pc, #132]	@ (1a0003f0 <process_rover_command+0xd0>)
1a00036a:	f000 f8c1 	bl	1a0004f0 <uart_send_string_blocking>
      break;
1a00036e:	e7ea      	b.n	1a000346 <process_rover_command+0x26>
      Board_LED_Set(LED_1, false);
1a000370:	2100      	movs	r1, #0
1a000372:	4608      	mov	r0, r1
1a000374:	f000 fe74 	bl	1a001060 <Board_LED_Set>
      Board_LED_Set(LED_2, true);
1a000378:	2101      	movs	r1, #1
1a00037a:	4608      	mov	r0, r1
1a00037c:	f000 fe70 	bl	1a001060 <Board_LED_Set>
      control_motors(cmd.speed_M1, cmd.speed_M2);
1a000380:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
1a000384:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
1a000388:	f7ff ffba 	bl	1a000300 <control_motors>
      uart_send_string_blocking("OK: BACKWARDS\n");
1a00038c:	4819      	ldr	r0, [pc, #100]	@ (1a0003f4 <process_rover_command+0xd4>)
1a00038e:	f000 f8af 	bl	1a0004f0 <uart_send_string_blocking>
      break;
1a000392:	e7d8      	b.n	1a000346 <process_rover_command+0x26>
      Board_LED_Set(LED_1, true);
1a000394:	2101      	movs	r1, #1
1a000396:	2000      	movs	r0, #0
1a000398:	f000 fe62 	bl	1a001060 <Board_LED_Set>
      Board_LED_Set(LED_2, true);
1a00039c:	2101      	movs	r1, #1
1a00039e:	4608      	mov	r0, r1
1a0003a0:	f000 fe5e 	bl	1a001060 <Board_LED_Set>
      control_motors(cmd.speed_M1, cmd.speed_M2);
1a0003a4:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
1a0003a8:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
1a0003ac:	f7ff ffa8 	bl	1a000300 <control_motors>
      uart_send_string_blocking("OK: LEFT\n");
1a0003b0:	4811      	ldr	r0, [pc, #68]	@ (1a0003f8 <process_rover_command+0xd8>)
1a0003b2:	f000 f89d 	bl	1a0004f0 <uart_send_string_blocking>
      break;
1a0003b6:	e7c6      	b.n	1a000346 <process_rover_command+0x26>
      Board_LED_Set(LED_1, true);
1a0003b8:	2101      	movs	r1, #1
1a0003ba:	2000      	movs	r0, #0
1a0003bc:	f000 fe50 	bl	1a001060 <Board_LED_Set>
      Board_LED_Set(LED_2, true);
1a0003c0:	2101      	movs	r1, #1
1a0003c2:	4608      	mov	r0, r1
1a0003c4:	f000 fe4c 	bl	1a001060 <Board_LED_Set>
      control_motors(cmd.speed_M1, cmd.speed_M2);
1a0003c8:	f9bd 100a 	ldrsh.w	r1, [sp, #10]
1a0003cc:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
1a0003d0:	f7ff ff96 	bl	1a000300 <control_motors>
      uart_send_string_blocking("OK: RIGHT\n");
1a0003d4:	4809      	ldr	r0, [pc, #36]	@ (1a0003fc <process_rover_command+0xdc>)
1a0003d6:	f000 f88b 	bl	1a0004f0 <uart_send_string_blocking>
      break;
1a0003da:	e7b4      	b.n	1a000346 <process_rover_command+0x26>
      uart_send_string_blocking("Error: Comando Desconocido\n");
1a0003dc:	4808      	ldr	r0, [pc, #32]	@ (1a000400 <process_rover_command+0xe0>)
1a0003de:	f000 f887 	bl	1a0004f0 <uart_send_string_blocking>
      control_motors(0, 0); // Detener por seguridad
1a0003e2:	2100      	movs	r1, #0
1a0003e4:	4608      	mov	r0, r1
1a0003e6:	f7ff ff8b 	bl	1a000300 <control_motors>
      break;
1a0003ea:	e7ac      	b.n	1a000346 <process_rover_command+0x26>
1a0003ec:	1a00374c 	.word	0x1a00374c
1a0003f0:	1a003768 	.word	0x1a003768
1a0003f4:	1a003778 	.word	0x1a003778
1a0003f8:	1a003788 	.word	0x1a003788
1a0003fc:	1a003794 	.word	0x1a003794
1a000400:	1a0037a0 	.word	0x1a0037a0

1a000404 <main>:
 * This is the main entry point of the software.
 *
 * @returns 0 : Never returns.
 */
int main(void)
{
1a000404:	b500      	push	{lr}
1a000406:	b085      	sub	sp, #20
   /* Inicializaciones */
   Board_Init();
1a000408:	f000 fe60 	bl	1a0010cc <Board_Init>
   SystemCoreClockUpdate();
1a00040c:	f000 f972 	bl	1a0006f4 <SystemCoreClockUpdate>
   SysTick_Config(SystemCoreClock / 1000); /* Interrupción cada 1 ms */
1a000410:	4b1b      	ldr	r3, [pc, #108]	@ (1a000480 <main+0x7c>)
1a000412:	681b      	ldr	r3, [r3, #0]
1a000414:	4a1b      	ldr	r2, [pc, #108]	@ (1a000484 <main+0x80>)
1a000416:	fba2 2303 	umull	r2, r3, r2, r3
1a00041a:	099b      	lsrs	r3, r3, #6
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a00041c:	3b01      	subs	r3, #1
1a00041e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
1a000422:	d20a      	bcs.n	1a00043a <main+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a000424:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
1a000428:	6153      	str	r3, [r2, #20]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a00042a:	4b17      	ldr	r3, [pc, #92]	@ (1a000488 <main+0x84>)
1a00042c:	21e0      	movs	r1, #224	@ 0xe0
1a00042e:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a000432:	2300      	movs	r3, #0
1a000434:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a000436:	2307      	movs	r3, #7
1a000438:	6113      	str	r3, [r2, #16]

   // Inicializa la comunicación UART a 115200 baudios (igual que el ESP32)
   uart_init(UART_BAUD_RATE);
1a00043a:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
1a00043e:	f000 f919 	bl	1a000674 <uart_init>
   uart_send_string_blocking("EDU-CIAA Rover Controller Inicializado.\n");
1a000442:	4812      	ldr	r0, [pc, #72]	@ (1a00048c <main+0x88>)
1a000444:	f000 f854 	bl	1a0004f0 <uart_send_string_blocking>
1a000448:	e00f      	b.n	1a00046a <main+0x66>
   while (1)
   {
      /* Verifica si hay un nuevo comando disponible desde UART */
      if (uart_is_new_command_available())
      {
         uart_get_received_command(&current_command); // Obtiene el comando
1a00044a:	ac01      	add	r4, sp, #4
1a00044c:	4620      	mov	r0, r4
1a00044e:	f000 f82f 	bl	1a0004b0 <uart_get_received_command>
         process_rover_command(current_command);      // Procesa el comando
1a000452:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
1a000456:	f7ff ff63 	bl	1a000320 <process_rover_command>
1a00045a:	e00a      	b.n	1a000472 <main+0x6e>
      }

      /* Parpadeo de LED RGB azul como señal de vida (heartbeat) */
      if (tick_counter >= TICK_DELAY_MS)
      {
         tick_counter = 0;
1a00045c:	4b0c      	ldr	r3, [pc, #48]	@ (1a000490 <main+0x8c>)
1a00045e:	2200      	movs	r2, #0
1a000460:	601a      	str	r2, [r3, #0]
         Board_LED_Toggle(LED_3); // LED Azul
1a000462:	2002      	movs	r0, #2
1a000464:	f000 fe26 	bl	1a0010b4 <Board_LED_Toggle>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
1a000468:	bf30      	wfi
      if (uart_is_new_command_available())
1a00046a:	f000 f81b 	bl	1a0004a4 <uart_is_new_command_available>
1a00046e:	2800      	cmp	r0, #0
1a000470:	d1eb      	bne.n	1a00044a <main+0x46>
      if (tick_counter >= TICK_DELAY_MS)
1a000472:	4b07      	ldr	r3, [pc, #28]	@ (1a000490 <main+0x8c>)
1a000474:	681b      	ldr	r3, [r3, #0]
1a000476:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
1a00047a:	d3f5      	bcc.n	1a000468 <main+0x64>
1a00047c:	e7ee      	b.n	1a00045c <main+0x58>
1a00047e:	bf00      	nop
1a000480:	10000200 	.word	0x10000200
1a000484:	10624dd3 	.word	0x10624dd3
1a000488:	e000ed00 	.word	0xe000ed00
1a00048c:	1a0037bc 	.word	0x1a0037bc
1a000490:	1000005c 	.word	0x1000005c

1a000494 <SysTick_Handler>:
 * @brief Handler de la interrupción del SysTick cada 1ms.
 */
void SysTick_Handler(void)
{
   // Incrementa el contador para el delay del parpadeo del LED
   tick_counter++;
1a000494:	4a02      	ldr	r2, [pc, #8]	@ (1a0004a0 <SysTick_Handler+0xc>)
1a000496:	6813      	ldr	r3, [r2, #0]
1a000498:	3301      	adds	r3, #1
1a00049a:	6013      	str	r3, [r2, #0]
1a00049c:	4770      	bx	lr
1a00049e:	bf00      	nop
1a0004a0:	1000005c 	.word	0x1000005c

1a0004a4 <uart_is_new_command_available>:
    send_response(RESP_READY, 0);
}

bool uart_is_new_command_available(void)
{
    return new_command_received;
1a0004a4:	4b01      	ldr	r3, [pc, #4]	@ (1a0004ac <uart_is_new_command_available+0x8>)
1a0004a6:	7818      	ldrb	r0, [r3, #0]
}
1a0004a8:	4770      	bx	lr
1a0004aa:	bf00      	nop
1a0004ac:	1000006a 	.word	0x1000006a

1a0004b0 <uart_get_received_command>:

void uart_get_received_command(RoverCommand *cmd)
{
    if (cmd == NULL)
1a0004b0:	b1c0      	cbz	r0, 1a0004e4 <uart_get_received_command+0x34>
1a0004b2:	4603      	mov	r3, r0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1a0004b4:	b672      	cpsid	i
        return;

    __disable_irq();
    if (new_command_received)
1a0004b6:	4a0c      	ldr	r2, [pc, #48]	@ (1a0004e8 <uart_get_received_command+0x38>)
1a0004b8:	7812      	ldrb	r2, [r2, #0]
1a0004ba:	b91a      	cbnz	r2, 1a0004c4 <uart_get_received_command+0x14>
        new_command_received = false;
        last_received_command.valid = false;
    }
    else
    {
        cmd->valid = false;
1a0004bc:	2200      	movs	r2, #0
1a0004be:	7202      	strb	r2, [r0, #8]
  __ASM volatile ("cpsie i" : : : "memory");
1a0004c0:	b662      	cpsie	i
1a0004c2:	4770      	bx	lr
{
1a0004c4:	b410      	push	{r4}
        memcpy(cmd, (const void *)&last_received_command, sizeof(RoverCommand));
1a0004c6:	4c09      	ldr	r4, [pc, #36]	@ (1a0004ec <uart_get_received_command+0x3c>)
1a0004c8:	4622      	mov	r2, r4
1a0004ca:	ca03      	ldmia	r2!, {r0, r1}
1a0004cc:	6018      	str	r0, [r3, #0]
1a0004ce:	6059      	str	r1, [r3, #4]
1a0004d0:	8812      	ldrh	r2, [r2, #0]
1a0004d2:	811a      	strh	r2, [r3, #8]
        new_command_received = false;
1a0004d4:	2300      	movs	r3, #0
1a0004d6:	4a04      	ldr	r2, [pc, #16]	@ (1a0004e8 <uart_get_received_command+0x38>)
1a0004d8:	7013      	strb	r3, [r2, #0]
        last_received_command.valid = false;
1a0004da:	7223      	strb	r3, [r4, #8]
1a0004dc:	b662      	cpsie	i
    }
    __enable_irq();
}
1a0004de:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0004e2:	4770      	bx	lr
1a0004e4:	4770      	bx	lr
1a0004e6:	bf00      	nop
1a0004e8:	1000006a 	.word	0x1000006a
1a0004ec:	10000060 	.word	0x10000060

1a0004f0 <uart_send_string_blocking>:

void uart_send_string_blocking(const char *str)
{
1a0004f0:	b510      	push	{r4, lr}
1a0004f2:	4604      	mov	r4, r0
    Chip_UART_SendBlocking(LPC_USART2, str, strlen(str));
1a0004f4:	f001 fb04 	bl	1a001b00 <strlen>
1a0004f8:	4602      	mov	r2, r0
1a0004fa:	4621      	mov	r1, r4
1a0004fc:	4801      	ldr	r0, [pc, #4]	@ (1a000504 <uart_send_string_blocking+0x14>)
1a0004fe:	f000 fcd5 	bl	1a000eac <Chip_UART_SendBlocking>
}
1a000502:	bd10      	pop	{r4, pc}
1a000504:	400c1000 	.word	0x400c1000

1a000508 <send_response>:
/**
 * @brief Envía respuesta en formato: S:<RESP_TYPE>:<CMD_ID>:E
 * Ejemplo: "S:0:123:E" (ACK para comando con ID 123)
 */
static void send_response(response_type_t resp_type, uint16_t cmd_id)
{
1a000508:	b500      	push	{lr}
1a00050a:	b089      	sub	sp, #36	@ 0x24
1a00050c:	4603      	mov	r3, r0
    char response[20];
    snprintf(response, sizeof(response), "S:%d:%u:E", resp_type, cmd_id);
1a00050e:	9100      	str	r1, [sp, #0]
1a000510:	4a05      	ldr	r2, [pc, #20]	@ (1a000528 <send_response+0x20>)
1a000512:	2114      	movs	r1, #20
1a000514:	a803      	add	r0, sp, #12
1a000516:	f002 f869 	bl	1a0025ec <sniprintf>
    uart_send_string_blocking(response);
1a00051a:	a803      	add	r0, sp, #12
1a00051c:	f7ff ffe8 	bl	1a0004f0 <uart_send_string_blocking>
1a000520:	b009      	add	sp, #36	@ 0x24
1a000522:	f85d fb04 	ldr.w	pc, [sp], #4
1a000526:	bf00      	nop
1a000528:	1a0037e8 	.word	0x1a0037e8

1a00052c <parse_command_string>:
    if (buffer == NULL || command == NULL)
1a00052c:	2800      	cmp	r0, #0
1a00052e:	d045      	beq.n	1a0005bc <parse_command_string+0x90>
{
1a000530:	b510      	push	{r4, lr}
1a000532:	b082      	sub	sp, #8
1a000534:	460c      	mov	r4, r1
    if (buffer == NULL || command == NULL)
1a000536:	2900      	cmp	r1, #0
1a000538:	d042      	beq.n	1a0005c0 <parse_command_string+0x94>
    int items = sscanf(buffer, "%hhu:%hu:", &cmd_type, &cmd_id);
1a00053a:	ab01      	add	r3, sp, #4
1a00053c:	f10d 0207 	add.w	r2, sp, #7
1a000540:	4921      	ldr	r1, [pc, #132]	@ (1a0005c8 <parse_command_string+0x9c>)
1a000542:	f001 fa73 	bl	1a001a2c <siscanf>
    if (items != 2)
1a000546:	2802      	cmp	r0, #2
1a000548:	d10d      	bne.n	1a000566 <parse_command_string+0x3a>
    if (cmd_type > CMD_MOVE_RIGHT)
1a00054a:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a00054e:	2b03      	cmp	r3, #3
1a000550:	d80f      	bhi.n	1a000572 <parse_command_string+0x46>
    command->cmd_type = cmd_type;
1a000552:	7023      	strb	r3, [r4, #0]
    command->cmd_id = cmd_id;
1a000554:	f8bd 1004 	ldrh.w	r1, [sp, #4]
1a000558:	8061      	strh	r1, [r4, #2]
    switch (cmd_type)
1a00055a:	2b03      	cmp	r3, #3
1a00055c:	d829      	bhi.n	1a0005b2 <parse_command_string+0x86>
1a00055e:	e8df f003 	tbb	[pc, r3]
1a000562:	170f      	.short	0x170f
1a000564:	221c      	.short	0x221c
        send_response(RESP_ERR_INVALID_COMMAND, 0);
1a000566:	2100      	movs	r1, #0
1a000568:	2003      	movs	r0, #3
1a00056a:	f7ff ffcd 	bl	1a000508 <send_response>
        return false;
1a00056e:	2000      	movs	r0, #0
1a000570:	e027      	b.n	1a0005c2 <parse_command_string+0x96>
        send_response(RESP_ERR_INVALID_COMMAND, cmd_id);
1a000572:	f8bd 1004 	ldrh.w	r1, [sp, #4]
1a000576:	2003      	movs	r0, #3
1a000578:	f7ff ffc6 	bl	1a000508 <send_response>
        return false;
1a00057c:	2000      	movs	r0, #0
1a00057e:	e020      	b.n	1a0005c2 <parse_command_string+0x96>
        command->speed_M1 = 100;
1a000580:	2364      	movs	r3, #100	@ 0x64
1a000582:	80a3      	strh	r3, [r4, #4]
        command->speed_M2 = 100;
1a000584:	80e3      	strh	r3, [r4, #6]
    send_response(RESP_ACK, cmd_id);
1a000586:	2000      	movs	r0, #0
1a000588:	f7ff ffbe 	bl	1a000508 <send_response>
    return true;
1a00058c:	2001      	movs	r0, #1
1a00058e:	e018      	b.n	1a0005c2 <parse_command_string+0x96>
        command->speed_M1 = -100;
1a000590:	f64f 739c 	movw	r3, #65436	@ 0xff9c
1a000594:	80a3      	strh	r3, [r4, #4]
        command->speed_M2 = -100;
1a000596:	80e3      	strh	r3, [r4, #6]
        break;
1a000598:	e7f5      	b.n	1a000586 <parse_command_string+0x5a>
        command->speed_M1 = -50;
1a00059a:	f64f 73ce 	movw	r3, #65486	@ 0xffce
1a00059e:	80a3      	strh	r3, [r4, #4]
        command->speed_M2 = 50;
1a0005a0:	2332      	movs	r3, #50	@ 0x32
1a0005a2:	80e3      	strh	r3, [r4, #6]
        break;
1a0005a4:	e7ef      	b.n	1a000586 <parse_command_string+0x5a>
        command->speed_M1 = 50;
1a0005a6:	2332      	movs	r3, #50	@ 0x32
1a0005a8:	80a3      	strh	r3, [r4, #4]
        command->speed_M2 = -50;
1a0005aa:	f64f 73ce 	movw	r3, #65486	@ 0xffce
1a0005ae:	80e3      	strh	r3, [r4, #6]
        break;
1a0005b0:	e7e9      	b.n	1a000586 <parse_command_string+0x5a>
        send_response(RESP_ERR_INVALID_COMMAND, cmd_id);
1a0005b2:	2003      	movs	r0, #3
1a0005b4:	f7ff ffa8 	bl	1a000508 <send_response>
        return false;
1a0005b8:	2000      	movs	r0, #0
1a0005ba:	e002      	b.n	1a0005c2 <parse_command_string+0x96>
        return false;
1a0005bc:	2000      	movs	r0, #0
}
1a0005be:	4770      	bx	lr
        return false;
1a0005c0:	2000      	movs	r0, #0
}
1a0005c2:	b002      	add	sp, #8
1a0005c4:	bd10      	pop	{r4, pc}
1a0005c6:	bf00      	nop
1a0005c8:	1a0037f4 	.word	0x1a0037f4

1a0005cc <UART2_IRQHandler>:
 * @note   Mask bits of the returned status value with UART_LSR_*
 *         definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
   return pUART->LSR;
1a0005cc:	4b24      	ldr	r3, [pc, #144]	@ (1a000660 <UART2_IRQHandler+0x94>)
1a0005ce:	695b      	ldr	r3, [r3, #20]
    while (Chip_UART_ReadLineStatus(LPC_USART2) & UART_LSR_RDR)
1a0005d0:	f013 0f01 	tst.w	r3, #1
1a0005d4:	d043      	beq.n	1a00065e <UART2_IRQHandler+0x92>
{
1a0005d6:	b570      	push	{r4, r5, r6, lr}
1a0005d8:	e027      	b.n	1a00062a <UART2_IRQHandler+0x5e>
            rx_write_index = 0;
1a0005da:	2100      	movs	r1, #0
1a0005dc:	4b21      	ldr	r3, [pc, #132]	@ (1a000664 <UART2_IRQHandler+0x98>)
1a0005de:	8019      	strh	r1, [r3, #0]
            memset((void *)rx_buffer, 0, UART_RX_BUFFER_SIZE);
1a0005e0:	2240      	movs	r2, #64	@ 0x40
1a0005e2:	4821      	ldr	r0, [pc, #132]	@ (1a000668 <UART2_IRQHandler+0x9c>)
1a0005e4:	f001 faf8 	bl	1a001bd8 <memset>
            continue;
1a0005e8:	e01a      	b.n	1a000620 <UART2_IRQHandler+0x54>
        if (received_byte == FRAME_END_CHAR && rx_write_index > 0)
1a0005ea:	4a1e      	ldr	r2, [pc, #120]	@ (1a000664 <UART2_IRQHandler+0x98>)
1a0005ec:	8812      	ldrh	r2, [r2, #0]
1a0005ee:	b292      	uxth	r2, r2
1a0005f0:	b332      	cbz	r2, 1a000640 <UART2_IRQHandler+0x74>
            rx_buffer[rx_write_index] = '\0';
1a0005f2:	4c1c      	ldr	r4, [pc, #112]	@ (1a000664 <UART2_IRQHandler+0x98>)
1a0005f4:	8823      	ldrh	r3, [r4, #0]
1a0005f6:	b29b      	uxth	r3, r3
1a0005f8:	481b      	ldr	r0, [pc, #108]	@ (1a000668 <UART2_IRQHandler+0x9c>)
1a0005fa:	2500      	movs	r5, #0
1a0005fc:	54c5      	strb	r5, [r0, r3]
            last_received_command.valid = parse_command_string((const char *)rx_buffer, &last_received_command);
1a0005fe:	4e1b      	ldr	r6, [pc, #108]	@ (1a00066c <UART2_IRQHandler+0xa0>)
1a000600:	4631      	mov	r1, r6
1a000602:	f7ff ff93 	bl	1a00052c <parse_command_string>
1a000606:	7230      	strb	r0, [r6, #8]
            new_command_received = true;
1a000608:	4b19      	ldr	r3, [pc, #100]	@ (1a000670 <UART2_IRQHandler+0xa4>)
1a00060a:	2201      	movs	r2, #1
1a00060c:	701a      	strb	r2, [r3, #0]
            rx_write_index = 0;
1a00060e:	8025      	strh	r5, [r4, #0]
1a000610:	e006      	b.n	1a000620 <UART2_IRQHandler+0x54>
            rx_write_index = 0;
1a000612:	2100      	movs	r1, #0
1a000614:	4b13      	ldr	r3, [pc, #76]	@ (1a000664 <UART2_IRQHandler+0x98>)
1a000616:	8019      	strh	r1, [r3, #0]
            memset((void *)rx_buffer, 0, UART_RX_BUFFER_SIZE);
1a000618:	2240      	movs	r2, #64	@ 0x40
1a00061a:	4813      	ldr	r0, [pc, #76]	@ (1a000668 <UART2_IRQHandler+0x9c>)
1a00061c:	f001 fadc 	bl	1a001bd8 <memset>
1a000620:	4b0f      	ldr	r3, [pc, #60]	@ (1a000660 <UART2_IRQHandler+0x94>)
1a000622:	695b      	ldr	r3, [r3, #20]
    while (Chip_UART_ReadLineStatus(LPC_USART2) & UART_LSR_RDR)
1a000624:	f013 0f01 	tst.w	r3, #1
1a000628:	d018      	beq.n	1a00065c <UART2_IRQHandler+0x90>
   return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00062a:	4b0d      	ldr	r3, [pc, #52]	@ (1a000660 <UART2_IRQHandler+0x94>)
1a00062c:	681b      	ldr	r3, [r3, #0]
1a00062e:	b2db      	uxtb	r3, r3
        if (new_command_received)
1a000630:	4a0f      	ldr	r2, [pc, #60]	@ (1a000670 <UART2_IRQHandler+0xa4>)
1a000632:	7812      	ldrb	r2, [r2, #0]
1a000634:	2a00      	cmp	r2, #0
1a000636:	d1f3      	bne.n	1a000620 <UART2_IRQHandler+0x54>
        if (received_byte == FRAME_START_CHAR)
1a000638:	2b53      	cmp	r3, #83	@ 0x53
1a00063a:	d0ce      	beq.n	1a0005da <UART2_IRQHandler+0xe>
        if (received_byte == FRAME_END_CHAR && rx_write_index > 0)
1a00063c:	2b45      	cmp	r3, #69	@ 0x45
1a00063e:	d0d4      	beq.n	1a0005ea <UART2_IRQHandler+0x1e>
        else if (rx_write_index < (UART_RX_BUFFER_SIZE - 1))
1a000640:	4a08      	ldr	r2, [pc, #32]	@ (1a000664 <UART2_IRQHandler+0x98>)
1a000642:	8812      	ldrh	r2, [r2, #0]
1a000644:	b292      	uxth	r2, r2
1a000646:	2a3e      	cmp	r2, #62	@ 0x3e
1a000648:	d8e3      	bhi.n	1a000612 <UART2_IRQHandler+0x46>
            rx_buffer[rx_write_index++] = received_byte;
1a00064a:	4806      	ldr	r0, [pc, #24]	@ (1a000664 <UART2_IRQHandler+0x98>)
1a00064c:	8802      	ldrh	r2, [r0, #0]
1a00064e:	b292      	uxth	r2, r2
1a000650:	1c51      	adds	r1, r2, #1
1a000652:	b289      	uxth	r1, r1
1a000654:	8001      	strh	r1, [r0, #0]
1a000656:	4904      	ldr	r1, [pc, #16]	@ (1a000668 <UART2_IRQHandler+0x9c>)
1a000658:	548b      	strb	r3, [r1, r2]
1a00065a:	e7e1      	b.n	1a000620 <UART2_IRQHandler+0x54>
}
1a00065c:	bd70      	pop	{r4, r5, r6, pc}
1a00065e:	4770      	bx	lr
1a000660:	400c1000 	.word	0x400c1000
1a000664:	1000006c 	.word	0x1000006c
1a000668:	10000070 	.word	0x10000070
1a00066c:	10000060 	.word	0x10000060
1a000670:	1000006a 	.word	0x1000006a

1a000674 <uart_init>:
{
1a000674:	b538      	push	{r3, r4, r5, lr}
1a000676:	4605      	mov	r5, r0
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000678:	4b17      	ldr	r3, [pc, #92]	@ (1a0006d8 <uart_init+0x64>)
1a00067a:	221e      	movs	r2, #30
1a00067c:	f8c3 2384 	str.w	r2, [r3, #900]	@ 0x384
1a000680:	22d6      	movs	r2, #214	@ 0xd6
1a000682:	f8c3 2388 	str.w	r2, [r3, #904]	@ 0x388
    Chip_UART_Init(LPC_USART2);
1a000686:	4c15      	ldr	r4, [pc, #84]	@ (1a0006dc <uart_init+0x68>)
1a000688:	4620      	mov	r0, r4
1a00068a:	f000 fbd1 	bl	1a000e30 <Chip_UART_Init>
    Chip_UART_SetBaudFDR(LPC_USART2, baudRate);
1a00068e:	4629      	mov	r1, r5
1a000690:	4620      	mov	r0, r4
1a000692:	f000 fc1d 	bl	1a000ed0 <Chip_UART_SetBaudFDR>
   pUART->LCR = config;
1a000696:	2303      	movs	r3, #3
1a000698:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00069a:	2501      	movs	r5, #1
1a00069c:	65e5      	str	r5, [r4, #92]	@ 0x5c
   pUART->FCR = fcr;
1a00069e:	2307      	movs	r3, #7
1a0006a0:	60a3      	str	r3, [r4, #8]
   pUART->IER |= intMask;
1a0006a2:	6863      	ldr	r3, [r4, #4]
1a0006a4:	432b      	orrs	r3, r5
1a0006a6:	6063      	str	r3, [r4, #4]
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
1a0006a8:	4b0d      	ldr	r3, [pc, #52]	@ (1a0006e0 <uart_init+0x6c>)
1a0006aa:	22c0      	movs	r2, #192	@ 0xc0
1a0006ac:	f883 231a 	strb.w	r2, [r3, #794]	@ 0x31a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a0006b0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
1a0006b4:	601a      	str	r2, [r3, #0]
    rx_write_index = 0;
1a0006b6:	2400      	movs	r4, #0
1a0006b8:	4b0a      	ldr	r3, [pc, #40]	@ (1a0006e4 <uart_init+0x70>)
1a0006ba:	801c      	strh	r4, [r3, #0]
    new_command_received = false;
1a0006bc:	4b0a      	ldr	r3, [pc, #40]	@ (1a0006e8 <uart_init+0x74>)
1a0006be:	701c      	strb	r4, [r3, #0]
    last_received_command.valid = false;
1a0006c0:	4b0a      	ldr	r3, [pc, #40]	@ (1a0006ec <uart_init+0x78>)
1a0006c2:	721c      	strb	r4, [r3, #8]
    memset((void *)rx_buffer, 0, UART_RX_BUFFER_SIZE);
1a0006c4:	2240      	movs	r2, #64	@ 0x40
1a0006c6:	4621      	mov	r1, r4
1a0006c8:	4809      	ldr	r0, [pc, #36]	@ (1a0006f0 <uart_init+0x7c>)
1a0006ca:	f001 fa85 	bl	1a001bd8 <memset>
    send_response(RESP_READY, 0);
1a0006ce:	4621      	mov	r1, r4
1a0006d0:	4628      	mov	r0, r5
1a0006d2:	f7ff ff19 	bl	1a000508 <send_response>
}
1a0006d6:	bd38      	pop	{r3, r4, r5, pc}
1a0006d8:	40086000 	.word	0x40086000
1a0006dc:	400c1000 	.word	0x400c1000
1a0006e0:	e000e100 	.word	0xe000e100
1a0006e4:	1000006c 	.word	0x1000006c
1a0006e8:	1000006a 	.word	0x1000006a
1a0006ec:	10000060 	.word	0x10000060
1a0006f0:	10000070 	.word	0x10000070

1a0006f4 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0006f4:	b508      	push	{r3, lr}
   /* CPU core speed */
   SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0006f6:	2069      	movs	r0, #105	@ 0x69
1a0006f8:	f000 fa86 	bl	1a000c08 <Chip_Clock_GetRate>
1a0006fc:	4b01      	ldr	r3, [pc, #4]	@ (1a000704 <SystemCoreClockUpdate+0x10>)
1a0006fe:	6018      	str	r0, [r3, #0]
}
1a000700:	bd08      	pop	{r3, pc}
1a000702:	bf00      	nop
1a000704:	10000200 	.word	0x10000200

1a000708 <pll_calc_divs>:
       return -val;
   return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000708:	b4f0      	push	{r4, r5, r6, r7}

   uint32_t prev = freq;
   int n, m, p;

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
1a00070a:	680b      	ldr	r3, [r1, #0]
1a00070c:	f013 0f80 	tst.w	r3, #128	@ 0x80
1a000710:	d002      	beq.n	1a000718 <pll_calc_divs+0x10>
       ppll->ctrl &= ~(1 << 6);
1a000712:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
1a000716:	600b      	str	r3, [r1, #0]
   }
   for (n = 1; n <= 4; n++) {
       for (p = 0; p < 4; p ++) {
1a000718:	4607      	mov	r7, r0
1a00071a:	2501      	movs	r5, #1
1a00071c:	e03a      	b.n	1a000794 <pll_calc_divs+0x8c>
           for (m = 1; m <= 256; m++) {
               uint32_t fcco, fout;
               if (ppll->ctrl & (1 << 6)) {
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
               } else {
                   fcco = (m * ppll->fin) / n;
1a00071e:	694b      	ldr	r3, [r1, #20]
1a000720:	fb03 f302 	mul.w	r3, r3, r2
1a000724:	fbb3 f3f5 	udiv	r3, r3, r5
1a000728:	e01c      	b.n	1a000764 <pll_calc_divs+0x5c>
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
               if (fcco > PLL_MAX_CCO_FREQ) break;
               if (ppll->ctrl & (1 << 7)) {
                   fout = fcco;
1a00072a:	461c      	mov	r4, r3
   if (val < 0)
1a00072c:	ebb0 0c04 	subs.w	ip, r0, r4
1a000730:	d427      	bmi.n	1a000782 <pll_calc_divs+0x7a>
               } else {
                   fout = fcco >> (p + 1);
               }

               if (ABS(freq - fout) < prev) {
1a000732:	4567      	cmp	r7, ip
1a000734:	d906      	bls.n	1a000744 <pll_calc_divs+0x3c>
                   ppll->nsel = n;
1a000736:	608d      	str	r5, [r1, #8]
                   ppll->psel = p + 1;
1a000738:	1c77      	adds	r7, r6, #1
1a00073a:	60cf      	str	r7, [r1, #12]
                   ppll->msel = m;
1a00073c:	610a      	str	r2, [r1, #16]
                   ppll->fout = fout;
1a00073e:	618c      	str	r4, [r1, #24]
                   ppll->fcco = fcco;
1a000740:	61cb      	str	r3, [r1, #28]
                   prev = ABS(freq - fout);
1a000742:	4667      	mov	r7, ip
           for (m = 1; m <= 256; m++) {
1a000744:	3201      	adds	r2, #1
1a000746:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
1a00074a:	dc1d      	bgt.n	1a000788 <pll_calc_divs+0x80>
               if (ppll->ctrl & (1 << 6)) {
1a00074c:	680c      	ldr	r4, [r1, #0]
1a00074e:	f014 0f40 	tst.w	r4, #64	@ 0x40
1a000752:	d0e4      	beq.n	1a00071e <pll_calc_divs+0x16>
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000754:	1c73      	adds	r3, r6, #1
1a000756:	fa02 fc03 	lsl.w	ip, r2, r3
1a00075a:	694b      	ldr	r3, [r1, #20]
1a00075c:	fb03 f30c 	mul.w	r3, r3, ip
1a000760:	fbb3 f3f5 	udiv	r3, r3, r5
               if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000764:	f8df c038 	ldr.w	ip, [pc, #56]	@ 1a0007a0 <pll_calc_divs+0x98>
1a000768:	4563      	cmp	r3, ip
1a00076a:	d9eb      	bls.n	1a000744 <pll_calc_divs+0x3c>
               if (fcco > PLL_MAX_CCO_FREQ) break;
1a00076c:	f8df c034 	ldr.w	ip, [pc, #52]	@ 1a0007a4 <pll_calc_divs+0x9c>
1a000770:	4563      	cmp	r3, ip
1a000772:	d809      	bhi.n	1a000788 <pll_calc_divs+0x80>
               if (ppll->ctrl & (1 << 7)) {
1a000774:	f014 0f80 	tst.w	r4, #128	@ 0x80
1a000778:	d1d7      	bne.n	1a00072a <pll_calc_divs+0x22>
                   fout = fcco >> (p + 1);
1a00077a:	1c74      	adds	r4, r6, #1
1a00077c:	fa23 f404 	lsr.w	r4, r3, r4
1a000780:	e7d4      	b.n	1a00072c <pll_calc_divs+0x24>
       return -val;
1a000782:	f1cc 0c00 	rsb	ip, ip, #0
1a000786:	e7d4      	b.n	1a000732 <pll_calc_divs+0x2a>
       for (p = 0; p < 4; p ++) {
1a000788:	3601      	adds	r6, #1
1a00078a:	2e03      	cmp	r6, #3
1a00078c:	dc01      	bgt.n	1a000792 <pll_calc_divs+0x8a>
           for (m = 1; m <= 256; m++) {
1a00078e:	2201      	movs	r2, #1
1a000790:	e7d9      	b.n	1a000746 <pll_calc_divs+0x3e>
   for (n = 1; n <= 4; n++) {
1a000792:	3501      	adds	r5, #1
1a000794:	2d04      	cmp	r5, #4
1a000796:	dc01      	bgt.n	1a00079c <pll_calc_divs+0x94>
       for (p = 0; p < 4; p ++) {
1a000798:	2600      	movs	r6, #0
1a00079a:	e7f6      	b.n	1a00078a <pll_calc_divs+0x82>
               }
           }
       }
   }
}
1a00079c:	bcf0      	pop	{r4, r5, r6, r7}
1a00079e:	4770      	bx	lr
1a0007a0:	094c5eff 	.word	0x094c5eff
1a0007a4:	1312d000 	.word	0x1312d000

1a0007a8 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0007a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0007aa:	b099      	sub	sp, #100	@ 0x64
1a0007ac:	4605      	mov	r5, r0
1a0007ae:	460c      	mov	r4, r1
   int diff[3];
   PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a0007b0:	225c      	movs	r2, #92	@ 0x5c
1a0007b2:	2100      	movs	r1, #0
1a0007b4:	a801      	add	r0, sp, #4
1a0007b6:	f001 fa0f 	bl	1a001bd8 <memset>

   /* Try direct mode */
   pll[0].ctrl |= (1 << 7);
1a0007ba:	2380      	movs	r3, #128	@ 0x80
1a0007bc:	9300      	str	r3, [sp, #0]
   pll[0].fin = ppll->fin;
1a0007be:	6963      	ldr	r3, [r4, #20]
1a0007c0:	9305      	str	r3, [sp, #20]
   pll[0].srcin = ppll->srcin;
1a0007c2:	7923      	ldrb	r3, [r4, #4]
1a0007c4:	f88d 3004 	strb.w	r3, [sp, #4]
   pll_calc_divs(freq, &pll[0]);
1a0007c8:	4669      	mov	r1, sp
1a0007ca:	4628      	mov	r0, r5
1a0007cc:	f7ff ff9c 	bl	1a000708 <pll_calc_divs>
   if (pll[0].fout == freq) {
1a0007d0:	9b06      	ldr	r3, [sp, #24]
1a0007d2:	42ab      	cmp	r3, r5
1a0007d4:	d02f      	beq.n	1a000836 <pll_get_frac+0x8e>
   if (val < 0)
1a0007d6:	1aeb      	subs	r3, r5, r3
1a0007d8:	d436      	bmi.n	1a000848 <pll_get_frac+0xa0>
       *ppll = pll[0];
       return ;
   }
   diff[0] = ABS(freq - pll[0].fout);
1a0007da:	461e      	mov	r6, r3

   /* Try non-Integer mode */
   pll[2].ctrl = (1 << 6);
1a0007dc:	2340      	movs	r3, #64	@ 0x40
1a0007de:	9310      	str	r3, [sp, #64]	@ 0x40
   pll[2].fin = ppll->fin;
1a0007e0:	6963      	ldr	r3, [r4, #20]
1a0007e2:	9315      	str	r3, [sp, #84]	@ 0x54
   pll[2].srcin = ppll->srcin;
1a0007e4:	7923      	ldrb	r3, [r4, #4]
1a0007e6:	f88d 3044 	strb.w	r3, [sp, #68]	@ 0x44
   pll_calc_divs(freq, &pll[2]);
1a0007ea:	a910      	add	r1, sp, #64	@ 0x40
1a0007ec:	4628      	mov	r0, r5
1a0007ee:	f7ff ff8b 	bl	1a000708 <pll_calc_divs>
   if (pll[2].fout == freq) {
1a0007f2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
1a0007f4:	42ab      	cmp	r3, r5
1a0007f6:	d029      	beq.n	1a00084c <pll_get_frac+0xa4>
   if (val < 0)
1a0007f8:	1aeb      	subs	r3, r5, r3
1a0007fa:	d42f      	bmi.n	1a00085c <pll_get_frac+0xb4>
       *ppll = pll[2];
       return ;
   }

   diff[2] = ABS(freq - pll[2].fout);
1a0007fc:	461f      	mov	r7, r3
   /* Try integer mode */
   pll[1].ctrl = (1 << 6);
1a0007fe:	2340      	movs	r3, #64	@ 0x40
1a000800:	9308      	str	r3, [sp, #32]
   pll[1].fin = ppll->fin;
1a000802:	6963      	ldr	r3, [r4, #20]
1a000804:	930d      	str	r3, [sp, #52]	@ 0x34
   pll[1].srcin = ppll->srcin;
1a000806:	7923      	ldrb	r3, [r4, #4]
1a000808:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
   pll_calc_divs(freq, &pll[1]);
1a00080c:	a908      	add	r1, sp, #32
1a00080e:	4628      	mov	r0, r5
1a000810:	f7ff ff7a 	bl	1a000708 <pll_calc_divs>
   if (pll[1].fout == freq) {
1a000814:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
1a000816:	42ab      	cmp	r3, r5
1a000818:	d022      	beq.n	1a000860 <pll_get_frac+0xb8>
   if (val < 0)
1a00081a:	1aed      	subs	r5, r5, r3
1a00081c:	d428      	bmi.n	1a000870 <pll_get_frac+0xc8>
       return ;
   }
   diff[1] = ABS(freq - pll[1].fout);

   /* Find the min of 3 and return */
   if (diff[0] <= diff[1]) {
1a00081e:	42ae      	cmp	r6, r5
1a000820:	dc30      	bgt.n	1a000884 <pll_get_frac+0xdc>
       if (diff[0] <= diff[2]) {
1a000822:	42be      	cmp	r6, r7
1a000824:	dc26      	bgt.n	1a000874 <pll_get_frac+0xcc>
           *ppll = pll[0];
1a000826:	466d      	mov	r5, sp
1a000828:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00082a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00082c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000830:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000834:	e006      	b.n	1a000844 <pll_get_frac+0x9c>
       *ppll = pll[0];
1a000836:	466d      	mov	r5, sp
1a000838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00083a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00083c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000840:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
           *ppll = pll[1];
       } else {
           *ppll = pll[2];
       }
   }
}
1a000844:	b019      	add	sp, #100	@ 0x64
1a000846:	bdf0      	pop	{r4, r5, r6, r7, pc}
       return -val;
1a000848:	425b      	negs	r3, r3
1a00084a:	e7c6      	b.n	1a0007da <pll_get_frac+0x32>
       *ppll = pll[2];
1a00084c:	ad10      	add	r5, sp, #64	@ 0x40
1a00084e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000852:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000856:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a00085a:	e7f3      	b.n	1a000844 <pll_get_frac+0x9c>
       return -val;
1a00085c:	425b      	negs	r3, r3
1a00085e:	e7cd      	b.n	1a0007fc <pll_get_frac+0x54>
       *ppll = pll[1];
1a000860:	ad08      	add	r5, sp, #32
1a000862:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000864:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000866:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00086a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a00086e:	e7e9      	b.n	1a000844 <pll_get_frac+0x9c>
       return -val;
1a000870:	426d      	negs	r5, r5
1a000872:	e7d4      	b.n	1a00081e <pll_get_frac+0x76>
           *ppll = pll[2];
1a000874:	ad10      	add	r5, sp, #64	@ 0x40
1a000876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00087a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00087e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000882:	e7df      	b.n	1a000844 <pll_get_frac+0x9c>
       if (diff[1] <= diff[2]) {
1a000884:	42af      	cmp	r7, r5
1a000886:	db07      	blt.n	1a000898 <pll_get_frac+0xf0>
           *ppll = pll[1];
1a000888:	ad08      	add	r5, sp, #32
1a00088a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00088c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00088e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000892:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000896:	e7d5      	b.n	1a000844 <pll_get_frac+0x9c>
           *ppll = pll[2];
1a000898:	ad10      	add	r5, sp, #64	@ 0x40
1a00089a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00089c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00089e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0008a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0008a6:	e7cd      	b.n	1a000844 <pll_get_frac+0x9c>

1a0008a8 <Chip_Clock_FindBaseClock>:
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a0008a8:	b430      	push	{r4, r5}
1a0008aa:	4605      	mov	r5, r0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;
1a0008ac:	2300      	movs	r3, #0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a0008ae:	201c      	movs	r0, #28

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0008b0:	e000      	b.n	1a0008b4 <Chip_Clock_FindBaseClock+0xc>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
           baseclk = periph_to_base[i].clkbase;
       }
       else {
           i++;
1a0008b2:	3301      	adds	r3, #1
   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a0008b4:	281c      	cmp	r0, #28
1a0008b6:	d118      	bne.n	1a0008ea <Chip_Clock_FindBaseClock+0x42>
1a0008b8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0008bc:	0051      	lsls	r1, r2, #1
1a0008be:	4a0c      	ldr	r2, [pc, #48]	@ (1a0008f0 <Chip_Clock_FindBaseClock+0x48>)
1a0008c0:	440a      	add	r2, r1
1a0008c2:	7914      	ldrb	r4, [r2, #4]
1a0008c4:	4284      	cmp	r4, r0
1a0008c6:	d010      	beq.n	1a0008ea <Chip_Clock_FindBaseClock+0x42>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a0008c8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a0008cc:	004a      	lsls	r2, r1, #1
1a0008ce:	4908      	ldr	r1, [pc, #32]	@ (1a0008f0 <Chip_Clock_FindBaseClock+0x48>)
1a0008d0:	5a8a      	ldrh	r2, [r1, r2]
1a0008d2:	42aa      	cmp	r2, r5
1a0008d4:	d8ed      	bhi.n	1a0008b2 <Chip_Clock_FindBaseClock+0xa>
1a0008d6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a0008da:	0051      	lsls	r1, r2, #1
1a0008dc:	4a04      	ldr	r2, [pc, #16]	@ (1a0008f0 <Chip_Clock_FindBaseClock+0x48>)
1a0008de:	440a      	add	r2, r1
1a0008e0:	8852      	ldrh	r2, [r2, #2]
1a0008e2:	42aa      	cmp	r2, r5
1a0008e4:	d3e5      	bcc.n	1a0008b2 <Chip_Clock_FindBaseClock+0xa>
           baseclk = periph_to_base[i].clkbase;
1a0008e6:	4620      	mov	r0, r4
1a0008e8:	e7e4      	b.n	1a0008b4 <Chip_Clock_FindBaseClock+0xc>
       }
   }

   return baseclk;
}
1a0008ea:	bc30      	pop	{r4, r5}
1a0008ec:	4770      	bx	lr
1a0008ee:	bf00      	nop
1a0008f0:	1a003868 	.word	0x1a003868

1a0008f4 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0008f4:	b082      	sub	sp, #8
   volatile uint32_t delay = 1000;
1a0008f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
1a0008fa:	9301      	str	r3, [sp, #4]

   uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0008fc:	4a0d      	ldr	r2, [pc, #52]	@ (1a000934 <Chip_Clock_EnableCrystal+0x40>)
1a0008fe:	6993      	ldr	r3, [r2, #24]

   /* Clear bypass mode */
   OldCrystalConfig &= (~2);
1a000900:	f023 0102 	bic.w	r1, r3, #2
   if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000904:	6992      	ldr	r2, [r2, #24]
1a000906:	428a      	cmp	r2, r1
1a000908:	d001      	beq.n	1a00090e <Chip_Clock_EnableCrystal+0x1a>
       LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a00090a:	4a0a      	ldr	r2, [pc, #40]	@ (1a000934 <Chip_Clock_EnableCrystal+0x40>)
1a00090c:	6191      	str	r1, [r2, #24]
   }

   /* Enable crystal oscillator */
   OldCrystalConfig &= (~1);
1a00090e:	f023 0303 	bic.w	r3, r3, #3
   if (OscRateIn >= 20000000) {
1a000912:	4a09      	ldr	r2, [pc, #36]	@ (1a000938 <Chip_Clock_EnableCrystal+0x44>)
1a000914:	6811      	ldr	r1, [r2, #0]
1a000916:	4a09      	ldr	r2, [pc, #36]	@ (1a00093c <Chip_Clock_EnableCrystal+0x48>)
1a000918:	4291      	cmp	r1, r2
1a00091a:	d901      	bls.n	1a000920 <Chip_Clock_EnableCrystal+0x2c>
       OldCrystalConfig |= 4;  /* Set high frequency mode */
1a00091c:	f043 0304 	orr.w	r3, r3, #4

   }
   LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000920:	4a04      	ldr	r2, [pc, #16]	@ (1a000934 <Chip_Clock_EnableCrystal+0x40>)
1a000922:	6193      	str	r3, [r2, #24]

   /* Delay for 250uSec */
   while(delay--) {}
1a000924:	9b01      	ldr	r3, [sp, #4]
1a000926:	1e5a      	subs	r2, r3, #1
1a000928:	9201      	str	r2, [sp, #4]
1a00092a:	2b00      	cmp	r3, #0
1a00092c:	d1fa      	bne.n	1a000924 <Chip_Clock_EnableCrystal+0x30>
}
1a00092e:	b002      	add	sp, #8
1a000930:	4770      	bx	lr
1a000932:	bf00      	nop
1a000934:	40050000 	.word	0x40050000
1a000938:	1a003938 	.word	0x1a003938
1a00093c:	01312cff 	.word	0x01312cff

1a000940 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000940:	3012      	adds	r0, #18
1a000942:	4b05      	ldr	r3, [pc, #20]	@ (1a000958 <Chip_Clock_GetDividerSource+0x18>)
1a000944:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

   if (reg & 1) {  /* divider is powered down */
1a000948:	f010 0f01 	tst.w	r0, #1
1a00094c:	d102      	bne.n	1a000954 <Chip_Clock_GetDividerSource+0x14>
       return CLKINPUT_PD;
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00094e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000952:	4770      	bx	lr
       return CLKINPUT_PD;
1a000954:	2011      	movs	r0, #17
}
1a000956:	4770      	bx	lr
1a000958:	40050000 	.word	0x40050000

1a00095c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
   return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a00095c:	f100 0212 	add.w	r2, r0, #18
1a000960:	4b03      	ldr	r3, [pc, #12]	@ (1a000970 <Chip_Clock_GetDividerDivisor+0x14>)
1a000962:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000966:	4b03      	ldr	r3, [pc, #12]	@ (1a000974 <Chip_Clock_GetDividerDivisor+0x18>)
1a000968:	5c18      	ldrb	r0, [r3, r0]
}
1a00096a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00096e:	4770      	bx	lr
1a000970:	40050000 	.word	0x40050000
1a000974:	1a003800 	.word	0x1a003800

1a000978 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000978:	b508      	push	{r3, lr}
   uint32_t rate = 0;

   switch (input) {
1a00097a:	2810      	cmp	r0, #16
1a00097c:	d80a      	bhi.n	1a000994 <Chip_Clock_GetClockInputHz+0x1c>
1a00097e:	e8df f000 	tbb	[pc, r0]
1a000982:	0b44      	.short	0x0b44
1a000984:	0921180d 	.word	0x0921180d
1a000988:	2d2a2724 	.word	0x2d2a2724
1a00098c:	34300909 	.word	0x34300909
1a000990:	3c38      	.short	0x3c38
1a000992:	40          	.byte	0x40
1a000993:	00          	.byte	0x00
   uint32_t rate = 0;
1a000994:	2000      	movs	r0, #0
1a000996:	e03a      	b.n	1a000a0e <Chip_Clock_GetClockInputHz+0x96>
   case CLKIN_32K:
       rate = CRYSTAL_32K_FREQ_IN;
       break;

   case CLKIN_IRC:
       rate = CGU_IRC_FREQ;
1a000998:	481e      	ldr	r0, [pc, #120]	@ (1a000a14 <Chip_Clock_GetClockInputHz+0x9c>)
       break;
1a00099a:	e038      	b.n	1a000a0e <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_ENET_RX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00099c:	4b1e      	ldr	r3, [pc, #120]	@ (1a000a18 <Chip_Clock_GetClockInputHz+0xa0>)
1a00099e:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
1a0009a2:	f003 0307 	and.w	r3, r3, #7
1a0009a6:	2b04      	cmp	r3, #4
1a0009a8:	d001      	beq.n	1a0009ae <Chip_Clock_GetClockInputHz+0x36>
           /* MII mode requires 25MHz clock */
           rate = 25000000;
1a0009aa:	481c      	ldr	r0, [pc, #112]	@ (1a000a1c <Chip_Clock_GetClockInputHz+0xa4>)
1a0009ac:	e02f      	b.n	1a000a0e <Chip_Clock_GetClockInputHz+0x96>
   uint32_t rate = 0;
1a0009ae:	2000      	movs	r0, #0
1a0009b0:	e02d      	b.n	1a000a0e <Chip_Clock_GetClockInputHz+0x96>
       }
       break;

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a0009b2:	4b19      	ldr	r3, [pc, #100]	@ (1a000a18 <Chip_Clock_GetClockInputHz+0xa0>)
1a0009b4:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
1a0009b8:	f003 0307 	and.w	r3, r3, #7
1a0009bc:	2b04      	cmp	r3, #4
1a0009be:	d027      	beq.n	1a000a10 <Chip_Clock_GetClockInputHz+0x98>
           rate = 25000000; /* MII uses 25 MHz */
1a0009c0:	4816      	ldr	r0, [pc, #88]	@ (1a000a1c <Chip_Clock_GetClockInputHz+0xa4>)
1a0009c2:	e024      	b.n	1a000a0e <Chip_Clock_GetClockInputHz+0x96>
           rate = 50000000; /* RMII uses 50 MHz */
       }
       break;

   case CLKIN_CLKIN:
       rate = ExtRateIn;
1a0009c4:	4b16      	ldr	r3, [pc, #88]	@ (1a000a20 <Chip_Clock_GetClockInputHz+0xa8>)
1a0009c6:	6818      	ldr	r0, [r3, #0]
       break;
1a0009c8:	e021      	b.n	1a000a0e <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_CRYSTAL:
       rate = OscRateIn;
1a0009ca:	4b16      	ldr	r3, [pc, #88]	@ (1a000a24 <Chip_Clock_GetClockInputHz+0xac>)
1a0009cc:	6818      	ldr	r0, [r3, #0]
       break;
1a0009ce:	e01e      	b.n	1a000a0e <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_USBPLL:
       rate = audio_usb_pll_freq[CGU_USB_PLL];
1a0009d0:	4b15      	ldr	r3, [pc, #84]	@ (1a000a28 <Chip_Clock_GetClockInputHz+0xb0>)
1a0009d2:	6818      	ldr	r0, [r3, #0]
       break;
1a0009d4:	e01b      	b.n	1a000a0e <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_AUDIOPLL:
       rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a0009d6:	4b14      	ldr	r3, [pc, #80]	@ (1a000a28 <Chip_Clock_GetClockInputHz+0xb0>)
1a0009d8:	6858      	ldr	r0, [r3, #4]
       break;
1a0009da:	e018      	b.n	1a000a0e <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_MAINPLL:
       rate = Chip_Clock_GetMainPLLHz();
1a0009dc:	f000 f868 	bl	1a000ab0 <Chip_Clock_GetMainPLLHz>
       break;
1a0009e0:	e015      	b.n	1a000a0e <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVA:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a0009e2:	2100      	movs	r1, #0
1a0009e4:	f000 f89a 	bl	1a000b1c <Chip_Clock_GetDivRate>
       break;
1a0009e8:	e011      	b.n	1a000a0e <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVB:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a0009ea:	2101      	movs	r1, #1
1a0009ec:	f000 f896 	bl	1a000b1c <Chip_Clock_GetDivRate>
       break;
1a0009f0:	e00d      	b.n	1a000a0e <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVC:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a0009f2:	2102      	movs	r1, #2
1a0009f4:	f000 f892 	bl	1a000b1c <Chip_Clock_GetDivRate>
       break;
1a0009f8:	e009      	b.n	1a000a0e <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVD:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0009fa:	2103      	movs	r1, #3
1a0009fc:	f000 f88e 	bl	1a000b1c <Chip_Clock_GetDivRate>
       break;
1a000a00:	e005      	b.n	1a000a0e <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVE:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000a02:	2104      	movs	r1, #4
1a000a04:	f000 f88a 	bl	1a000b1c <Chip_Clock_GetDivRate>
       break;
1a000a08:	e001      	b.n	1a000a0e <Chip_Clock_GetClockInputHz+0x96>
       rate = CRYSTAL_32K_FREQ_IN;
1a000a0a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
   default:
       break;
   }

   return rate;
}
1a000a0e:	bd08      	pop	{r3, pc}
           rate = 50000000; /* RMII uses 50 MHz */
1a000a10:	4806      	ldr	r0, [pc, #24]	@ (1a000a2c <Chip_Clock_GetClockInputHz+0xb4>)
   return rate;
1a000a12:	e7fc      	b.n	1a000a0e <Chip_Clock_GetClockInputHz+0x96>
1a000a14:	00b71b00 	.word	0x00b71b00
1a000a18:	40043000 	.word	0x40043000
1a000a1c:	017d7840 	.word	0x017d7840
1a000a20:	1a00393c 	.word	0x1a00393c
1a000a24:	1a003938 	.word	0x1a003938
1a000a28:	100000b0 	.word	0x100000b0
1a000a2c:	02faf080 	.word	0x02faf080

1a000a30 <Chip_Clock_CalcMainPLLValue>:
{
1a000a30:	b538      	push	{r3, r4, r5, lr}
1a000a32:	4605      	mov	r5, r0
1a000a34:	460c      	mov	r4, r1
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000a36:	7908      	ldrb	r0, [r1, #4]
1a000a38:	f7ff ff9e 	bl	1a000978 <Chip_Clock_GetClockInputHz>
1a000a3c:	6160      	str	r0, [r4, #20]
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000a3e:	4b19      	ldr	r3, [pc, #100]	@ (1a000aa4 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000a40:	442b      	add	r3, r5
1a000a42:	4a19      	ldr	r2, [pc, #100]	@ (1a000aa8 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000a44:	4293      	cmp	r3, r2
1a000a46:	d821      	bhi.n	1a000a8c <Chip_Clock_CalcMainPLLValue+0x5c>
1a000a48:	b318      	cbz	r0, 1a000a92 <Chip_Clock_CalcMainPLLValue+0x62>
   ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000a4a:	2380      	movs	r3, #128	@ 0x80
1a000a4c:	6023      	str	r3, [r4, #0]
   ppll->nsel = 0;
1a000a4e:	2300      	movs	r3, #0
1a000a50:	60a3      	str	r3, [r4, #8]
   ppll->psel = 0;
1a000a52:	60e3      	str	r3, [r4, #12]
   ppll->msel = freq / ppll->fin;
1a000a54:	fbb5 f3f0 	udiv	r3, r5, r0
1a000a58:	6123      	str	r3, [r4, #16]
   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000a5a:	4a14      	ldr	r2, [pc, #80]	@ (1a000aac <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000a5c:	4295      	cmp	r5, r2
1a000a5e:	d903      	bls.n	1a000a68 <Chip_Clock_CalcMainPLLValue+0x38>
1a000a60:	fb03 f000 	mul.w	r0, r3, r0
1a000a64:	42a8      	cmp	r0, r5
1a000a66:	d007      	beq.n	1a000a78 <Chip_Clock_CalcMainPLLValue+0x48>
       pll_get_frac(freq, ppll);
1a000a68:	4621      	mov	r1, r4
1a000a6a:	4628      	mov	r0, r5
1a000a6c:	f7ff fe9c 	bl	1a0007a8 <pll_get_frac>
       if (!ppll->nsel) {
1a000a70:	68a3      	ldr	r3, [r4, #8]
1a000a72:	b18b      	cbz	r3, 1a000a98 <Chip_Clock_CalcMainPLLValue+0x68>
       ppll->nsel --;
1a000a74:	3b01      	subs	r3, #1
1a000a76:	60a3      	str	r3, [r4, #8]
   if (ppll->msel == 0) {
1a000a78:	6923      	ldr	r3, [r4, #16]
1a000a7a:	b183      	cbz	r3, 1a000a9e <Chip_Clock_CalcMainPLLValue+0x6e>
   if (ppll->psel) {
1a000a7c:	68e2      	ldr	r2, [r4, #12]
1a000a7e:	b10a      	cbz	r2, 1a000a84 <Chip_Clock_CalcMainPLLValue+0x54>
       ppll->psel --;
1a000a80:	3a01      	subs	r2, #1
1a000a82:	60e2      	str	r2, [r4, #12]
   ppll->msel --;
1a000a84:	3b01      	subs	r3, #1
1a000a86:	6123      	str	r3, [r4, #16]
   return 0;
1a000a88:	2000      	movs	r0, #0
}
1a000a8a:	bd38      	pop	{r3, r4, r5, pc}
       return -1;
1a000a8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a000a90:	e7fb      	b.n	1a000a8a <Chip_Clock_CalcMainPLLValue+0x5a>
1a000a92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a000a96:	e7f8      	b.n	1a000a8a <Chip_Clock_CalcMainPLLValue+0x5a>
           return -1;
1a000a98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a000a9c:	e7f5      	b.n	1a000a8a <Chip_Clock_CalcMainPLLValue+0x5a>
       return - 1;
1a000a9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a000aa2:	e7f2      	b.n	1a000a8a <Chip_Clock_CalcMainPLLValue+0x5a>
1a000aa4:	ff6b3a10 	.word	0xff6b3a10
1a000aa8:	0b940510 	.word	0x0b940510
1a000aac:	094c5eff 	.word	0x094c5eff

1a000ab0 <Chip_Clock_GetMainPLLHz>:
{
1a000ab0:	b530      	push	{r4, r5, lr}
1a000ab2:	b083      	sub	sp, #12
   uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000ab4:	4d17      	ldr	r5, [pc, #92]	@ (1a000b14 <Chip_Clock_GetMainPLLHz+0x64>)
1a000ab6:	6c6c      	ldr	r4, [r5, #68]	@ 0x44
   uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000ab8:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000abc:	f7ff ff5c 	bl	1a000978 <Chip_Clock_GetClockInputHz>
   const uint8_t ptab[] = {1, 2, 4, 8};
1a000ac0:	4b15      	ldr	r3, [pc, #84]	@ (1a000b18 <Chip_Clock_GetMainPLLHz+0x68>)
1a000ac2:	681b      	ldr	r3, [r3, #0]
1a000ac4:	9301      	str	r3, [sp, #4]
   if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000ac6:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
1a000ac8:	f013 0f01 	tst.w	r3, #1
1a000acc:	d020      	beq.n	1a000b10 <Chip_Clock_GetMainPLLHz+0x60>
   msel = (PLLReg >> 16) & 0xFF;
1a000ace:	f3c4 4307 	ubfx	r3, r4, #16, #8
   nsel = (PLLReg >> 12) & 0x3;
1a000ad2:	f3c4 3201 	ubfx	r2, r4, #12, #2
   psel = (PLLReg >> 8) & 0x3;
1a000ad6:	f3c4 2101 	ubfx	r1, r4, #8, #2
   fbsel = (PLLReg >> 6) & 0x1;
1a000ada:	f3c4 1580 	ubfx	r5, r4, #6, #1
   m = msel + 1;
1a000ade:	3301      	adds	r3, #1
   n = nsel + 1;
1a000ae0:	3201      	adds	r2, #1
   p = ptab[psel];
1a000ae2:	f10d 0c08 	add.w	ip, sp, #8
1a000ae6:	4461      	add	r1, ip
1a000ae8:	f811 1c04 	ldrb.w	r1, [r1, #-4]
   if (direct || fbsel) {
1a000aec:	f014 0f80 	tst.w	r4, #128	@ 0x80
1a000af0:	d108      	bne.n	1a000b04 <Chip_Clock_GetMainPLLHz+0x54>
1a000af2:	b93d      	cbnz	r5, 1a000b04 <Chip_Clock_GetMainPLLHz+0x54>
   return (m / (2 * p)) * (freq / n);
1a000af4:	0049      	lsls	r1, r1, #1
1a000af6:	fbb3 f3f1 	udiv	r3, r3, r1
1a000afa:	fbb0 f0f2 	udiv	r0, r0, r2
1a000afe:	fb00 f003 	mul.w	r0, r0, r3
1a000b02:	e003      	b.n	1a000b0c <Chip_Clock_GetMainPLLHz+0x5c>
       return m * (freq / n);
1a000b04:	fbb0 f0f2 	udiv	r0, r0, r2
1a000b08:	fb03 f000 	mul.w	r0, r3, r0
}
1a000b0c:	b003      	add	sp, #12
1a000b0e:	bd30      	pop	{r4, r5, pc}
       return 0;
1a000b10:	2000      	movs	r0, #0
1a000b12:	e7fb      	b.n	1a000b0c <Chip_Clock_GetMainPLLHz+0x5c>
1a000b14:	40050000 	.word	0x40050000
1a000b18:	1a003864 	.word	0x1a003864

1a000b1c <Chip_Clock_GetDivRate>:
{
1a000b1c:	b538      	push	{r3, r4, r5, lr}
1a000b1e:	460c      	mov	r4, r1
   input = Chip_Clock_GetDividerSource(divider);
1a000b20:	4608      	mov	r0, r1
1a000b22:	f7ff ff0d 	bl	1a000940 <Chip_Clock_GetDividerSource>
1a000b26:	4605      	mov	r5, r0
   div = Chip_Clock_GetDividerDivisor(divider);
1a000b28:	4620      	mov	r0, r4
1a000b2a:	f7ff ff17 	bl	1a00095c <Chip_Clock_GetDividerDivisor>
1a000b2e:	4604      	mov	r4, r0
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000b30:	4628      	mov	r0, r5
1a000b32:	f7ff ff21 	bl	1a000978 <Chip_Clock_GetClockInputHz>
1a000b36:	3401      	adds	r4, #1
}
1a000b38:	fbb0 f0f4 	udiv	r0, r0, r4
1a000b3c:	bd38      	pop	{r3, r4, r5, pc}
	...

1a000b40 <Chip_Clock_SetBaseClock>:
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000b40:	b430      	push	{r4, r5}
   uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000b42:	f100 0416 	add.w	r4, r0, #22
1a000b46:	00a4      	lsls	r4, r4, #2
1a000b48:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
1a000b4c:	f504 24a0 	add.w	r4, r4, #327680	@ 0x50000
1a000b50:	6864      	ldr	r4, [r4, #4]

   if (BaseClock < CLK_BASE_NONE) {
1a000b52:	281b      	cmp	r0, #27
1a000b54:	d813      	bhi.n	1a000b7e <Chip_Clock_SetBaseClock+0x3e>
       if (Input != CLKINPUT_PD) {
1a000b56:	2911      	cmp	r1, #17
1a000b58:	d01a      	beq.n	1a000b90 <Chip_Clock_SetBaseClock+0x50>
           /* Mask off fields we plan to update */
           reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000b5a:	4d0e      	ldr	r5, [pc, #56]	@ (1a000b94 <Chip_Clock_SetBaseClock+0x54>)
1a000b5c:	4025      	ands	r5, r4

           if (autoblocken) {
1a000b5e:	b10a      	cbz	r2, 1a000b64 <Chip_Clock_SetBaseClock+0x24>
               reg |= (1 << 11);
1a000b60:	f445 6500 	orr.w	r5, r5, #2048	@ 0x800
           }
           if (powerdn) {
1a000b64:	b10b      	cbz	r3, 1a000b6a <Chip_Clock_SetBaseClock+0x2a>
               reg |= (1 << 0);
1a000b66:	f045 0501 	orr.w	r5, r5, #1
           }

           /* Set clock source */
           reg |= (Input << 24);
1a000b6a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

           LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000b6e:	3016      	adds	r0, #22
1a000b70:	0080      	lsls	r0, r0, #2
1a000b72:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
1a000b76:	f500 20a0 	add.w	r0, r0, #327680	@ 0x50000
1a000b7a:	6045      	str	r5, [r0, #4]
1a000b7c:	e008      	b.n	1a000b90 <Chip_Clock_SetBaseClock+0x50>
       }
   }
   else {
       LPC_CGU->BASE_CLK[BaseClock] = reg | 1; /* Power down this base clock */
1a000b7e:	f044 0401 	orr.w	r4, r4, #1
1a000b82:	3016      	adds	r0, #22
1a000b84:	0080      	lsls	r0, r0, #2
1a000b86:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
1a000b8a:	f500 20a0 	add.w	r0, r0, #327680	@ 0x50000
1a000b8e:	6044      	str	r4, [r0, #4]
   }
}
1a000b90:	bc30      	pop	{r4, r5}
1a000b92:	4770      	bx	lr
1a000b94:	e0fff7fe 	.word	0xe0fff7fe

1a000b98 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
1a000b98:	281b      	cmp	r0, #27
1a000b9a:	d80c      	bhi.n	1a000bb6 <Chip_Clock_GetBaseClock+0x1e>
       return CLKINPUT_PD;
   }

   reg = LPC_CGU->BASE_CLK[BaseClock];
1a000b9c:	3016      	adds	r0, #22
1a000b9e:	0080      	lsls	r0, r0, #2
1a000ba0:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
1a000ba4:	f500 20a0 	add.w	r0, r0, #327680	@ 0x50000
1a000ba8:	6840      	ldr	r0, [r0, #4]

   /* base clock is powered down? */
   if (reg & 1) {
1a000baa:	f010 0f01 	tst.w	r0, #1
1a000bae:	d104      	bne.n	1a000bba <Chip_Clock_GetBaseClock+0x22>
       return CLKINPUT_PD;
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000bb0:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000bb4:	4770      	bx	lr
       return CLKINPUT_PD;
1a000bb6:	2011      	movs	r0, #17
1a000bb8:	4770      	bx	lr
       return CLKINPUT_PD;
1a000bba:	2011      	movs	r0, #17
}
1a000bbc:	4770      	bx	lr

1a000bbe <Chip_Clock_GetBaseClocktHz>:
{
1a000bbe:	b508      	push	{r3, lr}
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000bc0:	f7ff ffea 	bl	1a000b98 <Chip_Clock_GetBaseClock>
1a000bc4:	f7ff fed8 	bl	1a000978 <Chip_Clock_GetClockInputHz>
}
1a000bc8:	bd08      	pop	{r3, pc}
	...

1a000bcc <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
   uint32_t reg = 1;

   if (autoen) {
1a000bcc:	b971      	cbnz	r1, 1a000bec <Chip_Clock_EnableOpts+0x20>
   uint32_t reg = 1;
1a000bce:	2101      	movs	r1, #1
       reg |= (1 << 1);
   }
   if (wakeupen) {
1a000bd0:	b10a      	cbz	r2, 1a000bd6 <Chip_Clock_EnableOpts+0xa>
       reg |= (1 << 2);
1a000bd2:	f041 0104 	orr.w	r1, r1, #4
   }

   /* Not all clocks support a divider, but we won't check that here. Only
      dividers of 1 and 2 are allowed. Assume 1 if not 2 */
   if (div == 2) {
1a000bd6:	2b02      	cmp	r3, #2
1a000bd8:	d00a      	beq.n	1a000bf0 <Chip_Clock_EnableOpts+0x24>
       reg |= (1 << 5);
   }

   /* Setup peripheral clock and start running */
   if (clk >= CLK_CCU2_START) {
1a000bda:	f5b0 7fa1 	cmp.w	r0, #322	@ 0x142
1a000bde:	d30a      	bcc.n	1a000bf6 <Chip_Clock_EnableOpts+0x2a>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000be0:	f5a0 7091 	sub.w	r0, r0, #290	@ 0x122
1a000be4:	4b06      	ldr	r3, [pc, #24]	@ (1a000c00 <Chip_Clock_EnableOpts+0x34>)
1a000be6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000bea:	4770      	bx	lr
       reg |= (1 << 1);
1a000bec:	2103      	movs	r1, #3
1a000bee:	e7ef      	b.n	1a000bd0 <Chip_Clock_EnableOpts+0x4>
       reg |= (1 << 5);
1a000bf0:	f041 0120 	orr.w	r1, r1, #32
1a000bf4:	e7f1      	b.n	1a000bda <Chip_Clock_EnableOpts+0xe>
   }
   else {
       LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000bf6:	3020      	adds	r0, #32
1a000bf8:	4b02      	ldr	r3, [pc, #8]	@ (1a000c04 <Chip_Clock_EnableOpts+0x38>)
1a000bfa:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
   }
}
1a000bfe:	4770      	bx	lr
1a000c00:	40052000 	.word	0x40052000
1a000c04:	40051000 	.word	0x40051000

1a000c08 <Chip_Clock_GetRate>:
   LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000c08:	b510      	push	{r4, lr}
   CHIP_CGU_BASE_CLK_T baseclk;
   uint32_t reg, div, rate;

   /* Get CCU config register for clock */
   if (clk >= CLK_CCU2_START) {
1a000c0a:	f5b0 7fa1 	cmp.w	r0, #322	@ 0x142
1a000c0e:	d309      	bcc.n	1a000c24 <Chip_Clock_GetRate+0x1c>
       reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000c10:	f5a0 7391 	sub.w	r3, r0, #290	@ 0x122
1a000c14:	4a0d      	ldr	r2, [pc, #52]	@ (1a000c4c <Chip_Clock_GetRate+0x44>)
1a000c16:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   else {
       reg = LPC_CCU1->CLKCCU[clk].CFG;
   }

   /* Is the clock enabled? */
   if (reg & 1) {
1a000c1a:	f014 0f01 	tst.w	r4, #1
1a000c1e:	d107      	bne.n	1a000c30 <Chip_Clock_GetRate+0x28>

       }
       rate = rate / div;
   }
   else {
       rate = 0;
1a000c20:	2000      	movs	r0, #0
   }

   return rate;
}
1a000c22:	bd10      	pop	{r4, pc}
       reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000c24:	f100 0320 	add.w	r3, r0, #32
1a000c28:	4a09      	ldr	r2, [pc, #36]	@ (1a000c50 <Chip_Clock_GetRate+0x48>)
1a000c2a:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a000c2e:	e7f4      	b.n	1a000c1a <Chip_Clock_GetRate+0x12>
       baseclk = Chip_Clock_FindBaseClock(clk);
1a000c30:	f7ff fe3a 	bl	1a0008a8 <Chip_Clock_FindBaseClock>
       rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000c34:	f7ff ffc3 	bl	1a000bbe <Chip_Clock_GetBaseClocktHz>
       if (((reg >> 5) & 0x7) == 0) {
1a000c38:	f014 0fe0 	tst.w	r4, #224	@ 0xe0
1a000c3c:	d103      	bne.n	1a000c46 <Chip_Clock_GetRate+0x3e>
           div = 1;
1a000c3e:	2301      	movs	r3, #1
       rate = rate / div;
1a000c40:	fbb0 f0f3 	udiv	r0, r0, r3
1a000c44:	e7ed      	b.n	1a000c22 <Chip_Clock_GetRate+0x1a>
           div = 2;/* No other dividers supported */
1a000c46:	2302      	movs	r3, #2
1a000c48:	e7fa      	b.n	1a000c40 <Chip_Clock_GetRate+0x38>
1a000c4a:	bf00      	nop
1a000c4c:	40052000 	.word	0x40052000
1a000c50:	40051000 	.word	0x40051000

1a000c54 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a000c54:	b084      	sub	sp, #16
   volatile uint32_t Cpacr;
   volatile uint32_t Mvfr0;
   volatile uint32_t Mvfr1;
   char vfpPresent = 0;

   Mvfr0 = *regMvfr0;
1a000c56:	4b0f      	ldr	r3, [pc, #60]	@ (1a000c94 <fpuInit+0x40>)
1a000c58:	681b      	ldr	r3, [r3, #0]
1a000c5a:	9302      	str	r3, [sp, #8]
   Mvfr1 = *regMvfr1;
1a000c5c:	4b0e      	ldr	r3, [pc, #56]	@ (1a000c98 <fpuInit+0x44>)
1a000c5e:	681b      	ldr	r3, [r3, #0]
1a000c60:	9301      	str	r3, [sp, #4]

   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000c62:	9a02      	ldr	r2, [sp, #8]
1a000c64:	4b0d      	ldr	r3, [pc, #52]	@ (1a000c9c <fpuInit+0x48>)
1a000c66:	429a      	cmp	r2, r3
1a000c68:	d00c      	beq.n	1a000c84 <fpuInit+0x30>
1a000c6a:	2300      	movs	r3, #0

   if (vfpPresent) {
1a000c6c:	b143      	cbz	r3, 1a000c80 <fpuInit+0x2c>
       Cpacr = *regCpacr;
1a000c6e:	4a0c      	ldr	r2, [pc, #48]	@ (1a000ca0 <fpuInit+0x4c>)
1a000c70:	6813      	ldr	r3, [r2, #0]
1a000c72:	9303      	str	r3, [sp, #12]
       Cpacr |= (0xF << 20);
1a000c74:	9b03      	ldr	r3, [sp, #12]
1a000c76:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
1a000c7a:	9303      	str	r3, [sp, #12]
       *regCpacr = Cpacr;  // enable CP10 and CP11 for full access
1a000c7c:	9b03      	ldr	r3, [sp, #12]
1a000c7e:	6013      	str	r3, [r2, #0]
   }
#endif /* __FPU_PRESENT != 0 */
}
1a000c80:	b004      	add	sp, #16
1a000c82:	4770      	bx	lr
   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000c84:	9a01      	ldr	r2, [sp, #4]
1a000c86:	4b07      	ldr	r3, [pc, #28]	@ (1a000ca4 <fpuInit+0x50>)
1a000c88:	429a      	cmp	r2, r3
1a000c8a:	d001      	beq.n	1a000c90 <fpuInit+0x3c>
1a000c8c:	2300      	movs	r3, #0
1a000c8e:	e7ed      	b.n	1a000c6c <fpuInit+0x18>
1a000c90:	2301      	movs	r3, #1
1a000c92:	e7eb      	b.n	1a000c6c <fpuInit+0x18>
1a000c94:	e000ef40 	.word	0xe000ef40
1a000c98:	e000ef44 	.word	0xe000ef44
1a000c9c:	10110021 	.word	0x10110021
1a000ca0:	e000ed88 	.word	0xe000ed88
1a000ca4:	11000011 	.word	0x11000011

1a000ca8 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000ca8:	4770      	bx	lr
	...

1a000cac <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000cac:	b570      	push	{r4, r5, r6, lr}
1a000cae:	b092      	sub	sp, #72	@ 0x48
1a000cb0:	4605      	mov	r5, r0
1a000cb2:	460e      	mov	r6, r1
1a000cb4:	4614      	mov	r4, r2
   int i;
   volatile uint32_t delay = 5500;
1a000cb6:	f241 537c 	movw	r3, #5500	@ 0x157c
1a000cba:	9311      	str	r3, [sp, #68]	@ 0x44
   uint32_t direct = 0;
   PLL_PARAM_T ppll;

   if (clkin == CLKIN_CRYSTAL) {
1a000cbc:	2806      	cmp	r0, #6
1a000cbe:	d044      	beq.n	1a000d4a <Chip_SetupCoreClock+0x9e>
       /* Switch main system clocking to crystal */
       Chip_Clock_EnableCrystal();
   }
   Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000cc0:	2300      	movs	r3, #0
1a000cc2:	2201      	movs	r2, #1
1a000cc4:	4629      	mov	r1, r5
1a000cc6:	2004      	movs	r0, #4
1a000cc8:	f7ff ff3a 	bl	1a000b40 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
   /* power down main PLL */
   LPC_CGU->PLL1_CTRL |= 1;
1a000ccc:	4a4a      	ldr	r2, [pc, #296]	@ (1a000df8 <Chip_SetupCoreClock+0x14c>)
1a000cce:	6c53      	ldr	r3, [r2, #68]	@ 0x44
1a000cd0:	f043 0301 	orr.w	r3, r3, #1
1a000cd4:	6453      	str	r3, [r2, #68]	@ 0x44
   Chip_Clock_DisableMainPLL(); /* Disable PLL */

   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
1a000cd6:	f88d 5028 	strb.w	r5, [sp, #40]	@ 0x28
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000cda:	a909      	add	r1, sp, #36	@ 0x24
1a000cdc:	4630      	mov	r0, r6
1a000cde:	f7ff fea7 	bl	1a000a30 <Chip_Clock_CalcMainPLLValue>

   if (core_freq > 110000000UL) {
1a000ce2:	4b46      	ldr	r3, [pc, #280]	@ (1a000dfc <Chip_SetupCoreClock+0x150>)
1a000ce4:	429e      	cmp	r6, r3
1a000ce6:	d938      	bls.n	1a000d5a <Chip_SetupCoreClock+0xae>
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1a000cea:	f013 0f80 	tst.w	r3, #128	@ 0x80
1a000cee:	d001      	beq.n	1a000cf4 <Chip_SetupCoreClock+0x48>
1a000cf0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1a000cf2:	b36a      	cbz	r2, 1a000d50 <Chip_SetupCoreClock+0xa4>
           PLL_PARAM_T lpll;
           /* Calculate the PLL Parameters */
           lpll.srcin = clkin;
1a000cf4:	f88d 5008 	strb.w	r5, [sp, #8]
           Chip_Clock_CalcMainPLLValue(110000000UL, &lpll);
1a000cf8:	a901      	add	r1, sp, #4
1a000cfa:	4840      	ldr	r0, [pc, #256]	@ (1a000dfc <Chip_SetupCoreClock+0x150>)
1a000cfc:	f7ff fe98 	bl	1a000a30 <Chip_Clock_CalcMainPLLValue>
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000d00:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000d04:	9b01      	ldr	r3, [sp, #4]
1a000d06:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000d0a:	9a05      	ldr	r2, [sp, #20]
1a000d0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000d10:	9a03      	ldr	r2, [sp, #12]
1a000d12:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000d16:	9a04      	ldr	r2, [sp, #16]
1a000d18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000d1c:	4a36      	ldr	r2, [pc, #216]	@ (1a000df8 <Chip_SetupCoreClock+0x14c>)
1a000d1e:	6453      	str	r3, [r2, #68]	@ 0x44
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000d20:	4b35      	ldr	r3, [pc, #212]	@ (1a000df8 <Chip_SetupCoreClock+0x14c>)
1a000d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
           Chip_Clock_SetupMainPLL(&lpll);
           /* Wait for the PLL to lock */
           while(!Chip_Clock_MainPLLLocked()) {}
1a000d24:	f013 0f01 	tst.w	r3, #1
1a000d28:	d0fa      	beq.n	1a000d20 <Chip_SetupCoreClock+0x74>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000d2a:	2300      	movs	r3, #0
1a000d2c:	2201      	movs	r2, #1
1a000d2e:	2109      	movs	r1, #9
1a000d30:	2004      	movs	r0, #4
1a000d32:	f7ff ff05 	bl	1a000b40 <Chip_Clock_SetBaseClock>
           while(delay --){}
1a000d36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1a000d38:	1e5a      	subs	r2, r3, #1
1a000d3a:	9211      	str	r2, [sp, #68]	@ 0x44
1a000d3c:	2b00      	cmp	r3, #0
1a000d3e:	d1fa      	bne.n	1a000d36 <Chip_SetupCoreClock+0x8a>
           delay = 5500;
1a000d40:	f241 537c 	movw	r3, #5500	@ 0x157c
1a000d44:	9311      	str	r3, [sp, #68]	@ 0x44
   uint32_t direct = 0;
1a000d46:	2500      	movs	r5, #0
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000d48:	e008      	b.n	1a000d5c <Chip_SetupCoreClock+0xb0>
       Chip_Clock_EnableCrystal();
1a000d4a:	f7ff fdd3 	bl	1a0008f4 <Chip_Clock_EnableCrystal>
1a000d4e:	e7b7      	b.n	1a000cc0 <Chip_SetupCoreClock+0x14>
       } else {
           direct = 1;
           ppll.ctrl &= ~(1 << 7);
1a000d50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
1a000d54:	9309      	str	r3, [sp, #36]	@ 0x24
           direct = 1;
1a000d56:	2501      	movs	r5, #1
1a000d58:	e000      	b.n	1a000d5c <Chip_SetupCoreClock+0xb0>
   uint32_t direct = 0;
1a000d5a:	2500      	movs	r5, #0
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000d5c:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
1a000d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1a000d62:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000d66:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1a000d68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000d6c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1a000d6e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000d72:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1a000d74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000d78:	4a1f      	ldr	r2, [pc, #124]	@ (1a000df8 <Chip_SetupCoreClock+0x14c>)
1a000d7a:	6453      	str	r3, [r2, #68]	@ 0x44
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000d7c:	4b1e      	ldr	r3, [pc, #120]	@ (1a000df8 <Chip_SetupCoreClock+0x14c>)
1a000d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40

   /* Setup and start the PLL */
   Chip_Clock_SetupMainPLL(&ppll);

   /* Wait for the PLL to lock */
   while(!Chip_Clock_MainPLLLocked()) {}
1a000d80:	f013 0f01 	tst.w	r3, #1
1a000d84:	d0fa      	beq.n	1a000d7c <Chip_SetupCoreClock+0xd0>

   /* Set core clock base as PLL1 */
   Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000d86:	2300      	movs	r3, #0
1a000d88:	2201      	movs	r2, #1
1a000d8a:	2109      	movs	r1, #9
1a000d8c:	2004      	movs	r0, #4
1a000d8e:	f7ff fed7 	bl	1a000b40 <Chip_Clock_SetBaseClock>

   while(delay --){} /* Wait for approx 50 uSec */
1a000d92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1a000d94:	1e5a      	subs	r2, r3, #1
1a000d96:	9211      	str	r2, [sp, #68]	@ 0x44
1a000d98:	2b00      	cmp	r3, #0
1a000d9a:	d1fa      	bne.n	1a000d92 <Chip_SetupCoreClock+0xe6>
   if (direct) {
1a000d9c:	b1d5      	cbz	r5, 1a000dd4 <Chip_SetupCoreClock+0x128>
       delay = 5500;
1a000d9e:	f241 537c 	movw	r3, #5500	@ 0x157c
1a000da2:	9311      	str	r3, [sp, #68]	@ 0x44
       ppll.ctrl |= 1 << 7;
1a000da4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1a000da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1a000daa:	9309      	str	r3, [sp, #36]	@ 0x24
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000dac:	f89d 2028 	ldrb.w	r2, [sp, #40]	@ 0x28
1a000db0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000db4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
1a000db6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000dba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
1a000dbc:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000dc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1a000dc2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000dc6:	4a0c      	ldr	r2, [pc, #48]	@ (1a000df8 <Chip_SetupCoreClock+0x14c>)
1a000dc8:	6453      	str	r3, [r2, #68]	@ 0x44
       Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
       while(delay --){} /* Wait for approx 50 uSec */
1a000dca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1a000dcc:	1e5a      	subs	r2, r3, #1
1a000dce:	9211      	str	r2, [sp, #68]	@ 0x44
1a000dd0:	2b00      	cmp	r3, #0
1a000dd2:	d1fa      	bne.n	1a000dca <Chip_SetupCoreClock+0x11e>
   }

   if (setbase) {
1a000dd4:	b90c      	cbnz	r4, 1a000dda <Chip_SetupCoreClock+0x12e>
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
                                   InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
       }
   }
}
1a000dd6:	b012      	add	sp, #72	@ 0x48
1a000dd8:	bd70      	pop	{r4, r5, r6, pc}
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000dda:	2400      	movs	r4, #0
1a000ddc:	2c11      	cmp	r4, #17
1a000dde:	d8fa      	bhi.n	1a000dd6 <Chip_SetupCoreClock+0x12a>
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000de0:	4807      	ldr	r0, [pc, #28]	@ (1a000e00 <Chip_SetupCoreClock+0x154>)
1a000de2:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000de6:	78cb      	ldrb	r3, [r1, #3]
1a000de8:	788a      	ldrb	r2, [r1, #2]
1a000dea:	7849      	ldrb	r1, [r1, #1]
1a000dec:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000df0:	f7ff fea6 	bl	1a000b40 <Chip_Clock_SetBaseClock>
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000df4:	3401      	adds	r4, #1
1a000df6:	e7f1      	b.n	1a000ddc <Chip_SetupCoreClock+0x130>
1a000df8:	40050000 	.word	0x40050000
1a000dfc:	068e7780 	.word	0x068e7780
1a000e00:	1a0038d4 	.word	0x1a0038d4

1a000e04 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
   uint32_t base = (uint32_t) pUART;
   switch(base) {
1a000e04:	4b09      	ldr	r3, [pc, #36]	@ (1a000e2c <Chip_UART_GetIndex+0x28>)
1a000e06:	4298      	cmp	r0, r3
1a000e08:	d009      	beq.n	1a000e1e <Chip_UART_GetIndex+0x1a>
1a000e0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1a000e0e:	4298      	cmp	r0, r3
1a000e10:	d007      	beq.n	1a000e22 <Chip_UART_GetIndex+0x1e>
1a000e12:	f5a3 2380 	sub.w	r3, r3, #262144	@ 0x40000
1a000e16:	4298      	cmp	r0, r3
1a000e18:	d005      	beq.n	1a000e26 <Chip_UART_GetIndex+0x22>
       case LPC_USART0_BASE:
           return 0;
1a000e1a:	2000      	movs	r0, #0
1a000e1c:	4770      	bx	lr
       case LPC_UART1_BASE:
           return 1;
       case LPC_USART2_BASE:
           return 2;
1a000e1e:	2002      	movs	r0, #2
1a000e20:	4770      	bx	lr
       case LPC_USART3_BASE:
           return 3;
1a000e22:	2003      	movs	r0, #3
1a000e24:	4770      	bx	lr
           return 1;
1a000e26:	2001      	movs	r0, #1
       default:
           return 0; /* Should never come here */
   }
}
1a000e28:	4770      	bx	lr
1a000e2a:	bf00      	nop
1a000e2c:	400c1000 	.word	0x400c1000

1a000e30 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000e30:	b530      	push	{r4, r5, lr}
1a000e32:	b083      	sub	sp, #12
1a000e34:	4604      	mov	r4, r0
    volatile uint32_t tmp;

   /* Enable UART clocking. UART base clock(s) must already be enabled */
   Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000e36:	f7ff ffe5 	bl	1a000e04 <Chip_UART_GetIndex>
1a000e3a:	2301      	movs	r3, #1
1a000e3c:	461a      	mov	r2, r3
1a000e3e:	4619      	mov	r1, r3
1a000e40:	4d0e      	ldr	r5, [pc, #56]	@ (1a000e7c <Chip_UART_Init+0x4c>)
1a000e42:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000e46:	f7ff fec1 	bl	1a000bcc <Chip_Clock_EnableOpts>
   pUART->FCR = fcr;
1a000e4a:	2307      	movs	r3, #7
1a000e4c:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000e4e:	2300      	movs	r3, #0
1a000e50:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
   pUART->IER = 0;
1a000e52:	6063      	str	r3, [r4, #4]
   /* Set LCR to default state */
   pUART->LCR = 0;
1a000e54:	60e3      	str	r3, [r4, #12]
   /* Set ACR to default state */
   pUART->ACR = 0;
1a000e56:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
   pUART->RS485CTRL = 0;
1a000e58:	64e3      	str	r3, [r4, #76]	@ 0x4c
   /* Set RS485 delay timer to default state */
   pUART->RS485DLY = 0;
1a000e5a:	6563      	str	r3, [r4, #84]	@ 0x54
   /* Set RS485 addr match to default state */
   pUART->RS485ADRMATCH = 0;
1a000e5c:	6523      	str	r3, [r4, #80]	@ 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000e5e:	4b08      	ldr	r3, [pc, #32]	@ (1a000e80 <Chip_UART_Init+0x50>)
1a000e60:	429c      	cmp	r4, r3
1a000e62:	d005      	beq.n	1a000e70 <Chip_UART_Init+0x40>
   pUART->LCR = config;
1a000e64:	2303      	movs	r3, #3
1a000e66:	60e3      	str	r3, [r4, #12]

   /* Default 8N1, with DLAB disabled */
   Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

   /* Disable fractional divider */
   pUART->FDR = 0x10;
1a000e68:	2310      	movs	r3, #16
1a000e6a:	62a3      	str	r3, [r4, #40]	@ 0x28
}
1a000e6c:	b003      	add	sp, #12
1a000e6e:	bd30      	pop	{r4, r5, pc}
       pUART->MCR = 0;
1a000e70:	2300      	movs	r3, #0
1a000e72:	6123      	str	r3, [r4, #16]
       tmp = pUART->MSR;
1a000e74:	69a3      	ldr	r3, [r4, #24]
1a000e76:	9301      	str	r3, [sp, #4]
1a000e78:	e7f4      	b.n	1a000e64 <Chip_UART_Init+0x34>
1a000e7a:	bf00      	nop
1a000e7c:	1a003924 	.word	0x1a003924
1a000e80:	40082000 	.word	0x40082000

1a000e84 <Chip_UART_Send>:
}

/* Transmit a byte array through the UART peripheral (non-blocking) */
int Chip_UART_Send(LPC_USART_T *pUART, const void *data, int numBytes)
{
   int sent = 0;
1a000e84:	2300      	movs	r3, #0
   uint8_t *p8 = (uint8_t *) data;

   /* Send until the transmit FIFO is full or out of bytes */
   while ((sent < numBytes) &&
1a000e86:	4293      	cmp	r3, r2
1a000e88:	da0e      	bge.n	1a000ea8 <Chip_UART_Send+0x24>
{
1a000e8a:	b410      	push	{r4}
   return pUART->LSR;
1a000e8c:	6944      	ldr	r4, [r0, #20]
   while ((sent < numBytes) &&
1a000e8e:	f014 0f20 	tst.w	r4, #32
1a000e92:	d005      	beq.n	1a000ea0 <Chip_UART_Send+0x1c>
          ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0)) {
       Chip_UART_SendByte(pUART, *p8);
1a000e94:	f811 4b01 	ldrb.w	r4, [r1], #1
   pUART->THR = (uint32_t) data;
1a000e98:	6004      	str	r4, [r0, #0]
       p8++;
       sent++;
1a000e9a:	3301      	adds	r3, #1
   while ((sent < numBytes) &&
1a000e9c:	4293      	cmp	r3, r2
1a000e9e:	dbf5      	blt.n	1a000e8c <Chip_UART_Send+0x8>
   }

   return sent;
}
1a000ea0:	4618      	mov	r0, r3
1a000ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000ea6:	4770      	bx	lr
1a000ea8:	4618      	mov	r0, r3
1a000eaa:	4770      	bx	lr

1a000eac <Chip_UART_SendBlocking>:
   }
}

/* Transmit a byte array through the UART peripheral (blocking) */
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
1a000eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a000eae:	4607      	mov	r7, r0
1a000eb0:	460d      	mov	r5, r1
1a000eb2:	4614      	mov	r4, r2
   int pass, sent = 0;
1a000eb4:	2600      	movs	r6, #0
   uint8_t *p8 = (uint8_t *) data;

   while (numBytes > 0) {
1a000eb6:	2c00      	cmp	r4, #0
1a000eb8:	dd08      	ble.n	1a000ecc <Chip_UART_SendBlocking+0x20>
       pass = Chip_UART_Send(pUART, p8, numBytes);
1a000eba:	4622      	mov	r2, r4
1a000ebc:	4629      	mov	r1, r5
1a000ebe:	4638      	mov	r0, r7
1a000ec0:	f7ff ffe0 	bl	1a000e84 <Chip_UART_Send>
       numBytes -= pass;
1a000ec4:	1a24      	subs	r4, r4, r0
       sent += pass;
1a000ec6:	4406      	add	r6, r0
       p8 += pass;
1a000ec8:	4405      	add	r5, r0
1a000eca:	e7f4      	b.n	1a000eb6 <Chip_UART_SendBlocking+0xa>
   }

   return sent;
}
1a000ecc:	4630      	mov	r0, r6
1a000ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a000ed0 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000ed4:	b083      	sub	sp, #12
1a000ed6:	9001      	str	r0, [sp, #4]
1a000ed8:	4688      	mov	r8, r1
   uint32_t sdiv = 0, sm = 1, sd = 0;
   uint32_t pclk, m, d;
   uint32_t odiff = -1UL; /* old best diff */

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000eda:	f7ff ff93 	bl	1a000e04 <Chip_UART_GetIndex>
1a000ede:	4b32      	ldr	r3, [pc, #200]	@ (1a000fa8 <Chip_UART_SetBaudFDR+0xd8>)
1a000ee0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000ee4:	f7ff fe90 	bl	1a000c08 <Chip_Clock_GetRate>
1a000ee8:	4606      	mov	r6, r0
   uint32_t odiff = -1UL; /* old best diff */
1a000eea:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a000eee:	2401      	movs	r4, #1
   uint32_t sdiv = 0, sm = 1, sd = 0;
1a000ef0:	f04f 0b00 	mov.w	fp, #0
1a000ef4:	46a2      	mov	sl, r4
1a000ef6:	46d9      	mov	r9, fp
   for (m = 1; odiff && m < 16; m++) {
1a000ef8:	e02a      	b.n	1a000f50 <Chip_UART_SetBaudFDR+0x80>
           /* Upper 32-bit of dval has div */
           div = (uint32_t) (dval >> 32);

           /* Closer to next div */
           if ((int)diff < 0) {
               diff = -diff;
1a000efa:	4242      	negs	r2, r0
               div ++;
1a000efc:	1c4b      	adds	r3, r1, #1
1a000efe:	e017      	b.n	1a000f30 <Chip_UART_SetBaudFDR+0x60>
           sd = d;
           sm = m;
           odiff = diff;

           /* On perfect match, break loop */
           if(!diff) {
1a000f00:	b30a      	cbz	r2, 1a000f46 <Chip_UART_SetBaudFDR+0x76>
           odiff = diff;
1a000f02:	4617      	mov	r7, r2
           sd = d;
1a000f04:	46ab      	mov	fp, r5
           sm = m;
1a000f06:	46a2      	mov	sl, r4
           sdiv = div;
1a000f08:	4699      	mov	r9, r3
       for (d = 0; d < m; d++) {
1a000f0a:	3501      	adds	r5, #1
1a000f0c:	42ac      	cmp	r4, r5
1a000f0e:	d91e      	bls.n	1a000f4e <Chip_UART_SetBaudFDR+0x7e>
           uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000f10:	0933      	lsrs	r3, r6, #4
1a000f12:	0730      	lsls	r0, r6, #28
1a000f14:	fba4 0100 	umull	r0, r1, r4, r0
1a000f18:	fb04 1103 	mla	r1, r4, r3, r1
1a000f1c:	1962      	adds	r2, r4, r5
1a000f1e:	fb08 f202 	mul.w	r2, r8, r2
1a000f22:	2300      	movs	r3, #0
1a000f24:	f000 f9ca 	bl	1a0012bc <__aeabi_uldivmod>
           diff = (uint32_t) dval;
1a000f28:	4602      	mov	r2, r0
           div = (uint32_t) (dval >> 32);
1a000f2a:	460b      	mov	r3, r1
           if ((int)diff < 0) {
1a000f2c:	2800      	cmp	r0, #0
1a000f2e:	dbe4      	blt.n	1a000efa <Chip_UART_SetBaudFDR+0x2a>
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000f30:	4297      	cmp	r7, r2
1a000f32:	d3ea      	bcc.n	1a000f0a <Chip_UART_SetBaudFDR+0x3a>
1a000f34:	2b00      	cmp	r3, #0
1a000f36:	d0e8      	beq.n	1a000f0a <Chip_UART_SetBaudFDR+0x3a>
1a000f38:	0c19      	lsrs	r1, r3, #16
1a000f3a:	d1e6      	bne.n	1a000f0a <Chip_UART_SetBaudFDR+0x3a>
1a000f3c:	2b02      	cmp	r3, #2
1a000f3e:	d8df      	bhi.n	1a000f00 <Chip_UART_SetBaudFDR+0x30>
1a000f40:	2d00      	cmp	r5, #0
1a000f42:	d0dd      	beq.n	1a000f00 <Chip_UART_SetBaudFDR+0x30>
1a000f44:	e7e1      	b.n	1a000f0a <Chip_UART_SetBaudFDR+0x3a>
           odiff = diff;
1a000f46:	4617      	mov	r7, r2
           sd = d;
1a000f48:	46ab      	mov	fp, r5
           sm = m;
1a000f4a:	46a2      	mov	sl, r4
           sdiv = div;
1a000f4c:	4699      	mov	r9, r3
   for (m = 1; odiff && m < 16; m++) {
1a000f4e:	3401      	adds	r4, #1
1a000f50:	b11f      	cbz	r7, 1a000f5a <Chip_UART_SetBaudFDR+0x8a>
1a000f52:	2c0f      	cmp	r4, #15
1a000f54:	d801      	bhi.n	1a000f5a <Chip_UART_SetBaudFDR+0x8a>
       for (d = 0; d < m; d++) {
1a000f56:	2500      	movs	r5, #0
1a000f58:	e7d8      	b.n	1a000f0c <Chip_UART_SetBaudFDR+0x3c>
           }
       }
   }

   /* Return 0 if a vaild divisor is not possible */
   if (!sdiv) {
1a000f5a:	f1b9 0f00 	cmp.w	r9, #0
1a000f5e:	d01e      	beq.n	1a000f9e <Chip_UART_SetBaudFDR+0xce>
   pUART->LCR |= UART_LCR_DLAB_EN;
1a000f60:	9a01      	ldr	r2, [sp, #4]
1a000f62:	4611      	mov	r1, r2
1a000f64:	68d3      	ldr	r3, [r2, #12]
1a000f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1a000f6a:	60d3      	str	r3, [r2, #12]
   pUART->DLL = (uint32_t) dll;
1a000f6c:	fa5f f389 	uxtb.w	r3, r9
1a000f70:	6013      	str	r3, [r2, #0]
   pUART->DLM = (uint32_t) dlm;
1a000f72:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a000f76:	6053      	str	r3, [r2, #4]
   pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000f78:	68d3      	ldr	r3, [r2, #12]
1a000f7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
1a000f7e:	60d3      	str	r3, [r2, #12]
   Chip_UART_EnableDivisorAccess(pUART);
   Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
   Chip_UART_DisableDivisorAccess(pUART);

   /* Set best fractional divider */
   pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000f80:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000f84:	b2db      	uxtb	r3, r3
1a000f86:	f00b 020f 	and.w	r2, fp, #15
1a000f8a:	4313      	orrs	r3, r2
1a000f8c:	628b      	str	r3, [r1, #40]	@ 0x28

   /* Return actual baud rate */
   return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000f8e:	0933      	lsrs	r3, r6, #4
1a000f90:	fb0a f303 	mul.w	r3, sl, r3
1a000f94:	44da      	add	sl, fp
1a000f96:	fb09 f90a 	mul.w	r9, r9, sl
1a000f9a:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a000f9e:	4648      	mov	r0, r9
1a000fa0:	b003      	add	sp, #12
1a000fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000fa6:	bf00      	nop
1a000fa8:	1a00391c 	.word	0x1a00391c

1a000fac <Board_LED_Init>:

static void Board_LED_Init()
{
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000fac:	2200      	movs	r2, #0
1a000fae:	2a05      	cmp	r2, #5
1a000fb0:	d81b      	bhi.n	1a000fea <Board_LED_Init+0x3e>
{
1a000fb2:	b510      	push	{r4, lr}
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
1a000fb4:	4b0d      	ldr	r3, [pc, #52]	@ (1a000fec <Board_LED_Init+0x40>)
1a000fb6:	f813 e012 	ldrb.w	lr, [r3, r2, lsl #1]
1a000fba:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a000fbe:	f893 c001 	ldrb.w	ip, [r3, #1]
 * @param  pin     : GPIO pin to set direction on as output
 * @return Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
   pGPIO->DIR[port] |= 1UL << pin;
1a000fc2:	4b0b      	ldr	r3, [pc, #44]	@ (1a000ff0 <Board_LED_Init+0x44>)
1a000fc4:	f50e 6400 	add.w	r4, lr, #2048	@ 0x800
1a000fc8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
1a000fcc:	2001      	movs	r0, #1
1a000fce:	fa00 f00c 	lsl.w	r0, r0, ip
1a000fd2:	4301      	orrs	r1, r0
1a000fd4:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
   pGPIO->B[port][pin] = setting;
1a000fd8:	eb03 134e 	add.w	r3, r3, lr, lsl #5
1a000fdc:	2100      	movs	r1, #0
1a000fde:	f803 100c 	strb.w	r1, [r3, ip]
   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000fe2:	3201      	adds	r2, #1
1a000fe4:	2a05      	cmp	r2, #5
1a000fe6:	d9e5      	bls.n	1a000fb4 <Board_LED_Init+0x8>
       Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin, (bool) false);
   }
}
1a000fe8:	bd10      	pop	{r4, pc}
1a000fea:	4770      	bx	lr
1a000fec:	1a00392c 	.word	0x1a00392c
1a000ff0:	400f4000 	.word	0x400f4000

1a000ff4 <Board_UART_Init>:
1a000ff4:	4b03      	ldr	r3, [pc, #12]	@ (1a001004 <Board_UART_Init+0x10>)
1a000ff6:	2212      	movs	r2, #18
1a000ff8:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
1a000ffc:	22d1      	movs	r2, #209	@ 0xd1
1a000ffe:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
}
1a001002:	4770      	bx	lr
1a001004:	40086000 	.word	0x40086000

1a001008 <Board_Debug_Init>:
{
1a001008:	b510      	push	{r4, lr}
   Board_UART_Init(DEBUG_UART);
1a00100a:	4c08      	ldr	r4, [pc, #32]	@ (1a00102c <Board_Debug_Init+0x24>)
1a00100c:	4620      	mov	r0, r4
1a00100e:	f7ff fff1 	bl	1a000ff4 <Board_UART_Init>
   Chip_UART_Init(DEBUG_UART);
1a001012:	4620      	mov	r0, r4
1a001014:	f7ff ff0c 	bl	1a000e30 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, 115200);
1a001018:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
1a00101c:	4620      	mov	r0, r4
1a00101e:	f7ff ff57 	bl	1a000ed0 <Chip_UART_SetBaudFDR>
   pUART->LCR = config;
1a001022:	2303      	movs	r3, #3
1a001024:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a001026:	2301      	movs	r3, #1
1a001028:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
1a00102a:	bd10      	pop	{r4, pc}
1a00102c:	400c1000 	.word	0x400c1000

1a001030 <Board_UARTPutChar>:
   return pUART->LSR;
1a001030:	4b03      	ldr	r3, [pc, #12]	@ (1a001040 <Board_UARTPutChar+0x10>)
1a001032:	695b      	ldr	r3, [r3, #20]
   while ((Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE) == 0) {}
1a001034:	f013 0f20 	tst.w	r3, #32
1a001038:	d0fa      	beq.n	1a001030 <Board_UARTPutChar>
   pUART->THR = (uint32_t) data;
1a00103a:	4b01      	ldr	r3, [pc, #4]	@ (1a001040 <Board_UARTPutChar+0x10>)
1a00103c:	6018      	str	r0, [r3, #0]
}
1a00103e:	4770      	bx	lr
1a001040:	400c1000 	.word	0x400c1000

1a001044 <Board_UARTGetChar>:
   return pUART->LSR;
1a001044:	4b05      	ldr	r3, [pc, #20]	@ (1a00105c <Board_UARTGetChar+0x18>)
1a001046:	695b      	ldr	r3, [r3, #20]
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a001048:	f013 0f01 	tst.w	r3, #1
1a00104c:	d003      	beq.n	1a001056 <Board_UARTGetChar+0x12>
   return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00104e:	4b03      	ldr	r3, [pc, #12]	@ (1a00105c <Board_UARTGetChar+0x18>)
1a001050:	6818      	ldr	r0, [r3, #0]
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a001052:	b2c0      	uxtb	r0, r0
1a001054:	4770      	bx	lr
   return EOF;
1a001056:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
1a00105a:	4770      	bx	lr
1a00105c:	400c1000 	.word	0x400c1000

1a001060 <Board_LED_Set>:

void Board_LED_Set(uint8_t LEDNumber, bool On)
{
   if (LEDNumber < (sizeof(gpioLEDBits) / sizeof(io_port_t)))
1a001060:	2805      	cmp	r0, #5
1a001062:	d80d      	bhi.n	1a001080 <Board_LED_Set+0x20>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[LEDNumber].port, gpioLEDBits[LEDNumber].pin, (bool) !On);
1a001064:	4a07      	ldr	r2, [pc, #28]	@ (1a001084 <Board_LED_Set+0x24>)
1a001066:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a00106a:	eb02 0240 	add.w	r2, r2, r0, lsl #1
1a00106e:	7852      	ldrb	r2, [r2, #1]
1a001070:	f081 0101 	eor.w	r1, r1, #1
1a001074:	015b      	lsls	r3, r3, #5
1a001076:	f103 2340 	add.w	r3, r3, #1073758208	@ 0x40004000
1a00107a:	f503 2370 	add.w	r3, r3, #983040	@ 0xf0000
1a00107e:	5499      	strb	r1, [r3, r2]
}
1a001080:	4770      	bx	lr
1a001082:	bf00      	nop
1a001084:	1a00392c 	.word	0x1a00392c

1a001088 <Board_LED_Test>:

bool Board_LED_Test(uint8_t LEDNumber)
{
   if (LEDNumber < (sizeof(gpioLEDBits) / sizeof(io_port_t)))
1a001088:	2805      	cmp	r0, #5
1a00108a:	d901      	bls.n	1a001090 <Board_LED_Test+0x8>
       return (bool) !Chip_GPIO_GetPinState(LPC_GPIO_PORT, gpioLEDBits[LEDNumber].port, gpioLEDBits[LEDNumber].pin);

   return false;
1a00108c:	2000      	movs	r0, #0
}
1a00108e:	4770      	bx	lr
       return (bool) !Chip_GPIO_GetPinState(LPC_GPIO_PORT, gpioLEDBits[LEDNumber].port, gpioLEDBits[LEDNumber].pin);
1a001090:	4a07      	ldr	r2, [pc, #28]	@ (1a0010b0 <Board_LED_Test+0x28>)
1a001092:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a001096:	eb02 0240 	add.w	r2, r2, r0, lsl #1
1a00109a:	7852      	ldrb	r2, [r2, #1]
   return (bool) pGPIO->B[port][pin];
1a00109c:	015b      	lsls	r3, r3, #5
1a00109e:	f103 2340 	add.w	r3, r3, #1073758208	@ 0x40004000
1a0010a2:	f503 2370 	add.w	r3, r3, #983040	@ 0xf0000
1a0010a6:	5c98      	ldrb	r0, [r3, r2]
1a0010a8:	fab0 f080 	clz	r0, r0
1a0010ac:	0940      	lsrs	r0, r0, #5
1a0010ae:	4770      	bx	lr
1a0010b0:	1a00392c 	.word	0x1a00392c

1a0010b4 <Board_LED_Toggle>:

void Board_LED_Toggle(uint8_t LEDNumber)
{
1a0010b4:	b510      	push	{r4, lr}
1a0010b6:	4604      	mov	r4, r0
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
1a0010b8:	f7ff ffe6 	bl	1a001088 <Board_LED_Test>
1a0010bc:	f080 0101 	eor.w	r1, r0, #1
1a0010c0:	b2c9      	uxtb	r1, r1
1a0010c2:	4620      	mov	r0, r4
1a0010c4:	f7ff ffcc 	bl	1a001060 <Board_LED_Set>
}
1a0010c8:	bd10      	pop	{r4, pc}
	...

1a0010cc <Board_Init>:
}

/* Set up and initialize all required blocks and functions related to the
   board hardware */
void Board_Init(void)
{
1a0010cc:	b508      	push	{r3, lr}
   /* Sets up DEBUG UART */
   DEBUGINIT();
1a0010ce:	f7ff ff9b 	bl	1a001008 <Board_Debug_Init>

   /* Initializes GPIO */
   Chip_GPIO_Init(LPC_GPIO_PORT);
1a0010d2:	4806      	ldr	r0, [pc, #24]	@ (1a0010ec <Board_Init+0x20>)
1a0010d4:	f7ff fde8 	bl	1a000ca8 <Chip_GPIO_Init>

   /* Initialize LEDs */
   Board_LED_Init();
1a0010d8:	f7ff ff68 	bl	1a000fac <Board_LED_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
   LPC_CREG->CREG6 |= 0x4;
1a0010dc:	4a04      	ldr	r2, [pc, #16]	@ (1a0010f0 <Board_Init+0x24>)
1a0010de:	f8d2 312c 	ldr.w	r3, [r2, #300]	@ 0x12c
1a0010e2:	f043 0304 	orr.w	r3, r3, #4
1a0010e6:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
}
1a0010ea:	bd08      	pop	{r3, pc}
1a0010ec:	400f4000 	.word	0x400f4000
1a0010f0:	40043000 	.word	0x40043000

1a0010f4 <Chip_SCU_SetPinMuxing>:
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a0010f4:	2300      	movs	r3, #0
1a0010f6:	428b      	cmp	r3, r1
1a0010f8:	d212      	bcs.n	1a001120 <Chip_SCU_SetPinMuxing+0x2c>
{
1a0010fa:	b430      	push	{r4, r5}
       Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0010fc:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
1a001100:	f810 4023 	ldrb.w	r4, [r0, r3, lsl #2]
1a001104:	f89c 2001 	ldrb.w	r2, [ip, #1]
1a001108:	f8bc 5002 	ldrh.w	r5, [ip, #2]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a00110c:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a001110:	4c04      	ldr	r4, [pc, #16]	@ (1a001124 <Chip_SCU_SetPinMuxing+0x30>)
1a001112:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
   for (ix = 0; ix < arrayLength; ix++ ) {
1a001116:	3301      	adds	r3, #1
1a001118:	428b      	cmp	r3, r1
1a00111a:	d3ef      	bcc.n	1a0010fc <Chip_SCU_SetPinMuxing+0x8>
   }
}
1a00111c:	bc30      	pop	{r4, r5}
1a00111e:	4770      	bx	lr
1a001120:	4770      	bx	lr
1a001122:	bf00      	nop
1a001124:	40086000 	.word	0x40086000

1a001128 <Board_SetupMuxing>:
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a001128:	b508      	push	{r3, lr}
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
1a00112a:	2118      	movs	r1, #24
1a00112c:	4801      	ldr	r0, [pc, #4]	@ (1a001134 <Board_SetupMuxing+0xc>)
1a00112e:	f7ff ffe1 	bl	1a0010f4 <Chip_SCU_SetPinMuxing>
}
1a001132:	bd08      	pop	{r3, pc}
1a001134:	1a003940 	.word	0x1a003940

1a001138 <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a001138:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
   uint32_t FAValue = Hz / 21510000;

   LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00113a:	4a17      	ldr	r2, [pc, #92]	@ (1a001198 <Board_SetupClocking+0x60>)
1a00113c:	f8d2 3120 	ldr.w	r3, [r2, #288]	@ 0x120
1a001140:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
1a001144:	f443 4310 	orr.w	r3, r3, #36864	@ 0x9000
1a001148:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
   LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a00114c:	f8d2 3124 	ldr.w	r3, [r2, #292]	@ 0x124
1a001150:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
1a001154:	f443 4310 	orr.w	r3, r3, #36864	@ 0x9000
1a001158:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a00115c:	2201      	movs	r2, #1
1a00115e:	490f      	ldr	r1, [pc, #60]	@ (1a00119c <Board_SetupClocking+0x64>)
1a001160:	2006      	movs	r0, #6
1a001162:	f7ff fda3 	bl	1a000cac <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001166:	2400      	movs	r4, #0
1a001168:	e00a      	b.n	1a001180 <Board_SetupClocking+0x48>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a00116a:	480d      	ldr	r0, [pc, #52]	@ (1a0011a0 <Board_SetupClocking+0x68>)
1a00116c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001170:	78cb      	ldrb	r3, [r1, #3]
1a001172:	788a      	ldrb	r2, [r1, #2]
1a001174:	7849      	ldrb	r1, [r1, #1]
1a001176:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00117a:	f7ff fce1 	bl	1a000b40 <Chip_Clock_SetBaseClock>
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a00117e:	3401      	adds	r4, #1
1a001180:	2c02      	cmp	r4, #2
1a001182:	d9f2      	bls.n	1a00116a <Board_SetupClocking+0x32>
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a001184:	4b04      	ldr	r3, [pc, #16]	@ (1a001198 <Board_SetupClocking+0x60>)
1a001186:	685a      	ldr	r2, [r3, #4]
1a001188:	f022 020c 	bic.w	r2, r2, #12
1a00118c:	605a      	str	r2, [r3, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a00118e:	685a      	ldr	r2, [r3, #4]
1a001190:	f042 0203 	orr.w	r2, r2, #3
1a001194:	605a      	str	r2, [r3, #4]
}
1a001196:	bd10      	pop	{r4, pc}
1a001198:	40043000 	.word	0x40043000
1a00119c:	0c28cb00 	.word	0x0c28cb00
1a0011a0:	1a0039a0 	.word	0x1a0039a0

1a0011a4 <Board_SystemInit>:

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0011a4:	b508      	push	{r3, lr}
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a0011a6:	f7ff ffbf 	bl	1a001128 <Board_SetupMuxing>
   Board_SetupClocking();
1a0011aa:	f7ff ffc5 	bl	1a001138 <Board_SetupClocking>
}
1a0011ae:	bd08      	pop	{r3, pc}

1a0011b0 <ResetISR>:
void ResetISR(void) {
1a0011b0:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a0011b2:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0011b4:	4b16      	ldr	r3, [pc, #88]	@ (1a001210 <ResetISR+0x60>)
1a0011b6:	4a17      	ldr	r2, [pc, #92]	@ (1a001214 <ResetISR+0x64>)
1a0011b8:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0011ba:	3304      	adds	r3, #4
1a0011bc:	4a16      	ldr	r2, [pc, #88]	@ (1a001218 <ResetISR+0x68>)
1a0011be:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0011c0:	2300      	movs	r3, #0
1a0011c2:	e005      	b.n	1a0011d0 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0011c4:	4a15      	ldr	r2, [pc, #84]	@ (1a00121c <ResetISR+0x6c>)
1a0011c6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
1a0011ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0011ce:	3301      	adds	r3, #1
1a0011d0:	2b07      	cmp	r3, #7
1a0011d2:	d9f7      	bls.n	1a0011c4 <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a0011d4:	b662      	cpsie	i
    SystemInit();
1a0011d6:	f000 f829 	bl	1a00122c <SystemInit>
    SectionTableAddr = &__data_section_table;
1a0011da:	4b11      	ldr	r3, [pc, #68]	@ (1a001220 <ResetISR+0x70>)
    while (SectionTableAddr < &__data_section_table_end) {
1a0011dc:	e007      	b.n	1a0011ee <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a0011de:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0011e2:	689a      	ldr	r2, [r3, #8]
1a0011e4:	6859      	ldr	r1, [r3, #4]
1a0011e6:	6818      	ldr	r0, [r3, #0]
1a0011e8:	f7fe ffd0 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a0011ec:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0011ee:	4a0d      	ldr	r2, [pc, #52]	@ (1a001224 <ResetISR+0x74>)
1a0011f0:	4293      	cmp	r3, r2
1a0011f2:	d3f4      	bcc.n	1a0011de <ResetISR+0x2e>
1a0011f4:	e006      	b.n	1a001204 <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a0011f6:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0011f8:	6859      	ldr	r1, [r3, #4]
1a0011fa:	f854 0b08 	ldr.w	r0, [r4], #8
1a0011fe:	f7fe ffd4 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a001202:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a001204:	4a08      	ldr	r2, [pc, #32]	@ (1a001228 <ResetISR+0x78>)
1a001206:	4293      	cmp	r3, r2
1a001208:	d3f5      	bcc.n	1a0011f6 <ResetISR+0x46>
    main();
1a00120a:	f7ff f8fb 	bl	1a000404 <main>
        ;
1a00120e:	e7fe      	b.n	1a00120e <ResetISR+0x5e>
1a001210:	40053100 	.word	0x40053100
1a001214:	10df1000 	.word	0x10df1000
1a001218:	01dff7ff 	.word	0x01dff7ff
1a00121c:	e000e280 	.word	0xe000e280
1a001220:	1a000114 	.word	0x1a000114
1a001224:	1a000150 	.word	0x1a000150
1a001228:	1a000178 	.word	0x1a000178

1a00122c <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a00122c:	b508      	push	{r3, lr}

   *pSCB_VTOR = (unsigned int) &__Vectors;
#endif

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a00122e:	f7ff fd11 	bl	1a000c54 <fpuInit>
#if defined(NO_BOARD_LIB)
   /* Chip specific SystemInit */
   Chip_SystemInit();
#else
   /* Board specific SystemInit */
   Board_SystemInit();
1a001232:	f7ff ffb7 	bl	1a0011a4 <Board_SystemInit>
#endif

#endif /* defined(CORE_M3) || defined(CORE_M4) */
}
1a001236:	bd08      	pop	{r3, pc}

1a001238 <_close_r>:
       __asm__ __volatile__("bkpt 0");
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a001238:	2309      	movs	r3, #9
1a00123a:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00123c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a001240:	4770      	bx	lr

1a001242 <_lseek_r>:
   return -1;
}

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd, off, w);
   SET_ERR(ENOSYS);
1a001242:	2358      	movs	r3, #88	@ 0x58
1a001244:	6003      	str	r3, [r0, #0]
   return -1;
}
1a001246:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a00124a:	4770      	bx	lr

1a00124c <_read_r>:
   return -1;
}

_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
   size_t i;
   switch (fd) {
1a00124c:	2902      	cmp	r1, #2
1a00124e:	d80c      	bhi.n	1a00126a <_read_r+0x1e>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a001250:	b570      	push	{r4, r5, r6, lr}
1a001252:	4616      	mov	r6, r2
1a001254:	461d      	mov	r5, r3
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a001256:	2400      	movs	r4, #0
1a001258:	e003      	b.n	1a001262 <_read_r+0x16>
           ((char*) b)[i] = Board_UARTGetChar();
1a00125a:	f7ff fef3 	bl	1a001044 <Board_UARTGetChar>
1a00125e:	5530      	strb	r0, [r6, r4]
       for (i = 0; i < n; i++)
1a001260:	3401      	adds	r4, #1
1a001262:	42ac      	cmp	r4, r5
1a001264:	d3f9      	bcc.n	1a00125a <_read_r+0xe>
       return n;
1a001266:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a001268:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a00126a:	2313      	movs	r3, #19
1a00126c:	6003      	str	r3, [r0, #0]
       return -1;
1a00126e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
1a001272:	4770      	bx	lr

1a001274 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a001274:	4b05      	ldr	r3, [pc, #20]	@ (1a00128c <_sbrk_r+0x18>)
1a001276:	681b      	ldr	r3, [r3, #0]
1a001278:	b123      	cbz	r3, 1a001284 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a00127a:	4b04      	ldr	r3, [pc, #16]	@ (1a00128c <_sbrk_r+0x18>)
1a00127c:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a00127e:	4401      	add	r1, r0
1a001280:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a001282:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a001284:	4b01      	ldr	r3, [pc, #4]	@ (1a00128c <_sbrk_r+0x18>)
1a001286:	4a02      	ldr	r2, [pc, #8]	@ (1a001290 <_sbrk_r+0x1c>)
1a001288:	601a      	str	r2, [r3, #0]
1a00128a:	e7f6      	b.n	1a00127a <_sbrk_r+0x6>
1a00128c:	100000b8 	.word	0x100000b8
1a001290:	10000204 	.word	0x10000204

1a001294 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a001294:	2902      	cmp	r1, #2
1a001296:	d80c      	bhi.n	1a0012b2 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a001298:	b570      	push	{r4, r5, r6, lr}
1a00129a:	4616      	mov	r6, r2
1a00129c:	461d      	mov	r5, r3
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a00129e:	2400      	movs	r4, #0
1a0012a0:	e003      	b.n	1a0012aa <_write_r+0x16>
           Board_UARTPutChar(((char*) b)[i]);
1a0012a2:	5d30      	ldrb	r0, [r6, r4]
1a0012a4:	f7ff fec4 	bl	1a001030 <Board_UARTPutChar>
       for (i = 0; i < n; i++)
1a0012a8:	3401      	adds	r4, #1
1a0012aa:	42ac      	cmp	r4, r5
1a0012ac:	d3f9      	bcc.n	1a0012a2 <_write_r+0xe>
       return n;
1a0012ae:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a0012b0:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a0012b2:	2313      	movs	r3, #19
1a0012b4:	6003      	str	r3, [r0, #0]
       return -1;
1a0012b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
1a0012ba:	4770      	bx	lr

1a0012bc <__aeabi_uldivmod>:
1a0012bc:	b953      	cbnz	r3, 1a0012d4 <__aeabi_uldivmod+0x18>
1a0012be:	b94a      	cbnz	r2, 1a0012d4 <__aeabi_uldivmod+0x18>
1a0012c0:	2900      	cmp	r1, #0
1a0012c2:	bf08      	it	eq
1a0012c4:	2800      	cmpeq	r0, #0
1a0012c6:	bf1c      	itt	ne
1a0012c8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
1a0012cc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
1a0012d0:	f000 b96a 	b.w	1a0015a8 <__aeabi_idiv0>
1a0012d4:	f1ad 0c08 	sub.w	ip, sp, #8
1a0012d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0012dc:	f000 f806 	bl	1a0012ec <__udivmoddi4>
1a0012e0:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0012e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0012e8:	b004      	add	sp, #16
1a0012ea:	4770      	bx	lr

1a0012ec <__udivmoddi4>:
1a0012ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0012f0:	9d08      	ldr	r5, [sp, #32]
1a0012f2:	460e      	mov	r6, r1
1a0012f4:	4604      	mov	r4, r0
1a0012f6:	460f      	mov	r7, r1
1a0012f8:	2b00      	cmp	r3, #0
1a0012fa:	d14a      	bne.n	1a001392 <__udivmoddi4+0xa6>
1a0012fc:	4694      	mov	ip, r2
1a0012fe:	458c      	cmp	ip, r1
1a001300:	fab2 f282 	clz	r2, r2
1a001304:	d960      	bls.n	1a0013c8 <__udivmoddi4+0xdc>
1a001306:	b142      	cbz	r2, 1a00131a <__udivmoddi4+0x2e>
1a001308:	f1c2 0320 	rsb	r3, r2, #32
1a00130c:	4097      	lsls	r7, r2
1a00130e:	fa20 f303 	lsr.w	r3, r0, r3
1a001312:	fa0c fc02 	lsl.w	ip, ip, r2
1a001316:	431f      	orrs	r7, r3
1a001318:	4094      	lsls	r4, r2
1a00131a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a00131e:	fa1f f68c 	uxth.w	r6, ip
1a001322:	fbb7 f1fe 	udiv	r1, r7, lr
1a001326:	0c23      	lsrs	r3, r4, #16
1a001328:	fb0e 7711 	mls	r7, lr, r1, r7
1a00132c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a001330:	fb01 f006 	mul.w	r0, r1, r6
1a001334:	4298      	cmp	r0, r3
1a001336:	d90a      	bls.n	1a00134e <__udivmoddi4+0x62>
1a001338:	eb1c 0303 	adds.w	r3, ip, r3
1a00133c:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
1a001340:	f080 8115 	bcs.w	1a00156e <__udivmoddi4+0x282>
1a001344:	4298      	cmp	r0, r3
1a001346:	f240 8112 	bls.w	1a00156e <__udivmoddi4+0x282>
1a00134a:	3902      	subs	r1, #2
1a00134c:	4463      	add	r3, ip
1a00134e:	1a1b      	subs	r3, r3, r0
1a001350:	b2a4      	uxth	r4, r4
1a001352:	fbb3 f0fe 	udiv	r0, r3, lr
1a001356:	fb0e 3310 	mls	r3, lr, r0, r3
1a00135a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a00135e:	fb00 f606 	mul.w	r6, r0, r6
1a001362:	42a6      	cmp	r6, r4
1a001364:	d90a      	bls.n	1a00137c <__udivmoddi4+0x90>
1a001366:	eb1c 0404 	adds.w	r4, ip, r4
1a00136a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
1a00136e:	f080 8100 	bcs.w	1a001572 <__udivmoddi4+0x286>
1a001372:	42a6      	cmp	r6, r4
1a001374:	f240 80fd 	bls.w	1a001572 <__udivmoddi4+0x286>
1a001378:	4464      	add	r4, ip
1a00137a:	3802      	subs	r0, #2
1a00137c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
1a001380:	1ba4      	subs	r4, r4, r6
1a001382:	2100      	movs	r1, #0
1a001384:	b11d      	cbz	r5, 1a00138e <__udivmoddi4+0xa2>
1a001386:	40d4      	lsrs	r4, r2
1a001388:	2300      	movs	r3, #0
1a00138a:	e9c5 4300 	strd	r4, r3, [r5]
1a00138e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001392:	428b      	cmp	r3, r1
1a001394:	d905      	bls.n	1a0013a2 <__udivmoddi4+0xb6>
1a001396:	b10d      	cbz	r5, 1a00139c <__udivmoddi4+0xb0>
1a001398:	e9c5 0100 	strd	r0, r1, [r5]
1a00139c:	2100      	movs	r1, #0
1a00139e:	4608      	mov	r0, r1
1a0013a0:	e7f5      	b.n	1a00138e <__udivmoddi4+0xa2>
1a0013a2:	fab3 f183 	clz	r1, r3
1a0013a6:	2900      	cmp	r1, #0
1a0013a8:	d146      	bne.n	1a001438 <__udivmoddi4+0x14c>
1a0013aa:	42b3      	cmp	r3, r6
1a0013ac:	d302      	bcc.n	1a0013b4 <__udivmoddi4+0xc8>
1a0013ae:	4282      	cmp	r2, r0
1a0013b0:	f200 80f5 	bhi.w	1a00159e <__udivmoddi4+0x2b2>
1a0013b4:	1a84      	subs	r4, r0, r2
1a0013b6:	eb66 0203 	sbc.w	r2, r6, r3
1a0013ba:	2001      	movs	r0, #1
1a0013bc:	4617      	mov	r7, r2
1a0013be:	2d00      	cmp	r5, #0
1a0013c0:	d0e5      	beq.n	1a00138e <__udivmoddi4+0xa2>
1a0013c2:	e9c5 4700 	strd	r4, r7, [r5]
1a0013c6:	e7e2      	b.n	1a00138e <__udivmoddi4+0xa2>
1a0013c8:	2a00      	cmp	r2, #0
1a0013ca:	f040 8093 	bne.w	1a0014f4 <__udivmoddi4+0x208>
1a0013ce:	eba1 030c 	sub.w	r3, r1, ip
1a0013d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
1a0013d6:	fa1f fe8c 	uxth.w	lr, ip
1a0013da:	2101      	movs	r1, #1
1a0013dc:	fbb3 f6f7 	udiv	r6, r3, r7
1a0013e0:	fb07 3016 	mls	r0, r7, r6, r3
1a0013e4:	0c23      	lsrs	r3, r4, #16
1a0013e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1a0013ea:	fb0e f006 	mul.w	r0, lr, r6
1a0013ee:	4298      	cmp	r0, r3
1a0013f0:	d908      	bls.n	1a001404 <__udivmoddi4+0x118>
1a0013f2:	eb1c 0303 	adds.w	r3, ip, r3
1a0013f6:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
1a0013fa:	d202      	bcs.n	1a001402 <__udivmoddi4+0x116>
1a0013fc:	4298      	cmp	r0, r3
1a0013fe:	f200 80d0 	bhi.w	1a0015a2 <__udivmoddi4+0x2b6>
1a001402:	4646      	mov	r6, r8
1a001404:	1a1b      	subs	r3, r3, r0
1a001406:	b2a4      	uxth	r4, r4
1a001408:	fbb3 f0f7 	udiv	r0, r3, r7
1a00140c:	fb07 3310 	mls	r3, r7, r0, r3
1a001410:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001414:	fb0e fe00 	mul.w	lr, lr, r0
1a001418:	45a6      	cmp	lr, r4
1a00141a:	d908      	bls.n	1a00142e <__udivmoddi4+0x142>
1a00141c:	eb1c 0404 	adds.w	r4, ip, r4
1a001420:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
1a001424:	d202      	bcs.n	1a00142c <__udivmoddi4+0x140>
1a001426:	45a6      	cmp	lr, r4
1a001428:	f200 80b6 	bhi.w	1a001598 <__udivmoddi4+0x2ac>
1a00142c:	4618      	mov	r0, r3
1a00142e:	eba4 040e 	sub.w	r4, r4, lr
1a001432:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
1a001436:	e7a5      	b.n	1a001384 <__udivmoddi4+0x98>
1a001438:	f1c1 0720 	rsb	r7, r1, #32
1a00143c:	408b      	lsls	r3, r1
1a00143e:	fa22 fc07 	lsr.w	ip, r2, r7
1a001442:	ea4c 0c03 	orr.w	ip, ip, r3
1a001446:	fa06 fe01 	lsl.w	lr, r6, r1
1a00144a:	fa20 f407 	lsr.w	r4, r0, r7
1a00144e:	fa26 f307 	lsr.w	r3, r6, r7
1a001452:	ea44 040e 	orr.w	r4, r4, lr
1a001456:	fa00 f801 	lsl.w	r8, r0, r1
1a00145a:	ea4f 401c 	mov.w	r0, ip, lsr #16
1a00145e:	ea4f 4914 	mov.w	r9, r4, lsr #16
1a001462:	fbb3 fef0 	udiv	lr, r3, r0
1a001466:	fa1f f68c 	uxth.w	r6, ip
1a00146a:	fb00 331e 	mls	r3, r0, lr, r3
1a00146e:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
1a001472:	fb0e f906 	mul.w	r9, lr, r6
1a001476:	4599      	cmp	r9, r3
1a001478:	fa02 f201 	lsl.w	r2, r2, r1
1a00147c:	d90b      	bls.n	1a001496 <__udivmoddi4+0x1aa>
1a00147e:	eb1c 0303 	adds.w	r3, ip, r3
1a001482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
1a001486:	f080 8085 	bcs.w	1a001594 <__udivmoddi4+0x2a8>
1a00148a:	4599      	cmp	r9, r3
1a00148c:	f240 8082 	bls.w	1a001594 <__udivmoddi4+0x2a8>
1a001490:	f1ae 0e02 	sub.w	lr, lr, #2
1a001494:	4463      	add	r3, ip
1a001496:	eba3 0909 	sub.w	r9, r3, r9
1a00149a:	b2a4      	uxth	r4, r4
1a00149c:	fbb9 f3f0 	udiv	r3, r9, r0
1a0014a0:	fb00 9913 	mls	r9, r0, r3, r9
1a0014a4:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
1a0014a8:	fb03 f606 	mul.w	r6, r3, r6
1a0014ac:	42a6      	cmp	r6, r4
1a0014ae:	d908      	bls.n	1a0014c2 <__udivmoddi4+0x1d6>
1a0014b0:	eb1c 0404 	adds.w	r4, ip, r4
1a0014b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
1a0014b8:	d268      	bcs.n	1a00158c <__udivmoddi4+0x2a0>
1a0014ba:	42a6      	cmp	r6, r4
1a0014bc:	d966      	bls.n	1a00158c <__udivmoddi4+0x2a0>
1a0014be:	3b02      	subs	r3, #2
1a0014c0:	4464      	add	r4, ip
1a0014c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
1a0014c6:	1ba4      	subs	r4, r4, r6
1a0014c8:	fba0 e602 	umull	lr, r6, r0, r2
1a0014cc:	42b4      	cmp	r4, r6
1a0014ce:	4673      	mov	r3, lr
1a0014d0:	46b1      	mov	r9, r6
1a0014d2:	d352      	bcc.n	1a00157a <__udivmoddi4+0x28e>
1a0014d4:	d04f      	beq.n	1a001576 <__udivmoddi4+0x28a>
1a0014d6:	b15d      	cbz	r5, 1a0014f0 <__udivmoddi4+0x204>
1a0014d8:	ebb8 0203 	subs.w	r2, r8, r3
1a0014dc:	eb64 0409 	sbc.w	r4, r4, r9
1a0014e0:	fa04 f707 	lsl.w	r7, r4, r7
1a0014e4:	fa22 f301 	lsr.w	r3, r2, r1
1a0014e8:	431f      	orrs	r7, r3
1a0014ea:	40cc      	lsrs	r4, r1
1a0014ec:	e9c5 7400 	strd	r7, r4, [r5]
1a0014f0:	2100      	movs	r1, #0
1a0014f2:	e74c      	b.n	1a00138e <__udivmoddi4+0xa2>
1a0014f4:	f1c2 0120 	rsb	r1, r2, #32
1a0014f8:	fa20 f301 	lsr.w	r3, r0, r1
1a0014fc:	fa0c fc02 	lsl.w	ip, ip, r2
1a001500:	fa26 f101 	lsr.w	r1, r6, r1
1a001504:	4096      	lsls	r6, r2
1a001506:	4333      	orrs	r3, r6
1a001508:	ea4f 471c 	mov.w	r7, ip, lsr #16
1a00150c:	fa1f fe8c 	uxth.w	lr, ip
1a001510:	fbb1 f0f7 	udiv	r0, r1, r7
1a001514:	fb07 1610 	mls	r6, r7, r0, r1
1a001518:	0c19      	lsrs	r1, r3, #16
1a00151a:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
1a00151e:	fb00 f60e 	mul.w	r6, r0, lr
1a001522:	428e      	cmp	r6, r1
1a001524:	fa04 f402 	lsl.w	r4, r4, r2
1a001528:	d908      	bls.n	1a00153c <__udivmoddi4+0x250>
1a00152a:	eb1c 0101 	adds.w	r1, ip, r1
1a00152e:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
1a001532:	d22d      	bcs.n	1a001590 <__udivmoddi4+0x2a4>
1a001534:	428e      	cmp	r6, r1
1a001536:	d92b      	bls.n	1a001590 <__udivmoddi4+0x2a4>
1a001538:	3802      	subs	r0, #2
1a00153a:	4461      	add	r1, ip
1a00153c:	1b89      	subs	r1, r1, r6
1a00153e:	b29b      	uxth	r3, r3
1a001540:	fbb1 f6f7 	udiv	r6, r1, r7
1a001544:	fb07 1116 	mls	r1, r7, r6, r1
1a001548:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00154c:	fb06 f10e 	mul.w	r1, r6, lr
1a001550:	4299      	cmp	r1, r3
1a001552:	d908      	bls.n	1a001566 <__udivmoddi4+0x27a>
1a001554:	eb1c 0303 	adds.w	r3, ip, r3
1a001558:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
1a00155c:	d214      	bcs.n	1a001588 <__udivmoddi4+0x29c>
1a00155e:	4299      	cmp	r1, r3
1a001560:	d912      	bls.n	1a001588 <__udivmoddi4+0x29c>
1a001562:	3e02      	subs	r6, #2
1a001564:	4463      	add	r3, ip
1a001566:	1a5b      	subs	r3, r3, r1
1a001568:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
1a00156c:	e736      	b.n	1a0013dc <__udivmoddi4+0xf0>
1a00156e:	4639      	mov	r1, r7
1a001570:	e6ed      	b.n	1a00134e <__udivmoddi4+0x62>
1a001572:	4618      	mov	r0, r3
1a001574:	e702      	b.n	1a00137c <__udivmoddi4+0x90>
1a001576:	45f0      	cmp	r8, lr
1a001578:	d2ad      	bcs.n	1a0014d6 <__udivmoddi4+0x1ea>
1a00157a:	ebbe 0302 	subs.w	r3, lr, r2
1a00157e:	eb66 060c 	sbc.w	r6, r6, ip
1a001582:	3801      	subs	r0, #1
1a001584:	46b1      	mov	r9, r6
1a001586:	e7a6      	b.n	1a0014d6 <__udivmoddi4+0x1ea>
1a001588:	4646      	mov	r6, r8
1a00158a:	e7ec      	b.n	1a001566 <__udivmoddi4+0x27a>
1a00158c:	4603      	mov	r3, r0
1a00158e:	e798      	b.n	1a0014c2 <__udivmoddi4+0x1d6>
1a001590:	4640      	mov	r0, r8
1a001592:	e7d3      	b.n	1a00153c <__udivmoddi4+0x250>
1a001594:	46d6      	mov	lr, sl
1a001596:	e77e      	b.n	1a001496 <__udivmoddi4+0x1aa>
1a001598:	4464      	add	r4, ip
1a00159a:	3802      	subs	r0, #2
1a00159c:	e747      	b.n	1a00142e <__udivmoddi4+0x142>
1a00159e:	4608      	mov	r0, r1
1a0015a0:	e70d      	b.n	1a0013be <__udivmoddi4+0xd2>
1a0015a2:	3e02      	subs	r6, #2
1a0015a4:	4463      	add	r3, ip
1a0015a6:	e72d      	b.n	1a001404 <__udivmoddi4+0x118>

1a0015a8 <__aeabi_idiv0>:
1a0015a8:	4770      	bx	lr
1a0015aa:	bf00      	nop

1a0015ac <_siprintf_r>:
1a0015ac:	b40c      	push	{r2, r3}
1a0015ae:	b510      	push	{r4, lr}
1a0015b0:	b09c      	sub	sp, #112	@ 0x70
1a0015b2:	ab1e      	add	r3, sp, #120	@ 0x78
1a0015b4:	9102      	str	r1, [sp, #8]
1a0015b6:	9106      	str	r1, [sp, #24]
1a0015b8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
1a0015bc:	9104      	str	r1, [sp, #16]
1a0015be:	9107      	str	r1, [sp, #28]
1a0015c0:	4908      	ldr	r1, [pc, #32]	@ (1a0015e4 <_siprintf_r+0x38>)
1a0015c2:	f853 2b04 	ldr.w	r2, [r3], #4
1a0015c6:	9105      	str	r1, [sp, #20]
1a0015c8:	2400      	movs	r4, #0
1a0015ca:	a902      	add	r1, sp, #8
1a0015cc:	9301      	str	r3, [sp, #4]
1a0015ce:	941b      	str	r4, [sp, #108]	@ 0x6c
1a0015d0:	f000 f910 	bl	1a0017f4 <_svfiprintf_r>
1a0015d4:	9b02      	ldr	r3, [sp, #8]
1a0015d6:	701c      	strb	r4, [r3, #0]
1a0015d8:	b01c      	add	sp, #112	@ 0x70
1a0015da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0015de:	b002      	add	sp, #8
1a0015e0:	4770      	bx	lr
1a0015e2:	bf00      	nop
1a0015e4:	ffff0208 	.word	0xffff0208

1a0015e8 <siprintf>:
1a0015e8:	b40e      	push	{r1, r2, r3}
1a0015ea:	b530      	push	{r4, r5, lr}
1a0015ec:	b09c      	sub	sp, #112	@ 0x70
1a0015ee:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
1a0015f2:	ab1f      	add	r3, sp, #124	@ 0x7c
1a0015f4:	9104      	str	r1, [sp, #16]
1a0015f6:	9107      	str	r1, [sp, #28]
1a0015f8:	490a      	ldr	r1, [pc, #40]	@ (1a001624 <siprintf+0x3c>)
1a0015fa:	f853 2b04 	ldr.w	r2, [r3], #4
1a0015fe:	9002      	str	r0, [sp, #8]
1a001600:	2400      	movs	r4, #0
1a001602:	9006      	str	r0, [sp, #24]
1a001604:	4d08      	ldr	r5, [pc, #32]	@ (1a001628 <siprintf+0x40>)
1a001606:	6808      	ldr	r0, [r1, #0]
1a001608:	9301      	str	r3, [sp, #4]
1a00160a:	a902      	add	r1, sp, #8
1a00160c:	9505      	str	r5, [sp, #20]
1a00160e:	941b      	str	r4, [sp, #108]	@ 0x6c
1a001610:	f000 f8f0 	bl	1a0017f4 <_svfiprintf_r>
1a001614:	9b02      	ldr	r3, [sp, #8]
1a001616:	701c      	strb	r4, [r3, #0]
1a001618:	b01c      	add	sp, #112	@ 0x70
1a00161a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1a00161e:	b003      	add	sp, #12
1a001620:	4770      	bx	lr
1a001622:	bf00      	nop
1a001624:	10000000 	.word	0x10000000
1a001628:	ffff0208 	.word	0xffff0208

1a00162c <__ssputs_r>:
1a00162c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001630:	688f      	ldr	r7, [r1, #8]
1a001632:	461d      	mov	r5, r3
1a001634:	42af      	cmp	r7, r5
1a001636:	680b      	ldr	r3, [r1, #0]
1a001638:	460c      	mov	r4, r1
1a00163a:	4616      	mov	r6, r2
1a00163c:	d836      	bhi.n	1a0016ac <__ssputs_r+0x80>
1a00163e:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
1a001642:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
1a001646:	d10e      	bne.n	1a001666 <__ssputs_r+0x3a>
1a001648:	463d      	mov	r5, r7
1a00164a:	4618      	mov	r0, r3
1a00164c:	4631      	mov	r1, r6
1a00164e:	462a      	mov	r2, r5
1a001650:	f000 fc16 	bl	1a001e80 <memmove>
1a001654:	68a3      	ldr	r3, [r4, #8]
1a001656:	1bdf      	subs	r7, r3, r7
1a001658:	6823      	ldr	r3, [r4, #0]
1a00165a:	60a7      	str	r7, [r4, #8]
1a00165c:	442b      	add	r3, r5
1a00165e:	2000      	movs	r0, #0
1a001660:	6023      	str	r3, [r4, #0]
1a001662:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001666:	694a      	ldr	r2, [r1, #20]
1a001668:	6909      	ldr	r1, [r1, #16]
1a00166a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a00166e:	1a5f      	subs	r7, r3, r1
1a001670:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
1a001674:	1c6b      	adds	r3, r5, #1
1a001676:	1052      	asrs	r2, r2, #1
1a001678:	443b      	add	r3, r7
1a00167a:	4293      	cmp	r3, r2
1a00167c:	bf92      	itee	ls
1a00167e:	4691      	movls	r9, r2
1a001680:	4699      	movhi	r9, r3
1a001682:	461a      	movhi	r2, r3
1a001684:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
1a001688:	4680      	mov	r8, r0
1a00168a:	d011      	beq.n	1a0016b0 <__ssputs_r+0x84>
1a00168c:	4611      	mov	r1, r2
1a00168e:	f000 fb19 	bl	1a001cc4 <_malloc_r>
1a001692:	4682      	mov	sl, r0
1a001694:	b300      	cbz	r0, 1a0016d8 <__ssputs_r+0xac>
1a001696:	6921      	ldr	r1, [r4, #16]
1a001698:	463a      	mov	r2, r7
1a00169a:	f000 fcc1 	bl	1a002020 <memcpy>
1a00169e:	89a3      	ldrh	r3, [r4, #12]
1a0016a0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
1a0016a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1a0016a8:	81a3      	strh	r3, [r4, #12]
1a0016aa:	e005      	b.n	1a0016b8 <__ssputs_r+0x8c>
1a0016ac:	462f      	mov	r7, r5
1a0016ae:	e7cc      	b.n	1a00164a <__ssputs_r+0x1e>
1a0016b0:	f000 fd50 	bl	1a002154 <_realloc_r>
1a0016b4:	4682      	mov	sl, r0
1a0016b6:	b158      	cbz	r0, 1a0016d0 <__ssputs_r+0xa4>
1a0016b8:	eb0a 0307 	add.w	r3, sl, r7
1a0016bc:	eba9 0707 	sub.w	r7, r9, r7
1a0016c0:	60a7      	str	r7, [r4, #8]
1a0016c2:	f8c4 a010 	str.w	sl, [r4, #16]
1a0016c6:	f8c4 9014 	str.w	r9, [r4, #20]
1a0016ca:	6023      	str	r3, [r4, #0]
1a0016cc:	462f      	mov	r7, r5
1a0016ce:	e7bc      	b.n	1a00164a <__ssputs_r+0x1e>
1a0016d0:	6921      	ldr	r1, [r4, #16]
1a0016d2:	4640      	mov	r0, r8
1a0016d4:	f000 fb76 	bl	1a001dc4 <_free_r>
1a0016d8:	89a3      	ldrh	r3, [r4, #12]
1a0016da:	220c      	movs	r2, #12
1a0016dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1a0016e0:	f8c8 2000 	str.w	r2, [r8]
1a0016e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a0016e8:	81a3      	strh	r3, [r4, #12]
1a0016ea:	e7ba      	b.n	1a001662 <__ssputs_r+0x36>

1a0016ec <__ssprint_r>:
1a0016ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0016f0:	6893      	ldr	r3, [r2, #8]
1a0016f2:	6817      	ldr	r7, [r2, #0]
1a0016f4:	b083      	sub	sp, #12
1a0016f6:	4692      	mov	sl, r2
1a0016f8:	2b00      	cmp	r3, #0
1a0016fa:	d074      	beq.n	1a0017e6 <__ssprint_r+0xfa>
1a0016fc:	f04f 0b00 	mov.w	fp, #0
1a001700:	688b      	ldr	r3, [r1, #8]
1a001702:	680a      	ldr	r2, [r1, #0]
1a001704:	4681      	mov	r9, r0
1a001706:	460c      	mov	r4, r1
1a001708:	465d      	mov	r5, fp
1a00170a:	e045      	b.n	1a001798 <__ssprint_r+0xac>
1a00170c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001710:	f413 6f90 	tst.w	r3, #1152	@ 0x480
1a001714:	d02c      	beq.n	1a001770 <__ssprint_r+0x84>
1a001716:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
1a00171a:	1a16      	subs	r6, r2, r0
1a00171c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
1a001720:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
1a001724:	1c71      	adds	r1, r6, #1
1a001726:	1052      	asrs	r2, r2, #1
1a001728:	4429      	add	r1, r5
1a00172a:	4291      	cmp	r1, r2
1a00172c:	bf92      	itee	ls
1a00172e:	4690      	movls	r8, r2
1a001730:	4688      	movhi	r8, r1
1a001732:	460a      	movhi	r2, r1
1a001734:	055b      	lsls	r3, r3, #21
1a001736:	d539      	bpl.n	1a0017ac <__ssprint_r+0xc0>
1a001738:	4611      	mov	r1, r2
1a00173a:	4648      	mov	r0, r9
1a00173c:	f000 fac2 	bl	1a001cc4 <_malloc_r>
1a001740:	9001      	str	r0, [sp, #4]
1a001742:	2800      	cmp	r0, #0
1a001744:	d03d      	beq.n	1a0017c2 <__ssprint_r+0xd6>
1a001746:	4632      	mov	r2, r6
1a001748:	6921      	ldr	r1, [r4, #16]
1a00174a:	f000 fc69 	bl	1a002020 <memcpy>
1a00174e:	89a2      	ldrh	r2, [r4, #12]
1a001750:	9b01      	ldr	r3, [sp, #4]
1a001752:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
1a001756:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
1a00175a:	81a2      	strh	r2, [r4, #12]
1a00175c:	1998      	adds	r0, r3, r6
1a00175e:	eba8 0606 	sub.w	r6, r8, r6
1a001762:	60a6      	str	r6, [r4, #8]
1a001764:	f8c4 8014 	str.w	r8, [r4, #20]
1a001768:	6123      	str	r3, [r4, #16]
1a00176a:	6020      	str	r0, [r4, #0]
1a00176c:	46a8      	mov	r8, r5
1a00176e:	462e      	mov	r6, r5
1a001770:	4632      	mov	r2, r6
1a001772:	4659      	mov	r1, fp
1a001774:	f000 fb84 	bl	1a001e80 <memmove>
1a001778:	f8da 1008 	ldr.w	r1, [sl, #8]
1a00177c:	68a3      	ldr	r3, [r4, #8]
1a00177e:	6822      	ldr	r2, [r4, #0]
1a001780:	eba3 0308 	sub.w	r3, r3, r8
1a001784:	4432      	add	r2, r6
1a001786:	1b49      	subs	r1, r1, r5
1a001788:	60a3      	str	r3, [r4, #8]
1a00178a:	6022      	str	r2, [r4, #0]
1a00178c:	f8ca 1008 	str.w	r1, [sl, #8]
1a001790:	b349      	cbz	r1, 1a0017e6 <__ssprint_r+0xfa>
1a001792:	e9d7 b500 	ldrd	fp, r5, [r7]
1a001796:	3708      	adds	r7, #8
1a001798:	4698      	mov	r8, r3
1a00179a:	4610      	mov	r0, r2
1a00179c:	2d00      	cmp	r5, #0
1a00179e:	d0f8      	beq.n	1a001792 <__ssprint_r+0xa6>
1a0017a0:	429d      	cmp	r5, r3
1a0017a2:	461e      	mov	r6, r3
1a0017a4:	d2b2      	bcs.n	1a00170c <__ssprint_r+0x20>
1a0017a6:	46a8      	mov	r8, r5
1a0017a8:	462e      	mov	r6, r5
1a0017aa:	e7e1      	b.n	1a001770 <__ssprint_r+0x84>
1a0017ac:	4601      	mov	r1, r0
1a0017ae:	4648      	mov	r0, r9
1a0017b0:	f000 fcd0 	bl	1a002154 <_realloc_r>
1a0017b4:	4603      	mov	r3, r0
1a0017b6:	2800      	cmp	r0, #0
1a0017b8:	d1d0      	bne.n	1a00175c <__ssprint_r+0x70>
1a0017ba:	6921      	ldr	r1, [r4, #16]
1a0017bc:	4648      	mov	r0, r9
1a0017be:	f000 fb01 	bl	1a001dc4 <_free_r>
1a0017c2:	89a3      	ldrh	r3, [r4, #12]
1a0017c4:	220c      	movs	r2, #12
1a0017c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1a0017ca:	f8c9 2000 	str.w	r2, [r9]
1a0017ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a0017d2:	81a3      	strh	r3, [r4, #12]
1a0017d4:	2200      	movs	r2, #0
1a0017d6:	2300      	movs	r3, #0
1a0017d8:	f8ca 2008 	str.w	r2, [sl, #8]
1a0017dc:	f8ca 3004 	str.w	r3, [sl, #4]
1a0017e0:	b003      	add	sp, #12
1a0017e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0017e6:	2000      	movs	r0, #0
1a0017e8:	2300      	movs	r3, #0
1a0017ea:	f8ca 3004 	str.w	r3, [sl, #4]
1a0017ee:	b003      	add	sp, #12
1a0017f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a0017f4 <_svfiprintf_r>:
1a0017f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0017f8:	461c      	mov	r4, r3
1a0017fa:	898b      	ldrh	r3, [r1, #12]
1a0017fc:	061d      	lsls	r5, r3, #24
1a0017fe:	b09d      	sub	sp, #116	@ 0x74
1a001800:	4688      	mov	r8, r1
1a001802:	4681      	mov	r9, r0
1a001804:	4693      	mov	fp, r2
1a001806:	d503      	bpl.n	1a001810 <_svfiprintf_r+0x1c>
1a001808:	690b      	ldr	r3, [r1, #16]
1a00180a:	2b00      	cmp	r3, #0
1a00180c:	f000 80f1 	beq.w	1a0019f2 <_svfiprintf_r+0x1fe>
1a001810:	2300      	movs	r3, #0
1a001812:	9309      	str	r3, [sp, #36]	@ 0x24
1a001814:	f243 0320 	movw	r3, #12320	@ 0x3020
1a001818:	f8ad 3029 	strh.w	r3, [sp, #41]	@ 0x29
1a00181c:	f89b 3000 	ldrb.w	r3, [fp]
1a001820:	4d7d      	ldr	r5, [pc, #500]	@ (1a001a18 <_svfiprintf_r+0x224>)
1a001822:	9403      	str	r4, [sp, #12]
1a001824:	2601      	movs	r6, #1
1a001826:	2b00      	cmp	r3, #0
1a001828:	d073      	beq.n	1a001912 <_svfiprintf_r+0x11e>
1a00182a:	46da      	mov	sl, fp
1a00182c:	e003      	b.n	1a001836 <_svfiprintf_r+0x42>
1a00182e:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
1a001832:	2b00      	cmp	r3, #0
1a001834:	d075      	beq.n	1a001922 <_svfiprintf_r+0x12e>
1a001836:	2b25      	cmp	r3, #37	@ 0x25
1a001838:	d1f9      	bne.n	1a00182e <_svfiprintf_r+0x3a>
1a00183a:	ebba 040b 	subs.w	r4, sl, fp
1a00183e:	d173      	bne.n	1a001928 <_svfiprintf_r+0x134>
1a001840:	f89a 2000 	ldrb.w	r2, [sl]
1a001844:	2a00      	cmp	r2, #0
1a001846:	d064      	beq.n	1a001912 <_svfiprintf_r+0x11e>
1a001848:	2300      	movs	r3, #0
1a00184a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
1a00184e:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a001852:	f10a 0a01 	add.w	sl, sl, #1
1a001856:	9304      	str	r3, [sp, #16]
1a001858:	9307      	str	r3, [sp, #28]
1a00185a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
1a00185e:	931a      	str	r3, [sp, #104]	@ 0x68
1a001860:	e005      	b.n	1a00186e <_svfiprintf_r+0x7a>
1a001862:	9a04      	ldr	r2, [sp, #16]
1a001864:	fa06 f303 	lsl.w	r3, r6, r3
1a001868:	431a      	orrs	r2, r3
1a00186a:	9204      	str	r2, [sp, #16]
1a00186c:	46a2      	mov	sl, r4
1a00186e:	4654      	mov	r4, sl
1a001870:	2205      	movs	r2, #5
1a001872:	f814 1b01 	ldrb.w	r1, [r4], #1
1a001876:	4628      	mov	r0, r5
1a001878:	f000 fb82 	bl	1a001f80 <memchr>
1a00187c:	46a3      	mov	fp, r4
1a00187e:	1b43      	subs	r3, r0, r5
1a001880:	2800      	cmp	r0, #0
1a001882:	d1ee      	bne.n	1a001862 <_svfiprintf_r+0x6e>
1a001884:	9b04      	ldr	r3, [sp, #16]
1a001886:	06d8      	lsls	r0, r3, #27
1a001888:	bf44      	itt	mi
1a00188a:	2220      	movmi	r2, #32
1a00188c:	f88d 2053 	strbmi.w	r2, [sp, #83]	@ 0x53
1a001890:	0719      	lsls	r1, r3, #28
1a001892:	f89a 1000 	ldrb.w	r1, [sl]
1a001896:	bf44      	itt	mi
1a001898:	222b      	movmi	r2, #43	@ 0x2b
1a00189a:	f88d 2053 	strbmi.w	r2, [sp, #83]	@ 0x53
1a00189e:	292a      	cmp	r1, #42	@ 0x2a
1a0018a0:	d150      	bne.n	1a001944 <_svfiprintf_r+0x150>
1a0018a2:	9a03      	ldr	r2, [sp, #12]
1a0018a4:	6811      	ldr	r1, [r2, #0]
1a0018a6:	3204      	adds	r2, #4
1a0018a8:	2900      	cmp	r1, #0
1a0018aa:	9203      	str	r2, [sp, #12]
1a0018ac:	db7c      	blt.n	1a0019a8 <_svfiprintf_r+0x1b4>
1a0018ae:	9107      	str	r1, [sp, #28]
1a0018b0:	f89a 1001 	ldrb.w	r1, [sl, #1]
1a0018b4:	292e      	cmp	r1, #46	@ 0x2e
1a0018b6:	d05b      	beq.n	1a001970 <_svfiprintf_r+0x17c>
1a0018b8:	4c58      	ldr	r4, [pc, #352]	@ (1a001a1c <_svfiprintf_r+0x228>)
1a0018ba:	2203      	movs	r2, #3
1a0018bc:	4620      	mov	r0, r4
1a0018be:	f000 fb5f 	bl	1a001f80 <memchr>
1a0018c2:	b138      	cbz	r0, 1a0018d4 <_svfiprintf_r+0xe0>
1a0018c4:	9b04      	ldr	r3, [sp, #16]
1a0018c6:	1b00      	subs	r0, r0, r4
1a0018c8:	2240      	movs	r2, #64	@ 0x40
1a0018ca:	4082      	lsls	r2, r0
1a0018cc:	4313      	orrs	r3, r2
1a0018ce:	f10b 0b01 	add.w	fp, fp, #1
1a0018d2:	9304      	str	r3, [sp, #16]
1a0018d4:	f81b 1b01 	ldrb.w	r1, [fp], #1
1a0018d8:	4851      	ldr	r0, [pc, #324]	@ (1a001a20 <_svfiprintf_r+0x22c>)
1a0018da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
1a0018de:	2206      	movs	r2, #6
1a0018e0:	f000 fb4e 	bl	1a001f80 <memchr>
1a0018e4:	2800      	cmp	r0, #0
1a0018e6:	d065      	beq.n	1a0019b4 <_svfiprintf_r+0x1c0>
1a0018e8:	4b4e      	ldr	r3, [pc, #312]	@ (1a001a24 <_svfiprintf_r+0x230>)
1a0018ea:	2b00      	cmp	r3, #0
1a0018ec:	d055      	beq.n	1a00199a <_svfiprintf_r+0x1a6>
1a0018ee:	aa03      	add	r2, sp, #12
1a0018f0:	9200      	str	r2, [sp, #0]
1a0018f2:	4b4d      	ldr	r3, [pc, #308]	@ (1a001a28 <_svfiprintf_r+0x234>)
1a0018f4:	4642      	mov	r2, r8
1a0018f6:	a904      	add	r1, sp, #16
1a0018f8:	4648      	mov	r0, r9
1a0018fa:	f3af 8000 	nop.w
1a0018fe:	4607      	mov	r7, r0
1a001900:	1c7a      	adds	r2, r7, #1
1a001902:	d006      	beq.n	1a001912 <_svfiprintf_r+0x11e>
1a001904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1a001906:	443b      	add	r3, r7
1a001908:	9309      	str	r3, [sp, #36]	@ 0x24
1a00190a:	f89b 3000 	ldrb.w	r3, [fp]
1a00190e:	2b00      	cmp	r3, #0
1a001910:	d18b      	bne.n	1a00182a <_svfiprintf_r+0x36>
1a001912:	f8b8 300c 	ldrh.w	r3, [r8, #12]
1a001916:	065b      	lsls	r3, r3, #25
1a001918:	d47a      	bmi.n	1a001a10 <_svfiprintf_r+0x21c>
1a00191a:	9809      	ldr	r0, [sp, #36]	@ 0x24
1a00191c:	b01d      	add	sp, #116	@ 0x74
1a00191e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001922:	ebba 040b 	subs.w	r4, sl, fp
1a001926:	d0f4      	beq.n	1a001912 <_svfiprintf_r+0x11e>
1a001928:	4623      	mov	r3, r4
1a00192a:	465a      	mov	r2, fp
1a00192c:	4641      	mov	r1, r8
1a00192e:	4648      	mov	r0, r9
1a001930:	f7ff fe7c 	bl	1a00162c <__ssputs_r>
1a001934:	3001      	adds	r0, #1
1a001936:	d0ec      	beq.n	1a001912 <_svfiprintf_r+0x11e>
1a001938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1a00193a:	f89a 2000 	ldrb.w	r2, [sl]
1a00193e:	4423      	add	r3, r4
1a001940:	9309      	str	r3, [sp, #36]	@ 0x24
1a001942:	e77f      	b.n	1a001844 <_svfiprintf_r+0x50>
1a001944:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
1a001948:	2a09      	cmp	r2, #9
1a00194a:	bf88      	it	hi
1a00194c:	46d3      	movhi	fp, sl
1a00194e:	d8b1      	bhi.n	1a0018b4 <_svfiprintf_r+0xc0>
1a001950:	9b07      	ldr	r3, [sp, #28]
1a001952:	e000      	b.n	1a001956 <_svfiprintf_r+0x162>
1a001954:	3401      	adds	r4, #1
1a001956:	7821      	ldrb	r1, [r4, #0]
1a001958:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a00195c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
1a001960:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
1a001964:	2a09      	cmp	r2, #9
1a001966:	d9f5      	bls.n	1a001954 <_svfiprintf_r+0x160>
1a001968:	292e      	cmp	r1, #46	@ 0x2e
1a00196a:	9307      	str	r3, [sp, #28]
1a00196c:	46a3      	mov	fp, r4
1a00196e:	d1a3      	bne.n	1a0018b8 <_svfiprintf_r+0xc4>
1a001970:	f89b 1001 	ldrb.w	r1, [fp, #1]
1a001974:	292a      	cmp	r1, #42	@ 0x2a
1a001976:	d127      	bne.n	1a0019c8 <_svfiprintf_r+0x1d4>
1a001978:	9b03      	ldr	r3, [sp, #12]
1a00197a:	f89b 1002 	ldrb.w	r1, [fp, #2]
1a00197e:	681a      	ldr	r2, [r3, #0]
1a001980:	9205      	str	r2, [sp, #20]
1a001982:	3304      	adds	r3, #4
1a001984:	2a00      	cmp	r2, #0
1a001986:	f10b 0002 	add.w	r0, fp, #2
1a00198a:	9303      	str	r3, [sp, #12]
1a00198c:	bfb8      	it	lt
1a00198e:	f04f 33ff 	movlt.w	r3, #4294967295	@ 0xffffffff
1a001992:	4683      	mov	fp, r0
1a001994:	bfb8      	it	lt
1a001996:	9305      	strlt	r3, [sp, #20]
1a001998:	e78e      	b.n	1a0018b8 <_svfiprintf_r+0xc4>
1a00199a:	9b03      	ldr	r3, [sp, #12]
1a00199c:	3307      	adds	r3, #7
1a00199e:	f023 0307 	bic.w	r3, r3, #7
1a0019a2:	3308      	adds	r3, #8
1a0019a4:	9303      	str	r3, [sp, #12]
1a0019a6:	e7ad      	b.n	1a001904 <_svfiprintf_r+0x110>
1a0019a8:	4249      	negs	r1, r1
1a0019aa:	f043 0302 	orr.w	r3, r3, #2
1a0019ae:	9107      	str	r1, [sp, #28]
1a0019b0:	9304      	str	r3, [sp, #16]
1a0019b2:	e77d      	b.n	1a0018b0 <_svfiprintf_r+0xbc>
1a0019b4:	aa03      	add	r2, sp, #12
1a0019b6:	9200      	str	r2, [sp, #0]
1a0019b8:	4b1b      	ldr	r3, [pc, #108]	@ (1a001a28 <_svfiprintf_r+0x234>)
1a0019ba:	4642      	mov	r2, r8
1a0019bc:	a904      	add	r1, sp, #16
1a0019be:	4648      	mov	r0, r9
1a0019c0:	f000 fc8c 	bl	1a0022dc <_printf_i>
1a0019c4:	4607      	mov	r7, r0
1a0019c6:	e79b      	b.n	1a001900 <_svfiprintf_r+0x10c>
1a0019c8:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
1a0019cc:	2300      	movs	r3, #0
1a0019ce:	2a09      	cmp	r2, #9
1a0019d0:	9305      	str	r3, [sp, #20]
1a0019d2:	f10b 0b01 	add.w	fp, fp, #1
1a0019d6:	f63f af6f 	bhi.w	1a0018b8 <_svfiprintf_r+0xc4>
1a0019da:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
1a0019de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0019e2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
1a0019e6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
1a0019ea:	2a09      	cmp	r2, #9
1a0019ec:	d9f5      	bls.n	1a0019da <_svfiprintf_r+0x1e6>
1a0019ee:	9305      	str	r3, [sp, #20]
1a0019f0:	e762      	b.n	1a0018b8 <_svfiprintf_r+0xc4>
1a0019f2:	2140      	movs	r1, #64	@ 0x40
1a0019f4:	f000 f966 	bl	1a001cc4 <_malloc_r>
1a0019f8:	f8c8 0000 	str.w	r0, [r8]
1a0019fc:	f8c8 0010 	str.w	r0, [r8, #16]
1a001a00:	b118      	cbz	r0, 1a001a0a <_svfiprintf_r+0x216>
1a001a02:	2340      	movs	r3, #64	@ 0x40
1a001a04:	f8c8 3014 	str.w	r3, [r8, #20]
1a001a08:	e702      	b.n	1a001810 <_svfiprintf_r+0x1c>
1a001a0a:	230c      	movs	r3, #12
1a001a0c:	f8c9 3000 	str.w	r3, [r9]
1a001a10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a001a14:	e782      	b.n	1a00191c <_svfiprintf_r+0x128>
1a001a16:	bf00      	nop
1a001a18:	1a003808 	.word	0x1a003808
1a001a1c:	1a003810 	.word	0x1a003810
1a001a20:	1a003814 	.word	0x1a003814
1a001a24:	00000000 	.word	0x00000000
1a001a28:	1a00162d 	.word	0x1a00162d

1a001a2c <siscanf>:
1a001a2c:	b40e      	push	{r1, r2, r3}
1a001a2e:	b570      	push	{r4, r5, r6, lr}
1a001a30:	b09d      	sub	sp, #116	@ 0x74
1a001a32:	ac21      	add	r4, sp, #132	@ 0x84
1a001a34:	2500      	movs	r5, #0
1a001a36:	f44f 7201 	mov.w	r2, #516	@ 0x204
1a001a3a:	f854 6b04 	ldr.w	r6, [r4], #4
1a001a3e:	f8ad 2014 	strh.w	r2, [sp, #20]
1a001a42:	951b      	str	r5, [sp, #108]	@ 0x6c
1a001a44:	9002      	str	r0, [sp, #8]
1a001a46:	9006      	str	r0, [sp, #24]
1a001a48:	f000 f85a 	bl	1a001b00 <strlen>
1a001a4c:	4b0b      	ldr	r3, [pc, #44]	@ (1a001a7c <siscanf+0x50>)
1a001a4e:	930b      	str	r3, [sp, #44]	@ 0x2c
1a001a50:	4b0b      	ldr	r3, [pc, #44]	@ (1a001a80 <siscanf+0x54>)
1a001a52:	9003      	str	r0, [sp, #12]
1a001a54:	f64f 71ff 	movw	r1, #65535	@ 0xffff
1a001a58:	9007      	str	r0, [sp, #28]
1a001a5a:	f8ad 1016 	strh.w	r1, [sp, #22]
1a001a5e:	6818      	ldr	r0, [r3, #0]
1a001a60:	950f      	str	r5, [sp, #60]	@ 0x3c
1a001a62:	4632      	mov	r2, r6
1a001a64:	4623      	mov	r3, r4
1a001a66:	a902      	add	r1, sp, #8
1a001a68:	9514      	str	r5, [sp, #80]	@ 0x50
1a001a6a:	9401      	str	r4, [sp, #4]
1a001a6c:	f000 feb2 	bl	1a0027d4 <__ssvfiscanf_r>
1a001a70:	b01d      	add	sp, #116	@ 0x74
1a001a72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
1a001a76:	b003      	add	sp, #12
1a001a78:	4770      	bx	lr
1a001a7a:	bf00      	nop
1a001a7c:	1a0026a1 	.word	0x1a0026a1
1a001a80:	10000000 	.word	0x10000000

1a001a84 <_siscanf_r>:
1a001a84:	b40c      	push	{r2, r3}
1a001a86:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001a88:	b09d      	sub	sp, #116	@ 0x74
1a001a8a:	ac22      	add	r4, sp, #136	@ 0x88
1a001a8c:	2500      	movs	r5, #0
1a001a8e:	f44f 7301 	mov.w	r3, #516	@ 0x204
1a001a92:	4606      	mov	r6, r0
1a001a94:	4608      	mov	r0, r1
1a001a96:	f854 7b04 	ldr.w	r7, [r4], #4
1a001a9a:	f8ad 3014 	strh.w	r3, [sp, #20]
1a001a9e:	9102      	str	r1, [sp, #8]
1a001aa0:	9106      	str	r1, [sp, #24]
1a001aa2:	951b      	str	r5, [sp, #108]	@ 0x6c
1a001aa4:	f000 f82c 	bl	1a001b00 <strlen>
1a001aa8:	4603      	mov	r3, r0
1a001aaa:	9303      	str	r3, [sp, #12]
1a001aac:	9307      	str	r3, [sp, #28]
1a001aae:	4b0a      	ldr	r3, [pc, #40]	@ (1a001ad8 <_siscanf_r+0x54>)
1a001ab0:	930b      	str	r3, [sp, #44]	@ 0x2c
1a001ab2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
1a001ab6:	f8ad 3016 	strh.w	r3, [sp, #22]
1a001aba:	463a      	mov	r2, r7
1a001abc:	4630      	mov	r0, r6
1a001abe:	4623      	mov	r3, r4
1a001ac0:	a902      	add	r1, sp, #8
1a001ac2:	950f      	str	r5, [sp, #60]	@ 0x3c
1a001ac4:	9514      	str	r5, [sp, #80]	@ 0x50
1a001ac6:	9401      	str	r4, [sp, #4]
1a001ac8:	f000 fe84 	bl	1a0027d4 <__ssvfiscanf_r>
1a001acc:	b01d      	add	sp, #116	@ 0x74
1a001ace:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
1a001ad2:	b002      	add	sp, #8
1a001ad4:	4770      	bx	lr
1a001ad6:	bf00      	nop
1a001ad8:	1a0026a1 	.word	0x1a0026a1
	...

1a001b00 <strlen>:
1a001b00:	b430      	push	{r4, r5}
1a001b02:	f890 f000 	pld	[r0]
1a001b06:	f020 0107 	bic.w	r1, r0, #7
1a001b0a:	f06f 0c00 	mvn.w	ip, #0
1a001b0e:	f010 0407 	ands.w	r4, r0, #7
1a001b12:	f891 f020 	pld	[r1, #32]
1a001b16:	f040 8048 	bne.w	1a001baa <strlen+0xaa>
1a001b1a:	f04f 0400 	mov.w	r4, #0
1a001b1e:	f06f 0007 	mvn.w	r0, #7
1a001b22:	e9d1 2300 	ldrd	r2, r3, [r1]
1a001b26:	f891 f040 	pld	[r1, #64]	@ 0x40
1a001b2a:	f100 0008 	add.w	r0, r0, #8
1a001b2e:	fa82 f24c 	uadd8	r2, r2, ip
1a001b32:	faa4 f28c 	sel	r2, r4, ip
1a001b36:	fa83 f34c 	uadd8	r3, r3, ip
1a001b3a:	faa2 f38c 	sel	r3, r2, ip
1a001b3e:	bb4b      	cbnz	r3, 1a001b94 <strlen+0x94>
1a001b40:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
1a001b44:	fa82 f24c 	uadd8	r2, r2, ip
1a001b48:	f100 0008 	add.w	r0, r0, #8
1a001b4c:	faa4 f28c 	sel	r2, r4, ip
1a001b50:	fa83 f34c 	uadd8	r3, r3, ip
1a001b54:	faa2 f38c 	sel	r3, r2, ip
1a001b58:	b9e3      	cbnz	r3, 1a001b94 <strlen+0x94>
1a001b5a:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
1a001b5e:	fa82 f24c 	uadd8	r2, r2, ip
1a001b62:	f100 0008 	add.w	r0, r0, #8
1a001b66:	faa4 f28c 	sel	r2, r4, ip
1a001b6a:	fa83 f34c 	uadd8	r3, r3, ip
1a001b6e:	faa2 f38c 	sel	r3, r2, ip
1a001b72:	b97b      	cbnz	r3, 1a001b94 <strlen+0x94>
1a001b74:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
1a001b78:	f101 0120 	add.w	r1, r1, #32
1a001b7c:	fa82 f24c 	uadd8	r2, r2, ip
1a001b80:	f100 0008 	add.w	r0, r0, #8
1a001b84:	faa4 f28c 	sel	r2, r4, ip
1a001b88:	fa83 f34c 	uadd8	r3, r3, ip
1a001b8c:	faa2 f38c 	sel	r3, r2, ip
1a001b90:	2b00      	cmp	r3, #0
1a001b92:	d0c6      	beq.n	1a001b22 <strlen+0x22>
1a001b94:	2a00      	cmp	r2, #0
1a001b96:	bf04      	itt	eq
1a001b98:	3004      	addeq	r0, #4
1a001b9a:	461a      	moveq	r2, r3
1a001b9c:	ba12      	rev	r2, r2
1a001b9e:	fab2 f282 	clz	r2, r2
1a001ba2:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
1a001ba6:	bc30      	pop	{r4, r5}
1a001ba8:	4770      	bx	lr
1a001baa:	e9d1 2300 	ldrd	r2, r3, [r1]
1a001bae:	f004 0503 	and.w	r5, r4, #3
1a001bb2:	f1c4 0000 	rsb	r0, r4, #0
1a001bb6:	ea4f 05c5 	mov.w	r5, r5, lsl #3
1a001bba:	f014 0f04 	tst.w	r4, #4
1a001bbe:	f891 f040 	pld	[r1, #64]	@ 0x40
1a001bc2:	fa0c f505 	lsl.w	r5, ip, r5
1a001bc6:	ea62 0205 	orn	r2, r2, r5
1a001bca:	bf1c      	itt	ne
1a001bcc:	ea63 0305 	ornne	r3, r3, r5
1a001bd0:	4662      	movne	r2, ip
1a001bd2:	f04f 0400 	mov.w	r4, #0
1a001bd6:	e7aa      	b.n	1a001b2e <strlen+0x2e>

1a001bd8 <memset>:
1a001bd8:	0783      	lsls	r3, r0, #30
1a001bda:	b530      	push	{r4, r5, lr}
1a001bdc:	d047      	beq.n	1a001c6e <memset+0x96>
1a001bde:	1e54      	subs	r4, r2, #1
1a001be0:	2a00      	cmp	r2, #0
1a001be2:	d03e      	beq.n	1a001c62 <memset+0x8a>
1a001be4:	b2ca      	uxtb	r2, r1
1a001be6:	4603      	mov	r3, r0
1a001be8:	e001      	b.n	1a001bee <memset+0x16>
1a001bea:	3c01      	subs	r4, #1
1a001bec:	d339      	bcc.n	1a001c62 <memset+0x8a>
1a001bee:	f803 2b01 	strb.w	r2, [r3], #1
1a001bf2:	079d      	lsls	r5, r3, #30
1a001bf4:	d1f9      	bne.n	1a001bea <memset+0x12>
1a001bf6:	2c03      	cmp	r4, #3
1a001bf8:	d92c      	bls.n	1a001c54 <memset+0x7c>
1a001bfa:	b2cd      	uxtb	r5, r1
1a001bfc:	eb05 2505 	add.w	r5, r5, r5, lsl #8
1a001c00:	2c0f      	cmp	r4, #15
1a001c02:	eb05 4505 	add.w	r5, r5, r5, lsl #16
1a001c06:	d935      	bls.n	1a001c74 <memset+0x9c>
1a001c08:	f1a4 0210 	sub.w	r2, r4, #16
1a001c0c:	f022 0c0f 	bic.w	ip, r2, #15
1a001c10:	f103 0e10 	add.w	lr, r3, #16
1a001c14:	44e6      	add	lr, ip
1a001c16:	ea4f 1c12 	mov.w	ip, r2, lsr #4
1a001c1a:	461a      	mov	r2, r3
1a001c1c:	e9c2 5500 	strd	r5, r5, [r2]
1a001c20:	e9c2 5502 	strd	r5, r5, [r2, #8]
1a001c24:	3210      	adds	r2, #16
1a001c26:	4572      	cmp	r2, lr
1a001c28:	d1f8      	bne.n	1a001c1c <memset+0x44>
1a001c2a:	f10c 0201 	add.w	r2, ip, #1
1a001c2e:	f014 0f0c 	tst.w	r4, #12
1a001c32:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1a001c36:	f004 0c0f 	and.w	ip, r4, #15
1a001c3a:	d013      	beq.n	1a001c64 <memset+0x8c>
1a001c3c:	f1ac 0304 	sub.w	r3, ip, #4
1a001c40:	f023 0303 	bic.w	r3, r3, #3
1a001c44:	3304      	adds	r3, #4
1a001c46:	4413      	add	r3, r2
1a001c48:	f842 5b04 	str.w	r5, [r2], #4
1a001c4c:	4293      	cmp	r3, r2
1a001c4e:	d1fb      	bne.n	1a001c48 <memset+0x70>
1a001c50:	f00c 0403 	and.w	r4, ip, #3
1a001c54:	b12c      	cbz	r4, 1a001c62 <memset+0x8a>
1a001c56:	b2c9      	uxtb	r1, r1
1a001c58:	441c      	add	r4, r3
1a001c5a:	f803 1b01 	strb.w	r1, [r3], #1
1a001c5e:	42a3      	cmp	r3, r4
1a001c60:	d1fb      	bne.n	1a001c5a <memset+0x82>
1a001c62:	bd30      	pop	{r4, r5, pc}
1a001c64:	4664      	mov	r4, ip
1a001c66:	4613      	mov	r3, r2
1a001c68:	2c00      	cmp	r4, #0
1a001c6a:	d1f4      	bne.n	1a001c56 <memset+0x7e>
1a001c6c:	e7f9      	b.n	1a001c62 <memset+0x8a>
1a001c6e:	4603      	mov	r3, r0
1a001c70:	4614      	mov	r4, r2
1a001c72:	e7c0      	b.n	1a001bf6 <memset+0x1e>
1a001c74:	461a      	mov	r2, r3
1a001c76:	46a4      	mov	ip, r4
1a001c78:	e7e0      	b.n	1a001c3c <memset+0x64>
1a001c7a:	bf00      	nop

1a001c7c <sbrk_aligned>:
1a001c7c:	b570      	push	{r4, r5, r6, lr}
1a001c7e:	4e10      	ldr	r6, [pc, #64]	@ (1a001cc0 <sbrk_aligned+0x44>)
1a001c80:	6833      	ldr	r3, [r6, #0]
1a001c82:	4605      	mov	r5, r0
1a001c84:	460c      	mov	r4, r1
1a001c86:	b1b3      	cbz	r3, 1a001cb6 <sbrk_aligned+0x3a>
1a001c88:	4621      	mov	r1, r4
1a001c8a:	4628      	mov	r0, r5
1a001c8c:	f7ff faf2 	bl	1a001274 <_sbrk_r>
1a001c90:	1c43      	adds	r3, r0, #1
1a001c92:	d00c      	beq.n	1a001cae <sbrk_aligned+0x32>
1a001c94:	1cc4      	adds	r4, r0, #3
1a001c96:	f024 0403 	bic.w	r4, r4, #3
1a001c9a:	42a0      	cmp	r0, r4
1a001c9c:	d005      	beq.n	1a001caa <sbrk_aligned+0x2e>
1a001c9e:	1a21      	subs	r1, r4, r0
1a001ca0:	4628      	mov	r0, r5
1a001ca2:	f7ff fae7 	bl	1a001274 <_sbrk_r>
1a001ca6:	3001      	adds	r0, #1
1a001ca8:	d001      	beq.n	1a001cae <sbrk_aligned+0x32>
1a001caa:	4620      	mov	r0, r4
1a001cac:	bd70      	pop	{r4, r5, r6, pc}
1a001cae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
1a001cb2:	4620      	mov	r0, r4
1a001cb4:	bd70      	pop	{r4, r5, r6, pc}
1a001cb6:	4619      	mov	r1, r3
1a001cb8:	f7ff fadc 	bl	1a001274 <_sbrk_r>
1a001cbc:	6030      	str	r0, [r6, #0]
1a001cbe:	e7e3      	b.n	1a001c88 <sbrk_aligned+0xc>
1a001cc0:	100000bc 	.word	0x100000bc

1a001cc4 <_malloc_r>:
1a001cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001cc8:	1ccd      	adds	r5, r1, #3
1a001cca:	f025 0503 	bic.w	r5, r5, #3
1a001cce:	3508      	adds	r5, #8
1a001cd0:	2d0c      	cmp	r5, #12
1a001cd2:	bf38      	it	cc
1a001cd4:	250c      	movcc	r5, #12
1a001cd6:	2d00      	cmp	r5, #0
1a001cd8:	4606      	mov	r6, r0
1a001cda:	db18      	blt.n	1a001d0e <_malloc_r+0x4a>
1a001cdc:	42a9      	cmp	r1, r5
1a001cde:	d816      	bhi.n	1a001d0e <_malloc_r+0x4a>
1a001ce0:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 1a001dc0 <_malloc_r+0xfc>
1a001ce4:	f000 fc3c 	bl	1a002560 <__malloc_lock>
1a001ce8:	f8d8 2004 	ldr.w	r2, [r8, #4]
1a001cec:	b1a2      	cbz	r2, 1a001d18 <_malloc_r+0x54>
1a001cee:	4614      	mov	r4, r2
1a001cf0:	e003      	b.n	1a001cfa <_malloc_r+0x36>
1a001cf2:	6863      	ldr	r3, [r4, #4]
1a001cf4:	4622      	mov	r2, r4
1a001cf6:	b17b      	cbz	r3, 1a001d18 <_malloc_r+0x54>
1a001cf8:	461c      	mov	r4, r3
1a001cfa:	6823      	ldr	r3, [r4, #0]
1a001cfc:	1b5b      	subs	r3, r3, r5
1a001cfe:	d4f8      	bmi.n	1a001cf2 <_malloc_r+0x2e>
1a001d00:	2b0b      	cmp	r3, #11
1a001d02:	d81f      	bhi.n	1a001d44 <_malloc_r+0x80>
1a001d04:	4294      	cmp	r4, r2
1a001d06:	6863      	ldr	r3, [r4, #4]
1a001d08:	d054      	beq.n	1a001db4 <_malloc_r+0xf0>
1a001d0a:	6053      	str	r3, [r2, #4]
1a001d0c:	e00c      	b.n	1a001d28 <_malloc_r+0x64>
1a001d0e:	230c      	movs	r3, #12
1a001d10:	6033      	str	r3, [r6, #0]
1a001d12:	2000      	movs	r0, #0
1a001d14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001d18:	4629      	mov	r1, r5
1a001d1a:	4630      	mov	r0, r6
1a001d1c:	f7ff ffae 	bl	1a001c7c <sbrk_aligned>
1a001d20:	1c43      	adds	r3, r0, #1
1a001d22:	4604      	mov	r4, r0
1a001d24:	d019      	beq.n	1a001d5a <_malloc_r+0x96>
1a001d26:	6005      	str	r5, [r0, #0]
1a001d28:	4630      	mov	r0, r6
1a001d2a:	f000 fc1b 	bl	1a002564 <__malloc_unlock>
1a001d2e:	f104 000b 	add.w	r0, r4, #11
1a001d32:	1d23      	adds	r3, r4, #4
1a001d34:	f020 0007 	bic.w	r0, r0, #7
1a001d38:	1ac2      	subs	r2, r0, r3
1a001d3a:	bf1c      	itt	ne
1a001d3c:	1a1b      	subne	r3, r3, r0
1a001d3e:	50a3      	strne	r3, [r4, r2]
1a001d40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001d44:	1961      	adds	r1, r4, r5
1a001d46:	4294      	cmp	r4, r2
1a001d48:	6025      	str	r5, [r4, #0]
1a001d4a:	bf14      	ite	ne
1a001d4c:	6051      	strne	r1, [r2, #4]
1a001d4e:	f8c8 1004 	streq.w	r1, [r8, #4]
1a001d52:	5163      	str	r3, [r4, r5]
1a001d54:	6863      	ldr	r3, [r4, #4]
1a001d56:	604b      	str	r3, [r1, #4]
1a001d58:	e7e6      	b.n	1a001d28 <_malloc_r+0x64>
1a001d5a:	f8d8 7004 	ldr.w	r7, [r8, #4]
1a001d5e:	b31f      	cbz	r7, 1a001da8 <_malloc_r+0xe4>
1a001d60:	463c      	mov	r4, r7
1a001d62:	687f      	ldr	r7, [r7, #4]
1a001d64:	2f00      	cmp	r7, #0
1a001d66:	d1fb      	bne.n	1a001d60 <_malloc_r+0x9c>
1a001d68:	6823      	ldr	r3, [r4, #0]
1a001d6a:	4639      	mov	r1, r7
1a001d6c:	4630      	mov	r0, r6
1a001d6e:	eb04 0903 	add.w	r9, r4, r3
1a001d72:	f7ff fa7f 	bl	1a001274 <_sbrk_r>
1a001d76:	4581      	cmp	r9, r0
1a001d78:	d116      	bne.n	1a001da8 <_malloc_r+0xe4>
1a001d7a:	6823      	ldr	r3, [r4, #0]
1a001d7c:	1aed      	subs	r5, r5, r3
1a001d7e:	4629      	mov	r1, r5
1a001d80:	4630      	mov	r0, r6
1a001d82:	f7ff ff7b 	bl	1a001c7c <sbrk_aligned>
1a001d86:	3001      	adds	r0, #1
1a001d88:	d00e      	beq.n	1a001da8 <_malloc_r+0xe4>
1a001d8a:	6823      	ldr	r3, [r4, #0]
1a001d8c:	f8d8 2004 	ldr.w	r2, [r8, #4]
1a001d90:	442b      	add	r3, r5
1a001d92:	6023      	str	r3, [r4, #0]
1a001d94:	6853      	ldr	r3, [r2, #4]
1a001d96:	b183      	cbz	r3, 1a001dba <_malloc_r+0xf6>
1a001d98:	42a3      	cmp	r3, r4
1a001d9a:	d003      	beq.n	1a001da4 <_malloc_r+0xe0>
1a001d9c:	461a      	mov	r2, r3
1a001d9e:	685b      	ldr	r3, [r3, #4]
1a001da0:	429c      	cmp	r4, r3
1a001da2:	d1fb      	bne.n	1a001d9c <_malloc_r+0xd8>
1a001da4:	2300      	movs	r3, #0
1a001da6:	e7b0      	b.n	1a001d0a <_malloc_r+0x46>
1a001da8:	230c      	movs	r3, #12
1a001daa:	6033      	str	r3, [r6, #0]
1a001dac:	4630      	mov	r0, r6
1a001dae:	f000 fbd9 	bl	1a002564 <__malloc_unlock>
1a001db2:	e7ae      	b.n	1a001d12 <_malloc_r+0x4e>
1a001db4:	f8c8 3004 	str.w	r3, [r8, #4]
1a001db8:	e7b6      	b.n	1a001d28 <_malloc_r+0x64>
1a001dba:	f8c8 7004 	str.w	r7, [r8, #4]
1a001dbe:	e7b3      	b.n	1a001d28 <_malloc_r+0x64>
1a001dc0:	100000bc 	.word	0x100000bc

1a001dc4 <_free_r>:
1a001dc4:	2900      	cmp	r1, #0
1a001dc6:	d050      	beq.n	1a001e6a <_free_r+0xa6>
1a001dc8:	b538      	push	{r3, r4, r5, lr}
1a001dca:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a001dce:	1f0c      	subs	r4, r1, #4
1a001dd0:	2b00      	cmp	r3, #0
1a001dd2:	bfb8      	it	lt
1a001dd4:	18e4      	addlt	r4, r4, r3
1a001dd6:	4605      	mov	r5, r0
1a001dd8:	f000 fbc2 	bl	1a002560 <__malloc_lock>
1a001ddc:	4a27      	ldr	r2, [pc, #156]	@ (1a001e7c <_free_r+0xb8>)
1a001dde:	6813      	ldr	r3, [r2, #0]
1a001de0:	b12b      	cbz	r3, 1a001dee <_free_r+0x2a>
1a001de2:	42a3      	cmp	r3, r4
1a001de4:	d90c      	bls.n	1a001e00 <_free_r+0x3c>
1a001de6:	6821      	ldr	r1, [r4, #0]
1a001de8:	1860      	adds	r0, r4, r1
1a001dea:	4283      	cmp	r3, r0
1a001dec:	d02c      	beq.n	1a001e48 <_free_r+0x84>
1a001dee:	6063      	str	r3, [r4, #4]
1a001df0:	4628      	mov	r0, r5
1a001df2:	6014      	str	r4, [r2, #0]
1a001df4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a001df8:	f000 bbb4 	b.w	1a002564 <__malloc_unlock>
1a001dfc:	42a3      	cmp	r3, r4
1a001dfe:	d80f      	bhi.n	1a001e20 <_free_r+0x5c>
1a001e00:	461a      	mov	r2, r3
1a001e02:	685b      	ldr	r3, [r3, #4]
1a001e04:	2b00      	cmp	r3, #0
1a001e06:	d1f9      	bne.n	1a001dfc <_free_r+0x38>
1a001e08:	6811      	ldr	r1, [r2, #0]
1a001e0a:	1850      	adds	r0, r2, r1
1a001e0c:	4284      	cmp	r4, r0
1a001e0e:	d017      	beq.n	1a001e40 <_free_r+0x7c>
1a001e10:	d32c      	bcc.n	1a001e6c <_free_r+0xa8>
1a001e12:	6063      	str	r3, [r4, #4]
1a001e14:	6054      	str	r4, [r2, #4]
1a001e16:	4628      	mov	r0, r5
1a001e18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a001e1c:	f000 bba2 	b.w	1a002564 <__malloc_unlock>
1a001e20:	6811      	ldr	r1, [r2, #0]
1a001e22:	1850      	adds	r0, r2, r1
1a001e24:	42a0      	cmp	r0, r4
1a001e26:	d014      	beq.n	1a001e52 <_free_r+0x8e>
1a001e28:	d820      	bhi.n	1a001e6c <_free_r+0xa8>
1a001e2a:	6821      	ldr	r1, [r4, #0]
1a001e2c:	1860      	adds	r0, r4, r1
1a001e2e:	4283      	cmp	r3, r0
1a001e30:	d1ef      	bne.n	1a001e12 <_free_r+0x4e>
1a001e32:	6818      	ldr	r0, [r3, #0]
1a001e34:	685b      	ldr	r3, [r3, #4]
1a001e36:	4408      	add	r0, r1
1a001e38:	e9c4 0300 	strd	r0, r3, [r4]
1a001e3c:	6054      	str	r4, [r2, #4]
1a001e3e:	e7ea      	b.n	1a001e16 <_free_r+0x52>
1a001e40:	6823      	ldr	r3, [r4, #0]
1a001e42:	440b      	add	r3, r1
1a001e44:	6013      	str	r3, [r2, #0]
1a001e46:	e7e6      	b.n	1a001e16 <_free_r+0x52>
1a001e48:	6818      	ldr	r0, [r3, #0]
1a001e4a:	685b      	ldr	r3, [r3, #4]
1a001e4c:	4408      	add	r0, r1
1a001e4e:	6020      	str	r0, [r4, #0]
1a001e50:	e7cd      	b.n	1a001dee <_free_r+0x2a>
1a001e52:	6820      	ldr	r0, [r4, #0]
1a001e54:	4401      	add	r1, r0
1a001e56:	1850      	adds	r0, r2, r1
1a001e58:	4283      	cmp	r3, r0
1a001e5a:	6011      	str	r1, [r2, #0]
1a001e5c:	d1db      	bne.n	1a001e16 <_free_r+0x52>
1a001e5e:	e9d3 0400 	ldrd	r0, r4, [r3]
1a001e62:	4401      	add	r1, r0
1a001e64:	e9c2 1400 	strd	r1, r4, [r2]
1a001e68:	e7d5      	b.n	1a001e16 <_free_r+0x52>
1a001e6a:	4770      	bx	lr
1a001e6c:	230c      	movs	r3, #12
1a001e6e:	602b      	str	r3, [r5, #0]
1a001e70:	4628      	mov	r0, r5
1a001e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a001e76:	f000 bb75 	b.w	1a002564 <__malloc_unlock>
1a001e7a:	bf00      	nop
1a001e7c:	100000c0 	.word	0x100000c0

1a001e80 <memmove>:
1a001e80:	4288      	cmp	r0, r1
1a001e82:	d90e      	bls.n	1a001ea2 <memmove+0x22>
1a001e84:	188b      	adds	r3, r1, r2
1a001e86:	4283      	cmp	r3, r0
1a001e88:	d90b      	bls.n	1a001ea2 <memmove+0x22>
1a001e8a:	eb00 0c02 	add.w	ip, r0, r2
1a001e8e:	2a00      	cmp	r2, #0
1a001e90:	d06e      	beq.n	1a001f70 <memmove+0xf0>
1a001e92:	4662      	mov	r2, ip
1a001e94:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
1a001e98:	f802 cd01 	strb.w	ip, [r2, #-1]!
1a001e9c:	4299      	cmp	r1, r3
1a001e9e:	d1f9      	bne.n	1a001e94 <memmove+0x14>
1a001ea0:	4770      	bx	lr
1a001ea2:	2a0f      	cmp	r2, #15
1a001ea4:	d80f      	bhi.n	1a001ec6 <memmove+0x46>
1a001ea6:	4603      	mov	r3, r0
1a001ea8:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
1a001eac:	2a00      	cmp	r2, #0
1a001eae:	d05f      	beq.n	1a001f70 <memmove+0xf0>
1a001eb0:	f10c 0c01 	add.w	ip, ip, #1
1a001eb4:	3b01      	subs	r3, #1
1a001eb6:	448c      	add	ip, r1
1a001eb8:	f811 2b01 	ldrb.w	r2, [r1], #1
1a001ebc:	f803 2f01 	strb.w	r2, [r3, #1]!
1a001ec0:	4561      	cmp	r1, ip
1a001ec2:	d1f9      	bne.n	1a001eb8 <memmove+0x38>
1a001ec4:	4770      	bx	lr
1a001ec6:	ea40 0301 	orr.w	r3, r0, r1
1a001eca:	079b      	lsls	r3, r3, #30
1a001ecc:	d151      	bne.n	1a001f72 <memmove+0xf2>
1a001ece:	f1a2 0310 	sub.w	r3, r2, #16
1a001ed2:	b570      	push	{r4, r5, r6, lr}
1a001ed4:	f101 0c20 	add.w	ip, r1, #32
1a001ed8:	f023 050f 	bic.w	r5, r3, #15
1a001edc:	f101 0e10 	add.w	lr, r1, #16
1a001ee0:	f100 0410 	add.w	r4, r0, #16
1a001ee4:	44ac      	add	ip, r5
1a001ee6:	091b      	lsrs	r3, r3, #4
1a001ee8:	f85e 5c10 	ldr.w	r5, [lr, #-16]
1a001eec:	f844 5c10 	str.w	r5, [r4, #-16]
1a001ef0:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
1a001ef4:	f844 5c0c 	str.w	r5, [r4, #-12]
1a001ef8:	f85e 5c08 	ldr.w	r5, [lr, #-8]
1a001efc:	f844 5c08 	str.w	r5, [r4, #-8]
1a001f00:	f85e 5c04 	ldr.w	r5, [lr, #-4]
1a001f04:	f844 5c04 	str.w	r5, [r4, #-4]
1a001f08:	f10e 0e10 	add.w	lr, lr, #16
1a001f0c:	45e6      	cmp	lr, ip
1a001f0e:	f104 0410 	add.w	r4, r4, #16
1a001f12:	d1e9      	bne.n	1a001ee8 <memmove+0x68>
1a001f14:	3301      	adds	r3, #1
1a001f16:	f012 0f0c 	tst.w	r2, #12
1a001f1a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
1a001f1e:	f002 040f 	and.w	r4, r2, #15
1a001f22:	eb00 1303 	add.w	r3, r0, r3, lsl #4
1a001f26:	d028      	beq.n	1a001f7a <memmove+0xfa>
1a001f28:	3c04      	subs	r4, #4
1a001f2a:	f024 0603 	bic.w	r6, r4, #3
1a001f2e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
1a001f32:	441e      	add	r6, r3
1a001f34:	1f1c      	subs	r4, r3, #4
1a001f36:	468e      	mov	lr, r1
1a001f38:	f85e 5b04 	ldr.w	r5, [lr], #4
1a001f3c:	f844 5f04 	str.w	r5, [r4, #4]!
1a001f40:	42b4      	cmp	r4, r6
1a001f42:	d1f9      	bne.n	1a001f38 <memmove+0xb8>
1a001f44:	f10c 0401 	add.w	r4, ip, #1
1a001f48:	f002 0203 	and.w	r2, r2, #3
1a001f4c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
1a001f50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
1a001f54:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
1a001f58:	b14a      	cbz	r2, 1a001f6e <memmove+0xee>
1a001f5a:	f10c 0c01 	add.w	ip, ip, #1
1a001f5e:	3b01      	subs	r3, #1
1a001f60:	448c      	add	ip, r1
1a001f62:	f811 2b01 	ldrb.w	r2, [r1], #1
1a001f66:	f803 2f01 	strb.w	r2, [r3, #1]!
1a001f6a:	4561      	cmp	r1, ip
1a001f6c:	d1f9      	bne.n	1a001f62 <memmove+0xe2>
1a001f6e:	bd70      	pop	{r4, r5, r6, pc}
1a001f70:	4770      	bx	lr
1a001f72:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
1a001f76:	4603      	mov	r3, r0
1a001f78:	e79a      	b.n	1a001eb0 <memmove+0x30>
1a001f7a:	4622      	mov	r2, r4
1a001f7c:	e7ea      	b.n	1a001f54 <memmove+0xd4>
1a001f7e:	bf00      	nop

1a001f80 <memchr>:
1a001f80:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
1a001f84:	2a10      	cmp	r2, #16
1a001f86:	db2b      	blt.n	1a001fe0 <memchr+0x60>
1a001f88:	f010 0f07 	tst.w	r0, #7
1a001f8c:	d008      	beq.n	1a001fa0 <memchr+0x20>
1a001f8e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a001f92:	3a01      	subs	r2, #1
1a001f94:	428b      	cmp	r3, r1
1a001f96:	d02d      	beq.n	1a001ff4 <memchr+0x74>
1a001f98:	f010 0f07 	tst.w	r0, #7
1a001f9c:	b342      	cbz	r2, 1a001ff0 <memchr+0x70>
1a001f9e:	d1f6      	bne.n	1a001f8e <memchr+0xe>
1a001fa0:	b4f0      	push	{r4, r5, r6, r7}
1a001fa2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a001fa6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a001faa:	f022 0407 	bic.w	r4, r2, #7
1a001fae:	f07f 0700 	mvns.w	r7, #0
1a001fb2:	2300      	movs	r3, #0
1a001fb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a001fb8:	3c08      	subs	r4, #8
1a001fba:	ea85 0501 	eor.w	r5, r5, r1
1a001fbe:	ea86 0601 	eor.w	r6, r6, r1
1a001fc2:	fa85 f547 	uadd8	r5, r5, r7
1a001fc6:	faa3 f587 	sel	r5, r3, r7
1a001fca:	fa86 f647 	uadd8	r6, r6, r7
1a001fce:	faa5 f687 	sel	r6, r5, r7
1a001fd2:	b98e      	cbnz	r6, 1a001ff8 <memchr+0x78>
1a001fd4:	d1ee      	bne.n	1a001fb4 <memchr+0x34>
1a001fd6:	bcf0      	pop	{r4, r5, r6, r7}
1a001fd8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
1a001fdc:	f002 0207 	and.w	r2, r2, #7
1a001fe0:	b132      	cbz	r2, 1a001ff0 <memchr+0x70>
1a001fe2:	f810 3b01 	ldrb.w	r3, [r0], #1
1a001fe6:	3a01      	subs	r2, #1
1a001fe8:	ea83 0301 	eor.w	r3, r3, r1
1a001fec:	b113      	cbz	r3, 1a001ff4 <memchr+0x74>
1a001fee:	d1f8      	bne.n	1a001fe2 <memchr+0x62>
1a001ff0:	2000      	movs	r0, #0
1a001ff2:	4770      	bx	lr
1a001ff4:	3801      	subs	r0, #1
1a001ff6:	4770      	bx	lr
1a001ff8:	2d00      	cmp	r5, #0
1a001ffa:	bf06      	itte	eq
1a001ffc:	4635      	moveq	r5, r6
1a001ffe:	3803      	subeq	r0, #3
1a002000:	3807      	subne	r0, #7
1a002002:	f015 0f01 	tst.w	r5, #1
1a002006:	d107      	bne.n	1a002018 <memchr+0x98>
1a002008:	3001      	adds	r0, #1
1a00200a:	f415 7f80 	tst.w	r5, #256	@ 0x100
1a00200e:	bf02      	ittt	eq
1a002010:	3001      	addeq	r0, #1
1a002012:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
1a002016:	3001      	addeq	r0, #1
1a002018:	bcf0      	pop	{r4, r5, r6, r7}
1a00201a:	3801      	subs	r0, #1
1a00201c:	4770      	bx	lr
1a00201e:	bf00      	nop

1a002020 <memcpy>:
1a002020:	4684      	mov	ip, r0
1a002022:	ea41 0300 	orr.w	r3, r1, r0
1a002026:	f013 0303 	ands.w	r3, r3, #3
1a00202a:	d16d      	bne.n	1a002108 <memcpy+0xe8>
1a00202c:	3a40      	subs	r2, #64	@ 0x40
1a00202e:	d341      	bcc.n	1a0020b4 <memcpy+0x94>
1a002030:	f851 3b04 	ldr.w	r3, [r1], #4
1a002034:	f840 3b04 	str.w	r3, [r0], #4
1a002038:	f851 3b04 	ldr.w	r3, [r1], #4
1a00203c:	f840 3b04 	str.w	r3, [r0], #4
1a002040:	f851 3b04 	ldr.w	r3, [r1], #4
1a002044:	f840 3b04 	str.w	r3, [r0], #4
1a002048:	f851 3b04 	ldr.w	r3, [r1], #4
1a00204c:	f840 3b04 	str.w	r3, [r0], #4
1a002050:	f851 3b04 	ldr.w	r3, [r1], #4
1a002054:	f840 3b04 	str.w	r3, [r0], #4
1a002058:	f851 3b04 	ldr.w	r3, [r1], #4
1a00205c:	f840 3b04 	str.w	r3, [r0], #4
1a002060:	f851 3b04 	ldr.w	r3, [r1], #4
1a002064:	f840 3b04 	str.w	r3, [r0], #4
1a002068:	f851 3b04 	ldr.w	r3, [r1], #4
1a00206c:	f840 3b04 	str.w	r3, [r0], #4
1a002070:	f851 3b04 	ldr.w	r3, [r1], #4
1a002074:	f840 3b04 	str.w	r3, [r0], #4
1a002078:	f851 3b04 	ldr.w	r3, [r1], #4
1a00207c:	f840 3b04 	str.w	r3, [r0], #4
1a002080:	f851 3b04 	ldr.w	r3, [r1], #4
1a002084:	f840 3b04 	str.w	r3, [r0], #4
1a002088:	f851 3b04 	ldr.w	r3, [r1], #4
1a00208c:	f840 3b04 	str.w	r3, [r0], #4
1a002090:	f851 3b04 	ldr.w	r3, [r1], #4
1a002094:	f840 3b04 	str.w	r3, [r0], #4
1a002098:	f851 3b04 	ldr.w	r3, [r1], #4
1a00209c:	f840 3b04 	str.w	r3, [r0], #4
1a0020a0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0020a4:	f840 3b04 	str.w	r3, [r0], #4
1a0020a8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0020ac:	f840 3b04 	str.w	r3, [r0], #4
1a0020b0:	3a40      	subs	r2, #64	@ 0x40
1a0020b2:	d2bd      	bcs.n	1a002030 <memcpy+0x10>
1a0020b4:	3230      	adds	r2, #48	@ 0x30
1a0020b6:	d311      	bcc.n	1a0020dc <memcpy+0xbc>
1a0020b8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0020bc:	f840 3b04 	str.w	r3, [r0], #4
1a0020c0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0020c4:	f840 3b04 	str.w	r3, [r0], #4
1a0020c8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0020cc:	f840 3b04 	str.w	r3, [r0], #4
1a0020d0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0020d4:	f840 3b04 	str.w	r3, [r0], #4
1a0020d8:	3a10      	subs	r2, #16
1a0020da:	d2ed      	bcs.n	1a0020b8 <memcpy+0x98>
1a0020dc:	320c      	adds	r2, #12
1a0020de:	d305      	bcc.n	1a0020ec <memcpy+0xcc>
1a0020e0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0020e4:	f840 3b04 	str.w	r3, [r0], #4
1a0020e8:	3a04      	subs	r2, #4
1a0020ea:	d2f9      	bcs.n	1a0020e0 <memcpy+0xc0>
1a0020ec:	3204      	adds	r2, #4
1a0020ee:	d008      	beq.n	1a002102 <memcpy+0xe2>
1a0020f0:	07d2      	lsls	r2, r2, #31
1a0020f2:	bf1c      	itt	ne
1a0020f4:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a0020f8:	f800 3b01 	strbne.w	r3, [r0], #1
1a0020fc:	d301      	bcc.n	1a002102 <memcpy+0xe2>
1a0020fe:	880b      	ldrh	r3, [r1, #0]
1a002100:	8003      	strh	r3, [r0, #0]
1a002102:	4660      	mov	r0, ip
1a002104:	4770      	bx	lr
1a002106:	bf00      	nop
1a002108:	2a08      	cmp	r2, #8
1a00210a:	d313      	bcc.n	1a002134 <memcpy+0x114>
1a00210c:	078b      	lsls	r3, r1, #30
1a00210e:	d08d      	beq.n	1a00202c <memcpy+0xc>
1a002110:	f010 0303 	ands.w	r3, r0, #3
1a002114:	d08a      	beq.n	1a00202c <memcpy+0xc>
1a002116:	f1c3 0304 	rsb	r3, r3, #4
1a00211a:	1ad2      	subs	r2, r2, r3
1a00211c:	07db      	lsls	r3, r3, #31
1a00211e:	bf1c      	itt	ne
1a002120:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a002124:	f800 3b01 	strbne.w	r3, [r0], #1
1a002128:	d380      	bcc.n	1a00202c <memcpy+0xc>
1a00212a:	f831 3b02 	ldrh.w	r3, [r1], #2
1a00212e:	f820 3b02 	strh.w	r3, [r0], #2
1a002132:	e77b      	b.n	1a00202c <memcpy+0xc>
1a002134:	3a04      	subs	r2, #4
1a002136:	d3d9      	bcc.n	1a0020ec <memcpy+0xcc>
1a002138:	3a01      	subs	r2, #1
1a00213a:	f811 3b01 	ldrb.w	r3, [r1], #1
1a00213e:	f800 3b01 	strb.w	r3, [r0], #1
1a002142:	d2f9      	bcs.n	1a002138 <memcpy+0x118>
1a002144:	780b      	ldrb	r3, [r1, #0]
1a002146:	7003      	strb	r3, [r0, #0]
1a002148:	784b      	ldrb	r3, [r1, #1]
1a00214a:	7043      	strb	r3, [r0, #1]
1a00214c:	788b      	ldrb	r3, [r1, #2]
1a00214e:	7083      	strb	r3, [r0, #2]
1a002150:	4660      	mov	r0, ip
1a002152:	4770      	bx	lr

1a002154 <_realloc_r>:
1a002154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002158:	4614      	mov	r4, r2
1a00215a:	b341      	cbz	r1, 1a0021ae <_realloc_r+0x5a>
1a00215c:	b30a      	cbz	r2, 1a0021a2 <_realloc_r+0x4e>
1a00215e:	4606      	mov	r6, r0
1a002160:	460d      	mov	r5, r1
1a002162:	f000 fad5 	bl	1a002710 <_malloc_usable_size_r>
1a002166:	4284      	cmp	r4, r0
1a002168:	4607      	mov	r7, r0
1a00216a:	d802      	bhi.n	1a002172 <_realloc_r+0x1e>
1a00216c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
1a002170:	d813      	bhi.n	1a00219a <_realloc_r+0x46>
1a002172:	4621      	mov	r1, r4
1a002174:	4630      	mov	r0, r6
1a002176:	f7ff fda5 	bl	1a001cc4 <_malloc_r>
1a00217a:	4680      	mov	r8, r0
1a00217c:	b150      	cbz	r0, 1a002194 <_realloc_r+0x40>
1a00217e:	42bc      	cmp	r4, r7
1a002180:	4622      	mov	r2, r4
1a002182:	4629      	mov	r1, r5
1a002184:	bf28      	it	cs
1a002186:	463a      	movcs	r2, r7
1a002188:	f7ff ff4a 	bl	1a002020 <memcpy>
1a00218c:	4629      	mov	r1, r5
1a00218e:	4630      	mov	r0, r6
1a002190:	f7ff fe18 	bl	1a001dc4 <_free_r>
1a002194:	4640      	mov	r0, r8
1a002196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00219a:	46a8      	mov	r8, r5
1a00219c:	4640      	mov	r0, r8
1a00219e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0021a2:	46a0      	mov	r8, r4
1a0021a4:	f7ff fe0e 	bl	1a001dc4 <_free_r>
1a0021a8:	4640      	mov	r0, r8
1a0021aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0021ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0021b2:	4611      	mov	r1, r2
1a0021b4:	f7ff bd86 	b.w	1a001cc4 <_malloc_r>

1a0021b8 <_printf_common>:
1a0021b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0021bc:	4692      	mov	sl, r2
1a0021be:	461f      	mov	r7, r3
1a0021c0:	690a      	ldr	r2, [r1, #16]
1a0021c2:	688b      	ldr	r3, [r1, #8]
1a0021c4:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
1a0021c8:	429a      	cmp	r2, r3
1a0021ca:	bfb8      	it	lt
1a0021cc:	461a      	movlt	r2, r3
1a0021ce:	f8ca 2000 	str.w	r2, [sl]
1a0021d2:	f891 3043 	ldrb.w	r3, [r1, #67]	@ 0x43
1a0021d6:	460c      	mov	r4, r1
1a0021d8:	4606      	mov	r6, r0
1a0021da:	b113      	cbz	r3, 1a0021e2 <_printf_common+0x2a>
1a0021dc:	3201      	adds	r2, #1
1a0021de:	f8ca 2000 	str.w	r2, [sl]
1a0021e2:	6822      	ldr	r2, [r4, #0]
1a0021e4:	0691      	lsls	r1, r2, #26
1a0021e6:	d55f      	bpl.n	1a0022a8 <_printf_common+0xf0>
1a0021e8:	f8da 3000 	ldr.w	r3, [sl]
1a0021ec:	3302      	adds	r3, #2
1a0021ee:	f8ca 3000 	str.w	r3, [sl]
1a0021f2:	6822      	ldr	r2, [r4, #0]
1a0021f4:	f012 0f06 	tst.w	r2, #6
1a0021f8:	4611      	mov	r1, r2
1a0021fa:	d11d      	bne.n	1a002238 <_printf_common+0x80>
1a0021fc:	68e1      	ldr	r1, [r4, #12]
1a0021fe:	4299      	cmp	r1, r3
1a002200:	bfd8      	it	le
1a002202:	4611      	movle	r1, r2
1a002204:	dd18      	ble.n	1a002238 <_printf_common+0x80>
1a002206:	f04f 0800 	mov.w	r8, #0
1a00220a:	f104 0b19 	add.w	fp, r4, #25
1a00220e:	e005      	b.n	1a00221c <_printf_common+0x64>
1a002210:	68e5      	ldr	r5, [r4, #12]
1a002212:	f8da 3000 	ldr.w	r3, [sl]
1a002216:	1aed      	subs	r5, r5, r3
1a002218:	4545      	cmp	r5, r8
1a00221a:	dd0c      	ble.n	1a002236 <_printf_common+0x7e>
1a00221c:	2301      	movs	r3, #1
1a00221e:	465a      	mov	r2, fp
1a002220:	4639      	mov	r1, r7
1a002222:	4630      	mov	r0, r6
1a002224:	47c8      	blx	r9
1a002226:	3001      	adds	r0, #1
1a002228:	f108 0801 	add.w	r8, r8, #1
1a00222c:	d1f0      	bne.n	1a002210 <_printf_common+0x58>
1a00222e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a002232:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002236:	6821      	ldr	r1, [r4, #0]
1a002238:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
1a00223c:	3b00      	subs	r3, #0
1a00223e:	bf18      	it	ne
1a002240:	2301      	movne	r3, #1
1a002242:	068a      	lsls	r2, r1, #26
1a002244:	d50a      	bpl.n	1a00225c <_printf_common+0xa4>
1a002246:	18e1      	adds	r1, r4, r3
1a002248:	1c5a      	adds	r2, r3, #1
1a00224a:	2030      	movs	r0, #48	@ 0x30
1a00224c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
1a002250:	4422      	add	r2, r4
1a002252:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
1a002256:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
1a00225a:	3302      	adds	r3, #2
1a00225c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
1a002260:	4639      	mov	r1, r7
1a002262:	4630      	mov	r0, r6
1a002264:	47c8      	blx	r9
1a002266:	3001      	adds	r0, #1
1a002268:	d0e1      	beq.n	1a00222e <_printf_common+0x76>
1a00226a:	6823      	ldr	r3, [r4, #0]
1a00226c:	f8da 5000 	ldr.w	r5, [sl]
1a002270:	6921      	ldr	r1, [r4, #16]
1a002272:	f003 0306 	and.w	r3, r3, #6
1a002276:	2b04      	cmp	r3, #4
1a002278:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
1a00227c:	d01b      	beq.n	1a0022b6 <_printf_common+0xfe>
1a00227e:	428a      	cmp	r2, r1
1a002280:	dd20      	ble.n	1a0022c4 <_printf_common+0x10c>
1a002282:	f04f 0800 	mov.w	r8, #0
1a002286:	1a52      	subs	r2, r2, r1
1a002288:	4490      	add	r8, r2
1a00228a:	341a      	adds	r4, #26
1a00228c:	2500      	movs	r5, #0
1a00228e:	e001      	b.n	1a002294 <_printf_common+0xdc>
1a002290:	4545      	cmp	r5, r8
1a002292:	da17      	bge.n	1a0022c4 <_printf_common+0x10c>
1a002294:	2301      	movs	r3, #1
1a002296:	4622      	mov	r2, r4
1a002298:	4639      	mov	r1, r7
1a00229a:	4630      	mov	r0, r6
1a00229c:	47c8      	blx	r9
1a00229e:	3001      	adds	r0, #1
1a0022a0:	f105 0501 	add.w	r5, r5, #1
1a0022a4:	d1f4      	bne.n	1a002290 <_printf_common+0xd8>
1a0022a6:	e7c2      	b.n	1a00222e <_printf_common+0x76>
1a0022a8:	f012 0f06 	tst.w	r2, #6
1a0022ac:	d00d      	beq.n	1a0022ca <_printf_common+0x112>
1a0022ae:	3b00      	subs	r3, #0
1a0022b0:	bf18      	it	ne
1a0022b2:	2301      	movne	r3, #1
1a0022b4:	e7d2      	b.n	1a00225c <_printf_common+0xa4>
1a0022b6:	1b40      	subs	r0, r0, r5
1a0022b8:	428a      	cmp	r2, r1
1a0022ba:	ea20 78e0 	bic.w	r8, r0, r0, asr #31
1a0022be:	dce2      	bgt.n	1a002286 <_printf_common+0xce>
1a0022c0:	2800      	cmp	r0, #0
1a0022c2:	dce2      	bgt.n	1a00228a <_printf_common+0xd2>
1a0022c4:	2000      	movs	r0, #0
1a0022c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0022ca:	68e1      	ldr	r1, [r4, #12]
1a0022cc:	f8da 3000 	ldr.w	r3, [sl]
1a0022d0:	4299      	cmp	r1, r3
1a0022d2:	bfd8      	it	le
1a0022d4:	4611      	movle	r1, r2
1a0022d6:	dc96      	bgt.n	1a002206 <_printf_common+0x4e>
1a0022d8:	e7ae      	b.n	1a002238 <_printf_common+0x80>
1a0022da:	bf00      	nop

1a0022dc <_printf_i>:
1a0022dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0022e0:	4617      	mov	r7, r2
1a0022e2:	b084      	sub	sp, #16
1a0022e4:	7e0a      	ldrb	r2, [r1, #24]
1a0022e6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
1a0022e8:	460c      	mov	r4, r1
1a0022ea:	4606      	mov	r6, r0
1a0022ec:	4698      	mov	r8, r3
1a0022ee:	f101 0c43 	add.w	ip, r1, #67	@ 0x43
1a0022f2:	2a00      	cmp	r2, #0
1a0022f4:	d035      	beq.n	1a002362 <_printf_i+0x86>
1a0022f6:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
1a0022fa:	b2d9      	uxtb	r1, r3
1a0022fc:	2920      	cmp	r1, #32
1a0022fe:	d869      	bhi.n	1a0023d4 <_printf_i+0xf8>
1a002300:	2b20      	cmp	r3, #32
1a002302:	d867      	bhi.n	1a0023d4 <_printf_i+0xf8>
1a002304:	e8df f013 	tbh	[pc, r3, lsl #1]
1a002308:	006600e6 	.word	0x006600e6
1a00230c:	00660066 	.word	0x00660066
1a002310:	00660066 	.word	0x00660066
1a002314:	00660066 	.word	0x00660066
1a002318:	00660066 	.word	0x00660066
1a00231c:	00ac0066 	.word	0x00ac0066
1a002320:	00660070 	.word	0x00660070
1a002324:	00660066 	.word	0x00660066
1a002328:	00700066 	.word	0x00700066
1a00232c:	00660066 	.word	0x00660066
1a002330:	00660066 	.word	0x00660066
1a002334:	00830021 	.word	0x00830021
1a002338:	006600c6 	.word	0x006600c6
1a00233c:	00b60066 	.word	0x00b60066
1a002340:	00830066 	.word	0x00830066
1a002344:	00660066 	.word	0x00660066
1a002348:	00ec      	.short	0x00ec
1a00234a:	682b      	ldr	r3, [r5, #0]
1a00234c:	6822      	ldr	r2, [r4, #0]
1a00234e:	6961      	ldr	r1, [r4, #20]
1a002350:	1d18      	adds	r0, r3, #4
1a002352:	6028      	str	r0, [r5, #0]
1a002354:	0610      	lsls	r0, r2, #24
1a002356:	681b      	ldr	r3, [r3, #0]
1a002358:	d402      	bmi.n	1a002360 <_printf_i+0x84>
1a00235a:	0652      	lsls	r2, r2, #25
1a00235c:	f100 80e0 	bmi.w	1a002520 <_printf_i+0x244>
1a002360:	6019      	str	r1, [r3, #0]
1a002362:	2300      	movs	r3, #0
1a002364:	46e1      	mov	r9, ip
1a002366:	6123      	str	r3, [r4, #16]
1a002368:	f8cd 8000 	str.w	r8, [sp]
1a00236c:	463b      	mov	r3, r7
1a00236e:	aa03      	add	r2, sp, #12
1a002370:	4621      	mov	r1, r4
1a002372:	4630      	mov	r0, r6
1a002374:	f7ff ff20 	bl	1a0021b8 <_printf_common>
1a002378:	3001      	adds	r0, #1
1a00237a:	d020      	beq.n	1a0023be <_printf_i+0xe2>
1a00237c:	6923      	ldr	r3, [r4, #16]
1a00237e:	464a      	mov	r2, r9
1a002380:	4639      	mov	r1, r7
1a002382:	4630      	mov	r0, r6
1a002384:	47c0      	blx	r8
1a002386:	3001      	adds	r0, #1
1a002388:	d019      	beq.n	1a0023be <_printf_i+0xe2>
1a00238a:	6823      	ldr	r3, [r4, #0]
1a00238c:	68e0      	ldr	r0, [r4, #12]
1a00238e:	f8dd 900c 	ldr.w	r9, [sp, #12]
1a002392:	079b      	lsls	r3, r3, #30
1a002394:	d518      	bpl.n	1a0023c8 <_printf_i+0xec>
1a002396:	4548      	cmp	r0, r9
1a002398:	dd16      	ble.n	1a0023c8 <_printf_i+0xec>
1a00239a:	2500      	movs	r5, #0
1a00239c:	f104 0a19 	add.w	sl, r4, #25
1a0023a0:	e004      	b.n	1a0023ac <_printf_i+0xd0>
1a0023a2:	68e0      	ldr	r0, [r4, #12]
1a0023a4:	eba0 0309 	sub.w	r3, r0, r9
1a0023a8:	42ab      	cmp	r3, r5
1a0023aa:	dd0d      	ble.n	1a0023c8 <_printf_i+0xec>
1a0023ac:	2301      	movs	r3, #1
1a0023ae:	4652      	mov	r2, sl
1a0023b0:	4639      	mov	r1, r7
1a0023b2:	4630      	mov	r0, r6
1a0023b4:	47c0      	blx	r8
1a0023b6:	3001      	adds	r0, #1
1a0023b8:	f105 0501 	add.w	r5, r5, #1
1a0023bc:	d1f1      	bne.n	1a0023a2 <_printf_i+0xc6>
1a0023be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a0023c2:	b004      	add	sp, #16
1a0023c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0023c8:	4548      	cmp	r0, r9
1a0023ca:	bfb8      	it	lt
1a0023cc:	4648      	movlt	r0, r9
1a0023ce:	b004      	add	sp, #16
1a0023d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0023d4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
1a0023d8:	2001      	movs	r0, #1
1a0023da:	f104 0942 	add.w	r9, r4, #66	@ 0x42
1a0023de:	2300      	movs	r3, #0
1a0023e0:	6120      	str	r0, [r4, #16]
1a0023e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1a0023e6:	e7bf      	b.n	1a002368 <_printf_i+0x8c>
1a0023e8:	682a      	ldr	r2, [r5, #0]
1a0023ea:	6823      	ldr	r3, [r4, #0]
1a0023ec:	1d11      	adds	r1, r2, #4
1a0023ee:	0618      	lsls	r0, r3, #24
1a0023f0:	6029      	str	r1, [r5, #0]
1a0023f2:	d402      	bmi.n	1a0023fa <_printf_i+0x11e>
1a0023f4:	0659      	lsls	r1, r3, #25
1a0023f6:	f100 8095 	bmi.w	1a002524 <_printf_i+0x248>
1a0023fa:	6810      	ldr	r0, [r2, #0]
1a0023fc:	4601      	mov	r1, r0
1a0023fe:	2800      	cmp	r0, #0
1a002400:	6862      	ldr	r2, [r4, #4]
1a002402:	f2c0 8093 	blt.w	1a00252c <_printf_i+0x250>
1a002406:	4854      	ldr	r0, [pc, #336]	@ (1a002558 <_printf_i+0x27c>)
1a002408:	f04f 0e0a 	mov.w	lr, #10
1a00240c:	e015      	b.n	1a00243a <_printf_i+0x15e>
1a00240e:	6820      	ldr	r0, [r4, #0]
1a002410:	682b      	ldr	r3, [r5, #0]
1a002412:	f010 0f80 	tst.w	r0, #128	@ 0x80
1a002416:	f853 1b04 	ldr.w	r1, [r3], #4
1a00241a:	d102      	bne.n	1a002422 <_printf_i+0x146>
1a00241c:	0640      	lsls	r0, r0, #25
1a00241e:	bf48      	it	mi
1a002420:	b289      	uxthmi	r1, r1
1a002422:	2a6f      	cmp	r2, #111	@ 0x6f
1a002424:	484c      	ldr	r0, [pc, #304]	@ (1a002558 <_printf_i+0x27c>)
1a002426:	602b      	str	r3, [r5, #0]
1a002428:	bf14      	ite	ne
1a00242a:	f04f 0e0a 	movne.w	lr, #10
1a00242e:	f04f 0e08 	moveq.w	lr, #8
1a002432:	2300      	movs	r3, #0
1a002434:	6862      	ldr	r2, [r4, #4]
1a002436:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1a00243a:	2a00      	cmp	r2, #0
1a00243c:	60a2      	str	r2, [r4, #8]
1a00243e:	db51      	blt.n	1a0024e4 <_printf_i+0x208>
1a002440:	6823      	ldr	r3, [r4, #0]
1a002442:	f023 0304 	bic.w	r3, r3, #4
1a002446:	6023      	str	r3, [r4, #0]
1a002448:	2900      	cmp	r1, #0
1a00244a:	d14b      	bne.n	1a0024e4 <_printf_i+0x208>
1a00244c:	2a00      	cmp	r2, #0
1a00244e:	d17b      	bne.n	1a002548 <_printf_i+0x26c>
1a002450:	46e1      	mov	r9, ip
1a002452:	f1be 0f08 	cmp.w	lr, #8
1a002456:	d056      	beq.n	1a002506 <_printf_i+0x22a>
1a002458:	ebac 0309 	sub.w	r3, ip, r9
1a00245c:	6123      	str	r3, [r4, #16]
1a00245e:	e783      	b.n	1a002368 <_printf_i+0x8c>
1a002460:	682b      	ldr	r3, [r5, #0]
1a002462:	681a      	ldr	r2, [r3, #0]
1a002464:	3304      	adds	r3, #4
1a002466:	602b      	str	r3, [r5, #0]
1a002468:	f104 0942 	add.w	r9, r4, #66	@ 0x42
1a00246c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
1a002470:	2001      	movs	r0, #1
1a002472:	e7b4      	b.n	1a0023de <_printf_i+0x102>
1a002474:	682b      	ldr	r3, [r5, #0]
1a002476:	6862      	ldr	r2, [r4, #4]
1a002478:	1d19      	adds	r1, r3, #4
1a00247a:	6029      	str	r1, [r5, #0]
1a00247c:	f8d3 9000 	ldr.w	r9, [r3]
1a002480:	2100      	movs	r1, #0
1a002482:	4648      	mov	r0, r9
1a002484:	f7ff fd7c 	bl	1a001f80 <memchr>
1a002488:	2800      	cmp	r0, #0
1a00248a:	d063      	beq.n	1a002554 <_printf_i+0x278>
1a00248c:	eba0 0009 	sub.w	r0, r0, r9
1a002490:	6060      	str	r0, [r4, #4]
1a002492:	e7a4      	b.n	1a0023de <_printf_i+0x102>
1a002494:	6823      	ldr	r3, [r4, #0]
1a002496:	f043 0320 	orr.w	r3, r3, #32
1a00249a:	6023      	str	r3, [r4, #0]
1a00249c:	2278      	movs	r2, #120	@ 0x78
1a00249e:	482f      	ldr	r0, [pc, #188]	@ (1a00255c <_printf_i+0x280>)
1a0024a0:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
1a0024a4:	682a      	ldr	r2, [r5, #0]
1a0024a6:	f013 0f80 	tst.w	r3, #128	@ 0x80
1a0024aa:	f852 1b04 	ldr.w	r1, [r2], #4
1a0024ae:	d103      	bne.n	1a0024b8 <_printf_i+0x1dc>
1a0024b0:	f013 0f40 	tst.w	r3, #64	@ 0x40
1a0024b4:	bf18      	it	ne
1a0024b6:	b289      	uxthne	r1, r1
1a0024b8:	602a      	str	r2, [r5, #0]
1a0024ba:	07da      	lsls	r2, r3, #31
1a0024bc:	bf44      	itt	mi
1a0024be:	f043 0320 	orrmi.w	r3, r3, #32
1a0024c2:	6023      	strmi	r3, [r4, #0]
1a0024c4:	b919      	cbnz	r1, 1a0024ce <_printf_i+0x1f2>
1a0024c6:	6823      	ldr	r3, [r4, #0]
1a0024c8:	f023 0320 	bic.w	r3, r3, #32
1a0024cc:	6023      	str	r3, [r4, #0]
1a0024ce:	f04f 0e10 	mov.w	lr, #16
1a0024d2:	e7ae      	b.n	1a002432 <_printf_i+0x156>
1a0024d4:	2358      	movs	r3, #88	@ 0x58
1a0024d6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
1a0024da:	481f      	ldr	r0, [pc, #124]	@ (1a002558 <_printf_i+0x27c>)
1a0024dc:	6823      	ldr	r3, [r4, #0]
1a0024de:	e7e1      	b.n	1a0024a4 <_printf_i+0x1c8>
1a0024e0:	6823      	ldr	r3, [r4, #0]
1a0024e2:	e7db      	b.n	1a00249c <_printf_i+0x1c0>
1a0024e4:	4675      	mov	r5, lr
1a0024e6:	46e1      	mov	r9, ip
1a0024e8:	fbb1 f3f5 	udiv	r3, r1, r5
1a0024ec:	fb05 1a13 	mls	sl, r5, r3, r1
1a0024f0:	460a      	mov	r2, r1
1a0024f2:	42aa      	cmp	r2, r5
1a0024f4:	f810 100a 	ldrb.w	r1, [r0, sl]
1a0024f8:	f809 1d01 	strb.w	r1, [r9, #-1]!
1a0024fc:	4619      	mov	r1, r3
1a0024fe:	d2f3      	bcs.n	1a0024e8 <_printf_i+0x20c>
1a002500:	f1be 0f08 	cmp.w	lr, #8
1a002504:	d1a8      	bne.n	1a002458 <_printf_i+0x17c>
1a002506:	6823      	ldr	r3, [r4, #0]
1a002508:	07dd      	lsls	r5, r3, #31
1a00250a:	d5a5      	bpl.n	1a002458 <_printf_i+0x17c>
1a00250c:	6862      	ldr	r2, [r4, #4]
1a00250e:	6923      	ldr	r3, [r4, #16]
1a002510:	429a      	cmp	r2, r3
1a002512:	dca1      	bgt.n	1a002458 <_printf_i+0x17c>
1a002514:	2330      	movs	r3, #48	@ 0x30
1a002516:	f809 3c01 	strb.w	r3, [r9, #-1]
1a00251a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
1a00251e:	e79b      	b.n	1a002458 <_printf_i+0x17c>
1a002520:	8019      	strh	r1, [r3, #0]
1a002522:	e71e      	b.n	1a002362 <_printf_i+0x86>
1a002524:	f9b2 1000 	ldrsh.w	r1, [r2]
1a002528:	4608      	mov	r0, r1
1a00252a:	e768      	b.n	1a0023fe <_printf_i+0x122>
1a00252c:	202d      	movs	r0, #45	@ 0x2d
1a00252e:	2a00      	cmp	r2, #0
1a002530:	60a2      	str	r2, [r4, #8]
1a002532:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
1a002536:	db02      	blt.n	1a00253e <_printf_i+0x262>
1a002538:	f023 0304 	bic.w	r3, r3, #4
1a00253c:	6023      	str	r3, [r4, #0]
1a00253e:	250a      	movs	r5, #10
1a002540:	4805      	ldr	r0, [pc, #20]	@ (1a002558 <_printf_i+0x27c>)
1a002542:	4249      	negs	r1, r1
1a002544:	46ae      	mov	lr, r5
1a002546:	e7ce      	b.n	1a0024e6 <_printf_i+0x20a>
1a002548:	7803      	ldrb	r3, [r0, #0]
1a00254a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
1a00254e:	f104 0942 	add.w	r9, r4, #66	@ 0x42
1a002552:	e77e      	b.n	1a002452 <_printf_i+0x176>
1a002554:	6860      	ldr	r0, [r4, #4]
1a002556:	e742      	b.n	1a0023de <_printf_i+0x102>
1a002558:	1a00381c 	.word	0x1a00381c
1a00255c:	1a003830 	.word	0x1a003830

1a002560 <__malloc_lock>:
1a002560:	4770      	bx	lr
1a002562:	bf00      	nop

1a002564 <__malloc_unlock>:
1a002564:	4770      	bx	lr
1a002566:	bf00      	nop

1a002568 <_sniprintf_r>:
1a002568:	b408      	push	{r3}
1a00256a:	b510      	push	{r4, lr}
1a00256c:	2a00      	cmp	r2, #0
1a00256e:	b09d      	sub	sp, #116	@ 0x74
1a002570:	4604      	mov	r4, r0
1a002572:	db36      	blt.n	1a0025e2 <_sniprintf_r+0x7a>
1a002574:	f44f 7302 	mov.w	r3, #520	@ 0x208
1a002578:	f8ad 3014 	strh.w	r3, [sp, #20]
1a00257c:	f04f 0300 	mov.w	r3, #0
1a002580:	931b      	str	r3, [sp, #108]	@ 0x6c
1a002582:	9102      	str	r1, [sp, #8]
1a002584:	9106      	str	r1, [sp, #24]
1a002586:	ab20      	add	r3, sp, #128	@ 0x80
1a002588:	d017      	beq.n	1a0025ba <_sniprintf_r+0x52>
1a00258a:	3a01      	subs	r2, #1
1a00258c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
1a002590:	9204      	str	r2, [sp, #16]
1a002592:	9207      	str	r2, [sp, #28]
1a002594:	f8ad 1016 	strh.w	r1, [sp, #22]
1a002598:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
1a00259a:	9301      	str	r3, [sp, #4]
1a00259c:	a902      	add	r1, sp, #8
1a00259e:	f7ff f929 	bl	1a0017f4 <_svfiprintf_r>
1a0025a2:	1c42      	adds	r2, r0, #1
1a0025a4:	da01      	bge.n	1a0025aa <_sniprintf_r+0x42>
1a0025a6:	238b      	movs	r3, #139	@ 0x8b
1a0025a8:	6023      	str	r3, [r4, #0]
1a0025aa:	9b02      	ldr	r3, [sp, #8]
1a0025ac:	2200      	movs	r2, #0
1a0025ae:	701a      	strb	r2, [r3, #0]
1a0025b0:	b01d      	add	sp, #116	@ 0x74
1a0025b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0025b6:	b001      	add	sp, #4
1a0025b8:	4770      	bx	lr
1a0025ba:	f64f 71ff 	movw	r1, #65535	@ 0xffff
1a0025be:	9204      	str	r2, [sp, #16]
1a0025c0:	9207      	str	r2, [sp, #28]
1a0025c2:	f8ad 1016 	strh.w	r1, [sp, #22]
1a0025c6:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
1a0025c8:	9301      	str	r3, [sp, #4]
1a0025ca:	a902      	add	r1, sp, #8
1a0025cc:	f7ff f912 	bl	1a0017f4 <_svfiprintf_r>
1a0025d0:	1c43      	adds	r3, r0, #1
1a0025d2:	da01      	bge.n	1a0025d8 <_sniprintf_r+0x70>
1a0025d4:	238b      	movs	r3, #139	@ 0x8b
1a0025d6:	6023      	str	r3, [r4, #0]
1a0025d8:	b01d      	add	sp, #116	@ 0x74
1a0025da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0025de:	b001      	add	sp, #4
1a0025e0:	4770      	bx	lr
1a0025e2:	238b      	movs	r3, #139	@ 0x8b
1a0025e4:	6003      	str	r3, [r0, #0]
1a0025e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a0025ea:	e7f5      	b.n	1a0025d8 <_sniprintf_r+0x70>

1a0025ec <sniprintf>:
1a0025ec:	b40c      	push	{r2, r3}
1a0025ee:	b510      	push	{r4, lr}
1a0025f0:	4b21      	ldr	r3, [pc, #132]	@ (1a002678 <sniprintf+0x8c>)
1a0025f2:	2900      	cmp	r1, #0
1a0025f4:	681c      	ldr	r4, [r3, #0]
1a0025f6:	b09c      	sub	sp, #112	@ 0x70
1a0025f8:	db38      	blt.n	1a00266c <sniprintf+0x80>
1a0025fa:	f04f 0300 	mov.w	r3, #0
1a0025fe:	f44f 7202 	mov.w	r2, #520	@ 0x208
1a002602:	931b      	str	r3, [sp, #108]	@ 0x6c
1a002604:	f8ad 2014 	strh.w	r2, [sp, #20]
1a002608:	9002      	str	r0, [sp, #8]
1a00260a:	9006      	str	r0, [sp, #24]
1a00260c:	ab1f      	add	r3, sp, #124	@ 0x7c
1a00260e:	d018      	beq.n	1a002642 <sniprintf+0x56>
1a002610:	3901      	subs	r1, #1
1a002612:	f64f 72ff 	movw	r2, #65535	@ 0xffff
1a002616:	9104      	str	r1, [sp, #16]
1a002618:	9107      	str	r1, [sp, #28]
1a00261a:	f8ad 2016 	strh.w	r2, [sp, #22]
1a00261e:	a902      	add	r1, sp, #8
1a002620:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
1a002622:	9301      	str	r3, [sp, #4]
1a002624:	4620      	mov	r0, r4
1a002626:	f7ff f8e5 	bl	1a0017f4 <_svfiprintf_r>
1a00262a:	1c42      	adds	r2, r0, #1
1a00262c:	da01      	bge.n	1a002632 <sniprintf+0x46>
1a00262e:	238b      	movs	r3, #139	@ 0x8b
1a002630:	6023      	str	r3, [r4, #0]
1a002632:	9b02      	ldr	r3, [sp, #8]
1a002634:	2200      	movs	r2, #0
1a002636:	701a      	strb	r2, [r3, #0]
1a002638:	b01c      	add	sp, #112	@ 0x70
1a00263a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a00263e:	b002      	add	sp, #8
1a002640:	4770      	bx	lr
1a002642:	f64f 72ff 	movw	r2, #65535	@ 0xffff
1a002646:	9104      	str	r1, [sp, #16]
1a002648:	9107      	str	r1, [sp, #28]
1a00264a:	f8ad 2016 	strh.w	r2, [sp, #22]
1a00264e:	a902      	add	r1, sp, #8
1a002650:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
1a002652:	9301      	str	r3, [sp, #4]
1a002654:	4620      	mov	r0, r4
1a002656:	f7ff f8cd 	bl	1a0017f4 <_svfiprintf_r>
1a00265a:	1c43      	adds	r3, r0, #1
1a00265c:	da01      	bge.n	1a002662 <sniprintf+0x76>
1a00265e:	238b      	movs	r3, #139	@ 0x8b
1a002660:	6023      	str	r3, [r4, #0]
1a002662:	b01c      	add	sp, #112	@ 0x70
1a002664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a002668:	b002      	add	sp, #8
1a00266a:	4770      	bx	lr
1a00266c:	238b      	movs	r3, #139	@ 0x8b
1a00266e:	6023      	str	r3, [r4, #0]
1a002670:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a002674:	e7f5      	b.n	1a002662 <sniprintf+0x76>
1a002676:	bf00      	nop
1a002678:	10000000 	.word	0x10000000

1a00267c <__sread>:
1a00267c:	b510      	push	{r4, lr}
1a00267e:	460c      	mov	r4, r1
1a002680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002684:	f7fe fde2 	bl	1a00124c <_read_r>
1a002688:	2800      	cmp	r0, #0
1a00268a:	db03      	blt.n	1a002694 <__sread+0x18>
1a00268c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
1a00268e:	4403      	add	r3, r0
1a002690:	6563      	str	r3, [r4, #84]	@ 0x54
1a002692:	bd10      	pop	{r4, pc}
1a002694:	89a3      	ldrh	r3, [r4, #12]
1a002696:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
1a00269a:	81a3      	strh	r3, [r4, #12]
1a00269c:	bd10      	pop	{r4, pc}
1a00269e:	bf00      	nop

1a0026a0 <__seofread>:
1a0026a0:	2000      	movs	r0, #0
1a0026a2:	4770      	bx	lr

1a0026a4 <__swrite>:
1a0026a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0026a8:	460c      	mov	r4, r1
1a0026aa:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
1a0026ae:	461f      	mov	r7, r3
1a0026b0:	05cb      	lsls	r3, r1, #23
1a0026b2:	4605      	mov	r5, r0
1a0026b4:	4616      	mov	r6, r2
1a0026b6:	d40b      	bmi.n	1a0026d0 <__swrite+0x2c>
1a0026b8:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
1a0026bc:	81a1      	strh	r1, [r4, #12]
1a0026be:	463b      	mov	r3, r7
1a0026c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0026c4:	4632      	mov	r2, r6
1a0026c6:	4628      	mov	r0, r5
1a0026c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0026cc:	f7fe bde2 	b.w	1a001294 <_write_r>
1a0026d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0026d4:	2302      	movs	r3, #2
1a0026d6:	2200      	movs	r2, #0
1a0026d8:	f7fe fdb3 	bl	1a001242 <_lseek_r>
1a0026dc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
1a0026e0:	e7ea      	b.n	1a0026b8 <__swrite+0x14>
1a0026e2:	bf00      	nop

1a0026e4 <__sseek>:
1a0026e4:	b510      	push	{r4, lr}
1a0026e6:	460c      	mov	r4, r1
1a0026e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0026ec:	f7fe fda9 	bl	1a001242 <_lseek_r>
1a0026f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0026f4:	1c42      	adds	r2, r0, #1
1a0026f6:	bf0e      	itee	eq
1a0026f8:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
1a0026fc:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
1a002700:	6560      	strne	r0, [r4, #84]	@ 0x54
1a002702:	81a3      	strh	r3, [r4, #12]
1a002704:	bd10      	pop	{r4, pc}
1a002706:	bf00      	nop

1a002708 <__sclose>:
1a002708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00270c:	f7fe bd94 	b.w	1a001238 <_close_r>

1a002710 <_malloc_usable_size_r>:
1a002710:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a002714:	1f18      	subs	r0, r3, #4
1a002716:	2b00      	cmp	r3, #0
1a002718:	bfbc      	itt	lt
1a00271a:	580b      	ldrlt	r3, [r1, r0]
1a00271c:	18c0      	addlt	r0, r0, r3
1a00271e:	4770      	bx	lr

1a002720 <_sungetc_r>:
1a002720:	b538      	push	{r3, r4, r5, lr}
1a002722:	1c4b      	adds	r3, r1, #1
1a002724:	d01a      	beq.n	1a00275c <_sungetc_r+0x3c>
1a002726:	8993      	ldrh	r3, [r2, #12]
1a002728:	4614      	mov	r4, r2
1a00272a:	f023 0320 	bic.w	r3, r3, #32
1a00272e:	6852      	ldr	r2, [r2, #4]
1a002730:	81a3      	strh	r3, [r4, #12]
1a002732:	6b63      	ldr	r3, [r4, #52]	@ 0x34
1a002734:	b2cd      	uxtb	r5, r1
1a002736:	b1a3      	cbz	r3, 1a002762 <_sungetc_r+0x42>
1a002738:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
1a00273a:	4293      	cmp	r3, r2
1a00273c:	dd09      	ble.n	1a002752 <_sungetc_r+0x32>
1a00273e:	6823      	ldr	r3, [r4, #0]
1a002740:	1e5a      	subs	r2, r3, #1
1a002742:	6022      	str	r2, [r4, #0]
1a002744:	f803 5c01 	strb.w	r5, [r3, #-1]
1a002748:	6863      	ldr	r3, [r4, #4]
1a00274a:	3301      	adds	r3, #1
1a00274c:	6063      	str	r3, [r4, #4]
1a00274e:	4628      	mov	r0, r5
1a002750:	bd38      	pop	{r3, r4, r5, pc}
1a002752:	4621      	mov	r1, r4
1a002754:	f000 fc86 	bl	1a003064 <__submore>
1a002758:	2800      	cmp	r0, #0
1a00275a:	d0f0      	beq.n	1a00273e <_sungetc_r+0x1e>
1a00275c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
1a002760:	e7f5      	b.n	1a00274e <_sungetc_r+0x2e>
1a002762:	6923      	ldr	r3, [r4, #16]
1a002764:	6821      	ldr	r1, [r4, #0]
1a002766:	b12b      	cbz	r3, 1a002774 <_sungetc_r+0x54>
1a002768:	428b      	cmp	r3, r1
1a00276a:	d203      	bcs.n	1a002774 <_sungetc_r+0x54>
1a00276c:	f811 3c01 	ldrb.w	r3, [r1, #-1]
1a002770:	42ab      	cmp	r3, r5
1a002772:	d00e      	beq.n	1a002792 <_sungetc_r+0x72>
1a002774:	4623      	mov	r3, r4
1a002776:	e9c4 120f 	strd	r1, r2, [r4, #60]	@ 0x3c
1a00277a:	f104 0044 	add.w	r0, r4, #68	@ 0x44
1a00277e:	2203      	movs	r2, #3
1a002780:	6360      	str	r0, [r4, #52]	@ 0x34
1a002782:	63a2      	str	r2, [r4, #56]	@ 0x38
1a002784:	f803 5f46 	strb.w	r5, [r3, #70]!
1a002788:	2201      	movs	r2, #1
1a00278a:	e9c4 3200 	strd	r3, r2, [r4]
1a00278e:	4628      	mov	r0, r5
1a002790:	bd38      	pop	{r3, r4, r5, pc}
1a002792:	3901      	subs	r1, #1
1a002794:	3201      	adds	r2, #1
1a002796:	e9c4 1200 	strd	r1, r2, [r4]
1a00279a:	e7d8      	b.n	1a00274e <_sungetc_r+0x2e>

1a00279c <__ssrefill_r>:
1a00279c:	b510      	push	{r4, lr}
1a00279e:	460c      	mov	r4, r1
1a0027a0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
1a0027a2:	b169      	cbz	r1, 1a0027c0 <__ssrefill_r+0x24>
1a0027a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
1a0027a8:	4299      	cmp	r1, r3
1a0027aa:	d001      	beq.n	1a0027b0 <__ssrefill_r+0x14>
1a0027ac:	f7ff fb0a 	bl	1a001dc4 <_free_r>
1a0027b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1a0027b2:	6063      	str	r3, [r4, #4]
1a0027b4:	2000      	movs	r0, #0
1a0027b6:	6360      	str	r0, [r4, #52]	@ 0x34
1a0027b8:	b113      	cbz	r3, 1a0027c0 <__ssrefill_r+0x24>
1a0027ba:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
1a0027bc:	6023      	str	r3, [r4, #0]
1a0027be:	bd10      	pop	{r4, pc}
1a0027c0:	89a2      	ldrh	r2, [r4, #12]
1a0027c2:	6923      	ldr	r3, [r4, #16]
1a0027c4:	2100      	movs	r1, #0
1a0027c6:	f042 0220 	orr.w	r2, r2, #32
1a0027ca:	6061      	str	r1, [r4, #4]
1a0027cc:	81a2      	strh	r2, [r4, #12]
1a0027ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a0027d2:	e7f3      	b.n	1a0027bc <__ssrefill_r+0x20>

1a0027d4 <__ssvfiscanf_r>:
1a0027d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0027d8:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
1a0027dc:	f892 9000 	ldrb.w	r9, [r2]
1a0027e0:	9301      	str	r3, [sp, #4]
1a0027e2:	2300      	movs	r3, #0
1a0027e4:	e9cd 3345 	strd	r3, r3, [sp, #276]	@ 0x114
1a0027e8:	4b86      	ldr	r3, [pc, #536]	@ (1a002a04 <__ssvfiscanf_r+0x230>)
1a0027ea:	93a1      	str	r3, [sp, #644]	@ 0x284
1a0027ec:	f10d 0808 	add.w	r8, sp, #8
1a0027f0:	4b85      	ldr	r3, [pc, #532]	@ (1a002a08 <__ssvfiscanf_r+0x234>)
1a0027f2:	93a2      	str	r3, [sp, #648]	@ 0x288
1a0027f4:	f8cd 811c 	str.w	r8, [sp, #284]	@ 0x11c
1a0027f8:	f1b9 0f00 	cmp.w	r9, #0
1a0027fc:	d014      	beq.n	1a002828 <__ssvfiscanf_r+0x54>
1a0027fe:	4f83      	ldr	r7, [pc, #524]	@ (1a002a0c <__ssvfiscanf_r+0x238>)
1a002800:	f817 3009 	ldrb.w	r3, [r7, r9]
1a002804:	4692      	mov	sl, r2
1a002806:	f013 0308 	ands.w	r3, r3, #8
1a00280a:	4606      	mov	r6, r0
1a00280c:	460c      	mov	r4, r1
1a00280e:	f10a 0501 	add.w	r5, sl, #1
1a002812:	d12e      	bne.n	1a002872 <__ssvfiscanf_r+0x9e>
1a002814:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
1a002818:	d045      	beq.n	1a0028a6 <__ssvfiscanf_r+0xd2>
1a00281a:	6863      	ldr	r3, [r4, #4]
1a00281c:	2b00      	cmp	r3, #0
1a00281e:	dd08      	ble.n	1a002832 <__ssvfiscanf_r+0x5e>
1a002820:	6823      	ldr	r3, [r4, #0]
1a002822:	781a      	ldrb	r2, [r3, #0]
1a002824:	454a      	cmp	r2, r9
1a002826:	d00f      	beq.n	1a002848 <__ssvfiscanf_r+0x74>
1a002828:	9845      	ldr	r0, [sp, #276]	@ 0x114
1a00282a:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
1a00282e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a002832:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
1a002834:	4621      	mov	r1, r4
1a002836:	4630      	mov	r0, r6
1a002838:	4798      	blx	r3
1a00283a:	2800      	cmp	r0, #0
1a00283c:	f040 810b 	bne.w	1a002a56 <__ssvfiscanf_r+0x282>
1a002840:	6823      	ldr	r3, [r4, #0]
1a002842:	781a      	ldrb	r2, [r3, #0]
1a002844:	454a      	cmp	r2, r9
1a002846:	d1ef      	bne.n	1a002828 <__ssvfiscanf_r+0x54>
1a002848:	3301      	adds	r3, #1
1a00284a:	6023      	str	r3, [r4, #0]
1a00284c:	6863      	ldr	r3, [r4, #4]
1a00284e:	3b01      	subs	r3, #1
1a002850:	6063      	str	r3, [r4, #4]
1a002852:	9b46      	ldr	r3, [sp, #280]	@ 0x118
1a002854:	3301      	adds	r3, #1
1a002856:	46aa      	mov	sl, r5
1a002858:	9346      	str	r3, [sp, #280]	@ 0x118
1a00285a:	f89a 9000 	ldrb.w	r9, [sl]
1a00285e:	f1b9 0f00 	cmp.w	r9, #0
1a002862:	d0e1      	beq.n	1a002828 <__ssvfiscanf_r+0x54>
1a002864:	f817 3009 	ldrb.w	r3, [r7, r9]
1a002868:	f013 0308 	ands.w	r3, r3, #8
1a00286c:	f10a 0501 	add.w	r5, sl, #1
1a002870:	d0d0      	beq.n	1a002814 <__ssvfiscanf_r+0x40>
1a002872:	6862      	ldr	r2, [r4, #4]
1a002874:	e00d      	b.n	1a002892 <__ssvfiscanf_r+0xbe>
1a002876:	6823      	ldr	r3, [r4, #0]
1a002878:	781a      	ldrb	r2, [r3, #0]
1a00287a:	5cba      	ldrb	r2, [r7, r2]
1a00287c:	0711      	lsls	r1, r2, #28
1a00287e:	f103 0301 	add.w	r3, r3, #1
1a002882:	d50e      	bpl.n	1a0028a2 <__ssvfiscanf_r+0xce>
1a002884:	6862      	ldr	r2, [r4, #4]
1a002886:	9946      	ldr	r1, [sp, #280]	@ 0x118
1a002888:	3a01      	subs	r2, #1
1a00288a:	e9c4 3200 	strd	r3, r2, [r4]
1a00288e:	3101      	adds	r1, #1
1a002890:	9146      	str	r1, [sp, #280]	@ 0x118
1a002892:	2a00      	cmp	r2, #0
1a002894:	4621      	mov	r1, r4
1a002896:	4630      	mov	r0, r6
1a002898:	dced      	bgt.n	1a002876 <__ssvfiscanf_r+0xa2>
1a00289a:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
1a00289c:	4798      	blx	r3
1a00289e:	2800      	cmp	r0, #0
1a0028a0:	d0e9      	beq.n	1a002876 <__ssvfiscanf_r+0xa2>
1a0028a2:	46aa      	mov	sl, r5
1a0028a4:	e7d9      	b.n	1a00285a <__ssvfiscanf_r+0x86>
1a0028a6:	9344      	str	r3, [sp, #272]	@ 0x110
1a0028a8:	9342      	str	r3, [sp, #264]	@ 0x108
1a0028aa:	f89a 1001 	ldrb.w	r1, [sl, #1]
1a0028ae:	292a      	cmp	r1, #42	@ 0x2a
1a0028b0:	d105      	bne.n	1a0028be <__ssvfiscanf_r+0xea>
1a0028b2:	2310      	movs	r3, #16
1a0028b4:	9342      	str	r3, [sp, #264]	@ 0x108
1a0028b6:	f89a 1002 	ldrb.w	r1, [sl, #2]
1a0028ba:	f10a 0502 	add.w	r5, sl, #2
1a0028be:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
1a0028c2:	2b09      	cmp	r3, #9
1a0028c4:	d80d      	bhi.n	1a0028e2 <__ssvfiscanf_r+0x10e>
1a0028c6:	2300      	movs	r3, #0
1a0028c8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0028cc:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a0028d0:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
1a0028d4:	9344      	str	r3, [sp, #272]	@ 0x110
1a0028d6:	f815 1f01 	ldrb.w	r1, [r5, #1]!
1a0028da:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
1a0028de:	2a09      	cmp	r2, #9
1a0028e0:	d9f2      	bls.n	1a0028c8 <__ssvfiscanf_r+0xf4>
1a0028e2:	f8df a12c 	ldr.w	sl, [pc, #300]	@ 1a002a10 <__ssvfiscanf_r+0x23c>
1a0028e6:	2203      	movs	r2, #3
1a0028e8:	4650      	mov	r0, sl
1a0028ea:	f7ff fb49 	bl	1a001f80 <memchr>
1a0028ee:	b138      	cbz	r0, 1a002900 <__ssvfiscanf_r+0x12c>
1a0028f0:	9a42      	ldr	r2, [sp, #264]	@ 0x108
1a0028f2:	eba0 000a 	sub.w	r0, r0, sl
1a0028f6:	2301      	movs	r3, #1
1a0028f8:	4083      	lsls	r3, r0
1a0028fa:	4313      	orrs	r3, r2
1a0028fc:	3501      	adds	r5, #1
1a0028fe:	9342      	str	r3, [sp, #264]	@ 0x108
1a002900:	46aa      	mov	sl, r5
1a002902:	f81a 3b01 	ldrb.w	r3, [sl], #1
1a002906:	2b78      	cmp	r3, #120	@ 0x78
1a002908:	f200 8084 	bhi.w	1a002a14 <__ssvfiscanf_r+0x240>
1a00290c:	e8df f013 	tbh	[pc, r3, lsl #1]
1a002910:	008200a9 	.word	0x008200a9
1a002914:	00820082 	.word	0x00820082
1a002918:	00820082 	.word	0x00820082
1a00291c:	00820082 	.word	0x00820082
1a002920:	00820082 	.word	0x00820082
1a002924:	00820082 	.word	0x00820082
1a002928:	00820082 	.word	0x00820082
1a00292c:	00820082 	.word	0x00820082
1a002930:	00820082 	.word	0x00820082
1a002934:	00820082 	.word	0x00820082
1a002938:	00820082 	.word	0x00820082
1a00293c:	00820082 	.word	0x00820082
1a002940:	00820082 	.word	0x00820082
1a002944:	00820082 	.word	0x00820082
1a002948:	00820082 	.word	0x00820082
1a00294c:	00820082 	.word	0x00820082
1a002950:	00820082 	.word	0x00820082
1a002954:	00820082 	.word	0x00820082
1a002958:	01110082 	.word	0x01110082
1a00295c:	00820082 	.word	0x00820082
1a002960:	00820082 	.word	0x00820082
1a002964:	00820082 	.word	0x00820082
1a002968:	00820082 	.word	0x00820082
1a00296c:	00820082 	.word	0x00820082
1a002970:	00820082 	.word	0x00820082
1a002974:	00820082 	.word	0x00820082
1a002978:	00820082 	.word	0x00820082
1a00297c:	00820082 	.word	0x00820082
1a002980:	00820082 	.word	0x00820082
1a002984:	00820082 	.word	0x00820082
1a002988:	00820082 	.word	0x00820082
1a00298c:	00820082 	.word	0x00820082
1a002990:	00820082 	.word	0x00820082
1a002994:	00820082 	.word	0x00820082
1a002998:	00c70082 	.word	0x00c70082
1a00299c:	00c700c7 	.word	0x00c700c7
1a0029a0:	00820082 	.word	0x00820082
1a0029a4:	00820082 	.word	0x00820082
1a0029a8:	00820082 	.word	0x00820082
1a0029ac:	00820082 	.word	0x00820082
1a0029b0:	00820082 	.word	0x00820082
1a0029b4:	00820082 	.word	0x00820082
1a0029b8:	00820082 	.word	0x00820082
1a0029bc:	00820082 	.word	0x00820082
1a0029c0:	008200ca 	.word	0x008200ca
1a0029c4:	00fc0082 	.word	0x00fc0082
1a0029c8:	00820082 	.word	0x00820082
1a0029cc:	00820082 	.word	0x00820082
1a0029d0:	00820082 	.word	0x00820082
1a0029d4:	01070082 	.word	0x01070082
1a0029d8:	00c700de 	.word	0x00c700de
1a0029dc:	00c700c7 	.word	0x00c700c7
1a0029e0:	010e0082 	.word	0x010e0082
1a0029e4:	00820082 	.word	0x00820082
1a0029e8:	00820082 	.word	0x00820082
1a0029ec:	00ee00e0 	.word	0x00ee00e0
1a0029f0:	008200f2 	.word	0x008200f2
1a0029f4:	00f90082 	.word	0x00f90082
1a0029f8:	00de0082 	.word	0x00de0082
1a0029fc:	00820082 	.word	0x00820082
1a002a00:	00ca      	.short	0x00ca
1a002a02:	bf00      	nop
1a002a04:	1a002721 	.word	0x1a002721
1a002a08:	1a00279d 	.word	0x1a00279d
1a002a0c:	1a0039b9 	.word	0x1a0039b9
1a002a10:	1a003810 	.word	0x1a003810
1a002a14:	2303      	movs	r3, #3
1a002a16:	9348      	str	r3, [sp, #288]	@ 0x120
1a002a18:	230a      	movs	r3, #10
1a002a1a:	9343      	str	r3, [sp, #268]	@ 0x10c
1a002a1c:	6863      	ldr	r3, [r4, #4]
1a002a1e:	2b00      	cmp	r3, #0
1a002a20:	dd4d      	ble.n	1a002abe <__ssvfiscanf_r+0x2ea>
1a002a22:	9b42      	ldr	r3, [sp, #264]	@ 0x108
1a002a24:	0658      	lsls	r0, r3, #25
1a002a26:	d524      	bpl.n	1a002a72 <__ssvfiscanf_r+0x29e>
1a002a28:	9b48      	ldr	r3, [sp, #288]	@ 0x120
1a002a2a:	2b02      	cmp	r3, #2
1a002a2c:	f340 8083 	ble.w	1a002b36 <__ssvfiscanf_r+0x362>
1a002a30:	2b04      	cmp	r3, #4
1a002a32:	f340 8087 	ble.w	1a002b44 <__ssvfiscanf_r+0x370>
1a002a36:	4b47      	ldr	r3, [pc, #284]	@ (1a002b54 <__ssvfiscanf_r+0x380>)
1a002a38:	2b00      	cmp	r3, #0
1a002a3a:	f43f af0e 	beq.w	1a00285a <__ssvfiscanf_r+0x86>
1a002a3e:	ab01      	add	r3, sp, #4
1a002a40:	4622      	mov	r2, r4
1a002a42:	a942      	add	r1, sp, #264	@ 0x108
1a002a44:	4630      	mov	r0, r6
1a002a46:	f3af 8000 	nop.w
1a002a4a:	2801      	cmp	r0, #1
1a002a4c:	f43f aeec 	beq.w	1a002828 <__ssvfiscanf_r+0x54>
1a002a50:	2802      	cmp	r0, #2
1a002a52:	f47f af02 	bne.w	1a00285a <__ssvfiscanf_r+0x86>
1a002a56:	9845      	ldr	r0, [sp, #276]	@ 0x114
1a002a58:	b118      	cbz	r0, 1a002a62 <__ssvfiscanf_r+0x28e>
1a002a5a:	89a3      	ldrh	r3, [r4, #12]
1a002a5c:	065b      	lsls	r3, r3, #25
1a002a5e:	f57f aee4 	bpl.w	1a00282a <__ssvfiscanf_r+0x56>
1a002a62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a002a66:	e6e0      	b.n	1a00282a <__ssvfiscanf_r+0x56>
1a002a68:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
1a002a6a:	4630      	mov	r0, r6
1a002a6c:	4798      	blx	r3
1a002a6e:	2800      	cmp	r0, #0
1a002a70:	d1f1      	bne.n	1a002a56 <__ssvfiscanf_r+0x282>
1a002a72:	6822      	ldr	r2, [r4, #0]
1a002a74:	7813      	ldrb	r3, [r2, #0]
1a002a76:	5cfb      	ldrb	r3, [r7, r3]
1a002a78:	0719      	lsls	r1, r3, #28
1a002a7a:	d5d5      	bpl.n	1a002a28 <__ssvfiscanf_r+0x254>
1a002a7c:	6863      	ldr	r3, [r4, #4]
1a002a7e:	9946      	ldr	r1, [sp, #280]	@ 0x118
1a002a80:	3b01      	subs	r3, #1
1a002a82:	1c48      	adds	r0, r1, #1
1a002a84:	2b00      	cmp	r3, #0
1a002a86:	4621      	mov	r1, r4
1a002a88:	9046      	str	r0, [sp, #280]	@ 0x118
1a002a8a:	6063      	str	r3, [r4, #4]
1a002a8c:	f102 0201 	add.w	r2, r2, #1
1a002a90:	ddea      	ble.n	1a002a68 <__ssvfiscanf_r+0x294>
1a002a92:	6022      	str	r2, [r4, #0]
1a002a94:	7813      	ldrb	r3, [r2, #0]
1a002a96:	5cfb      	ldrb	r3, [r7, r3]
1a002a98:	0719      	lsls	r1, r3, #28
1a002a9a:	d5c5      	bpl.n	1a002a28 <__ssvfiscanf_r+0x254>
1a002a9c:	e7ee      	b.n	1a002a7c <__ssvfiscanf_r+0x2a8>
1a002a9e:	2305      	movs	r3, #5
1a002aa0:	9348      	str	r3, [sp, #288]	@ 0x120
1a002aa2:	e7bb      	b.n	1a002a1c <__ssvfiscanf_r+0x248>
1a002aa4:	9a42      	ldr	r2, [sp, #264]	@ 0x108
1a002aa6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
1a002aaa:	9242      	str	r2, [sp, #264]	@ 0x108
1a002aac:	2210      	movs	r2, #16
1a002aae:	2b6e      	cmp	r3, #110	@ 0x6e
1a002ab0:	9243      	str	r2, [sp, #268]	@ 0x10c
1a002ab2:	d81d      	bhi.n	1a002af0 <__ssvfiscanf_r+0x31c>
1a002ab4:	2303      	movs	r3, #3
1a002ab6:	9348      	str	r3, [sp, #288]	@ 0x120
1a002ab8:	6863      	ldr	r3, [r4, #4]
1a002aba:	2b00      	cmp	r3, #0
1a002abc:	dcb1      	bgt.n	1a002a22 <__ssvfiscanf_r+0x24e>
1a002abe:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
1a002ac0:	4621      	mov	r1, r4
1a002ac2:	4630      	mov	r0, r6
1a002ac4:	4798      	blx	r3
1a002ac6:	2800      	cmp	r0, #0
1a002ac8:	d0ab      	beq.n	1a002a22 <__ssvfiscanf_r+0x24e>
1a002aca:	e7c4      	b.n	1a002a56 <__ssvfiscanf_r+0x282>
1a002acc:	220a      	movs	r2, #10
1a002ace:	e7ee      	b.n	1a002aae <__ssvfiscanf_r+0x2da>
1a002ad0:	9b42      	ldr	r3, [sp, #264]	@ 0x108
1a002ad2:	06da      	lsls	r2, r3, #27
1a002ad4:	f53f aec1 	bmi.w	1a00285a <__ssvfiscanf_r+0x86>
1a002ad8:	9a01      	ldr	r2, [sp, #4]
1a002ada:	9946      	ldr	r1, [sp, #280]	@ 0x118
1a002adc:	1d10      	adds	r0, r2, #4
1a002ade:	9001      	str	r0, [sp, #4]
1a002ae0:	07db      	lsls	r3, r3, #31
1a002ae2:	6813      	ldr	r3, [r2, #0]
1a002ae4:	bf4c      	ite	mi
1a002ae6:	8019      	strhmi	r1, [r3, #0]
1a002ae8:	6019      	strpl	r1, [r3, #0]
1a002aea:	e6b6      	b.n	1a00285a <__ssvfiscanf_r+0x86>
1a002aec:	2308      	movs	r3, #8
1a002aee:	9343      	str	r3, [sp, #268]	@ 0x10c
1a002af0:	2304      	movs	r3, #4
1a002af2:	e7e0      	b.n	1a002ab6 <__ssvfiscanf_r+0x2e2>
1a002af4:	9b42      	ldr	r3, [sp, #264]	@ 0x108
1a002af6:	f443 7308 	orr.w	r3, r3, #544	@ 0x220
1a002afa:	9342      	str	r3, [sp, #264]	@ 0x108
1a002afc:	2310      	movs	r3, #16
1a002afe:	9343      	str	r3, [sp, #268]	@ 0x10c
1a002b00:	e7f6      	b.n	1a002af0 <__ssvfiscanf_r+0x31c>
1a002b02:	2302      	movs	r3, #2
1a002b04:	9348      	str	r3, [sp, #288]	@ 0x120
1a002b06:	e789      	b.n	1a002a1c <__ssvfiscanf_r+0x248>
1a002b08:	4651      	mov	r1, sl
1a002b0a:	4640      	mov	r0, r8
1a002b0c:	f000 fa5e 	bl	1a002fcc <__sccl>
1a002b10:	9b42      	ldr	r3, [sp, #264]	@ 0x108
1a002b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1a002b16:	9342      	str	r3, [sp, #264]	@ 0x108
1a002b18:	4682      	mov	sl, r0
1a002b1a:	2301      	movs	r3, #1
1a002b1c:	e7cb      	b.n	1a002ab6 <__ssvfiscanf_r+0x2e2>
1a002b1e:	9b42      	ldr	r3, [sp, #264]	@ 0x108
1a002b20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1a002b24:	9342      	str	r3, [sp, #264]	@ 0x108
1a002b26:	2300      	movs	r3, #0
1a002b28:	9348      	str	r3, [sp, #288]	@ 0x120
1a002b2a:	e777      	b.n	1a002a1c <__ssvfiscanf_r+0x248>
1a002b2c:	2300      	movs	r3, #0
1a002b2e:	9343      	str	r3, [sp, #268]	@ 0x10c
1a002b30:	e7c0      	b.n	1a002ab4 <__ssvfiscanf_r+0x2e0>
1a002b32:	4655      	mov	r5, sl
1a002b34:	e671      	b.n	1a00281a <__ssvfiscanf_r+0x46>
1a002b36:	ab01      	add	r3, sp, #4
1a002b38:	4622      	mov	r2, r4
1a002b3a:	a942      	add	r1, sp, #264	@ 0x108
1a002b3c:	4630      	mov	r0, r6
1a002b3e:	f000 f80b 	bl	1a002b58 <_scanf_chars>
1a002b42:	e782      	b.n	1a002a4a <__ssvfiscanf_r+0x276>
1a002b44:	ab01      	add	r3, sp, #4
1a002b46:	4622      	mov	r2, r4
1a002b48:	a942      	add	r1, sp, #264	@ 0x108
1a002b4a:	4630      	mov	r0, r6
1a002b4c:	f000 f86c 	bl	1a002c28 <_scanf_i>
1a002b50:	e77b      	b.n	1a002a4a <__ssvfiscanf_r+0x276>
1a002b52:	bf00      	nop
1a002b54:	00000000 	.word	0x00000000

1a002b58 <_scanf_chars>:
1a002b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002b5c:	460d      	mov	r5, r1
1a002b5e:	4614      	mov	r4, r2
1a002b60:	68aa      	ldr	r2, [r5, #8]
1a002b62:	6989      	ldr	r1, [r1, #24]
1a002b64:	4607      	mov	r7, r0
1a002b66:	b92a      	cbnz	r2, 1a002b74 <_scanf_chars+0x1c>
1a002b68:	2900      	cmp	r1, #0
1a002b6a:	bf14      	ite	ne
1a002b6c:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
1a002b70:	2201      	moveq	r2, #1
1a002b72:	60aa      	str	r2, [r5, #8]
1a002b74:	682a      	ldr	r2, [r5, #0]
1a002b76:	06d0      	lsls	r0, r2, #27
1a002b78:	d403      	bmi.n	1a002b82 <_scanf_chars+0x2a>
1a002b7a:	681a      	ldr	r2, [r3, #0]
1a002b7c:	1d10      	adds	r0, r2, #4
1a002b7e:	6018      	str	r0, [r3, #0]
1a002b80:	6816      	ldr	r6, [r2, #0]
1a002b82:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 1a002c24 <_scanf_chars+0xcc>
1a002b86:	f04f 0900 	mov.w	r9, #0
1a002b8a:	b301      	cbz	r1, 1a002bce <_scanf_chars+0x76>
1a002b8c:	2901      	cmp	r1, #1
1a002b8e:	d037      	beq.n	1a002c00 <_scanf_chars+0xa8>
1a002b90:	2902      	cmp	r1, #2
1a002b92:	d13b      	bne.n	1a002c0c <_scanf_chars+0xb4>
1a002b94:	6823      	ldr	r3, [r4, #0]
1a002b96:	781a      	ldrb	r2, [r3, #0]
1a002b98:	f818 2002 	ldrb.w	r2, [r8, r2]
1a002b9c:	0712      	lsls	r2, r2, #28
1a002b9e:	d435      	bmi.n	1a002c0c <_scanf_chars+0xb4>
1a002ba0:	682a      	ldr	r2, [r5, #0]
1a002ba2:	06d1      	lsls	r1, r2, #27
1a002ba4:	f109 0901 	add.w	r9, r9, #1
1a002ba8:	d403      	bmi.n	1a002bb2 <_scanf_chars+0x5a>
1a002baa:	781b      	ldrb	r3, [r3, #0]
1a002bac:	f806 3b01 	strb.w	r3, [r6], #1
1a002bb0:	6823      	ldr	r3, [r4, #0]
1a002bb2:	6861      	ldr	r1, [r4, #4]
1a002bb4:	68aa      	ldr	r2, [r5, #8]
1a002bb6:	3901      	subs	r1, #1
1a002bb8:	3301      	adds	r3, #1
1a002bba:	3a01      	subs	r2, #1
1a002bbc:	e9c4 3100 	strd	r3, r1, [r4]
1a002bc0:	60aa      	str	r2, [r5, #8]
1a002bc2:	b16a      	cbz	r2, 1a002be0 <_scanf_chars+0x88>
1a002bc4:	2900      	cmp	r1, #0
1a002bc6:	dd04      	ble.n	1a002bd2 <_scanf_chars+0x7a>
1a002bc8:	69a9      	ldr	r1, [r5, #24]
1a002bca:	2900      	cmp	r1, #0
1a002bcc:	d1de      	bne.n	1a002b8c <_scanf_chars+0x34>
1a002bce:	6823      	ldr	r3, [r4, #0]
1a002bd0:	e7e6      	b.n	1a002ba0 <_scanf_chars+0x48>
1a002bd2:	f8d5 3180 	ldr.w	r3, [r5, #384]	@ 0x180
1a002bd6:	4621      	mov	r1, r4
1a002bd8:	4638      	mov	r0, r7
1a002bda:	4798      	blx	r3
1a002bdc:	2800      	cmp	r0, #0
1a002bde:	d0f3      	beq.n	1a002bc8 <_scanf_chars+0x70>
1a002be0:	682b      	ldr	r3, [r5, #0]
1a002be2:	f013 0310 	ands.w	r3, r3, #16
1a002be6:	d105      	bne.n	1a002bf4 <_scanf_chars+0x9c>
1a002be8:	68ea      	ldr	r2, [r5, #12]
1a002bea:	3201      	adds	r2, #1
1a002bec:	60ea      	str	r2, [r5, #12]
1a002bee:	69aa      	ldr	r2, [r5, #24]
1a002bf0:	b102      	cbz	r2, 1a002bf4 <_scanf_chars+0x9c>
1a002bf2:	7033      	strb	r3, [r6, #0]
1a002bf4:	692b      	ldr	r3, [r5, #16]
1a002bf6:	444b      	add	r3, r9
1a002bf8:	2000      	movs	r0, #0
1a002bfa:	612b      	str	r3, [r5, #16]
1a002bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a002c00:	6823      	ldr	r3, [r4, #0]
1a002c02:	696a      	ldr	r2, [r5, #20]
1a002c04:	7818      	ldrb	r0, [r3, #0]
1a002c06:	5c12      	ldrb	r2, [r2, r0]
1a002c08:	2a00      	cmp	r2, #0
1a002c0a:	d1c9      	bne.n	1a002ba0 <_scanf_chars+0x48>
1a002c0c:	f1b9 0f00 	cmp.w	r9, #0
1a002c10:	d1e6      	bne.n	1a002be0 <_scanf_chars+0x88>
1a002c12:	2901      	cmp	r1, #1
1a002c14:	4608      	mov	r0, r1
1a002c16:	d0f1      	beq.n	1a002bfc <_scanf_chars+0xa4>
1a002c18:	682b      	ldr	r3, [r5, #0]
1a002c1a:	f013 0310 	ands.w	r3, r3, #16
1a002c1e:	d1e9      	bne.n	1a002bf4 <_scanf_chars+0x9c>
1a002c20:	e7e2      	b.n	1a002be8 <_scanf_chars+0x90>
1a002c22:	bf00      	nop
1a002c24:	1a0039b9 	.word	0x1a0039b9

1a002c28 <_scanf_i>:
1a002c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002c2c:	b087      	sub	sp, #28
1a002c2e:	460c      	mov	r4, r1
1a002c30:	4607      	mov	r7, r0
1a002c32:	4615      	mov	r5, r2
1a002c34:	4886      	ldr	r0, [pc, #536]	@ (1a002e50 <_scanf_i+0x228>)
1a002c36:	4a87      	ldr	r2, [pc, #540]	@ (1a002e54 <_scanf_i+0x22c>)
1a002c38:	9300      	str	r3, [sp, #0]
1a002c3a:	688b      	ldr	r3, [r1, #8]
1a002c3c:	6989      	ldr	r1, [r1, #24]
1a002c3e:	4e86      	ldr	r6, [pc, #536]	@ (1a002e58 <_scanf_i+0x230>)
1a002c40:	2903      	cmp	r1, #3
1a002c42:	bf08      	it	eq
1a002c44:	4610      	moveq	r0, r2
1a002c46:	9001      	str	r0, [sp, #4]
1a002c48:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
1a002c4c:	f103 3cff 	add.w	ip, r3, #4294967295	@ 0xffffffff
1a002c50:	f10d 0a0c 	add.w	sl, sp, #12
1a002c54:	f5bc 7fae 	cmp.w	ip, #348	@ 0x15c
1a002c58:	e88a 0007 	stmia.w	sl, {r0, r1, r2}
1a002c5c:	f240 80b0 	bls.w	1a002dc0 <_scanf_i+0x198>
1a002c60:	f46f 71ae 	mvn.w	r1, #348	@ 0x15c
1a002c64:	eb03 0901 	add.w	r9, r3, r1
1a002c68:	f240 135d 	movw	r3, #349	@ 0x15d
1a002c6c:	60a3      	str	r3, [r4, #8]
1a002c6e:	46a0      	mov	r8, r4
1a002c70:	f04f 0b00 	mov.w	fp, #0
1a002c74:	f858 2b1c 	ldr.w	r2, [r8], #28
1a002c78:	f442 6250 	orr.w	r2, r2, #3328	@ 0xd00
1a002c7c:	6022      	str	r2, [r4, #0]
1a002c7e:	4646      	mov	r6, r8
1a002c80:	682b      	ldr	r3, [r5, #0]
1a002c82:	f8da 0000 	ldr.w	r0, [sl]
1a002c86:	7819      	ldrb	r1, [r3, #0]
1a002c88:	2202      	movs	r2, #2
1a002c8a:	f7ff f979 	bl	1a001f80 <memchr>
1a002c8e:	b350      	cbz	r0, 1a002ce6 <_scanf_i+0xbe>
1a002c90:	f1bb 0f01 	cmp.w	fp, #1
1a002c94:	d00c      	beq.n	1a002cb0 <_scanf_i+0x88>
1a002c96:	f1bb 0f02 	cmp.w	fp, #2
1a002c9a:	f000 80b2 	beq.w	1a002e02 <_scanf_i+0x1da>
1a002c9e:	68a3      	ldr	r3, [r4, #8]
1a002ca0:	1e5a      	subs	r2, r3, #1
1a002ca2:	60a2      	str	r2, [r4, #8]
1a002ca4:	b9a3      	cbnz	r3, 1a002cd0 <_scanf_i+0xa8>
1a002ca6:	f04f 0b01 	mov.w	fp, #1
1a002caa:	f10a 0a04 	add.w	sl, sl, #4
1a002cae:	e7e7      	b.n	1a002c80 <_scanf_i+0x58>
1a002cb0:	e9d4 3200 	ldrd	r3, r2, [r4]
1a002cb4:	b91a      	cbnz	r2, 1a002cbe <_scanf_i+0x96>
1a002cb6:	2208      	movs	r2, #8
1a002cb8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
1a002cbc:	6062      	str	r2, [r4, #4]
1a002cbe:	f423 63a0 	bic.w	r3, r3, #1280	@ 0x500
1a002cc2:	6023      	str	r3, [r4, #0]
1a002cc4:	68a3      	ldr	r3, [r4, #8]
1a002cc6:	1e5a      	subs	r2, r3, #1
1a002cc8:	60a2      	str	r2, [r4, #8]
1a002cca:	2b00      	cmp	r3, #0
1a002ccc:	f000 808a 	beq.w	1a002de4 <_scanf_i+0x1bc>
1a002cd0:	682b      	ldr	r3, [r5, #0]
1a002cd2:	1c5a      	adds	r2, r3, #1
1a002cd4:	602a      	str	r2, [r5, #0]
1a002cd6:	781b      	ldrb	r3, [r3, #0]
1a002cd8:	f806 3b01 	strb.w	r3, [r6], #1
1a002cdc:	686b      	ldr	r3, [r5, #4]
1a002cde:	3b01      	subs	r3, #1
1a002ce0:	2b00      	cmp	r3, #0
1a002ce2:	606b      	str	r3, [r5, #4]
1a002ce4:	dd73      	ble.n	1a002dce <_scanf_i+0x1a6>
1a002ce6:	f10b 0b01 	add.w	fp, fp, #1
1a002cea:	f1bb 0f03 	cmp.w	fp, #3
1a002cee:	d1dc      	bne.n	1a002caa <_scanf_i+0x82>
1a002cf0:	6861      	ldr	r1, [r4, #4]
1a002cf2:	2900      	cmp	r1, #0
1a002cf4:	d067      	beq.n	1a002dc6 <_scanf_i+0x19e>
1a002cf6:	f1c1 0110 	rsb	r1, r1, #16
1a002cfa:	4b58      	ldr	r3, [pc, #352]	@ (1a002e5c <_scanf_i+0x234>)
1a002cfc:	6960      	ldr	r0, [r4, #20]
1a002cfe:	4419      	add	r1, r3
1a002d00:	f000 f964 	bl	1a002fcc <__sccl>
1a002d04:	68a3      	ldr	r3, [r4, #8]
1a002d06:	2b00      	cmp	r3, #0
1a002d08:	f000 809f 	beq.w	1a002e4a <_scanf_i+0x222>
1a002d0c:	f04f 0a00 	mov.w	sl, #0
1a002d10:	e006      	b.n	1a002d20 <_scanf_i+0xf8>
1a002d12:	682b      	ldr	r3, [r5, #0]
1a002d14:	3301      	adds	r3, #1
1a002d16:	602b      	str	r3, [r5, #0]
1a002d18:	68a3      	ldr	r3, [r4, #8]
1a002d1a:	3b01      	subs	r3, #1
1a002d1c:	60a3      	str	r3, [r4, #8]
1a002d1e:	b303      	cbz	r3, 1a002d62 <_scanf_i+0x13a>
1a002d20:	f8d5 e000 	ldr.w	lr, [r5]
1a002d24:	6962      	ldr	r2, [r4, #20]
1a002d26:	f89e c000 	ldrb.w	ip, [lr]
1a002d2a:	f812 100c 	ldrb.w	r1, [r2, ip]
1a002d2e:	6822      	ldr	r2, [r4, #0]
1a002d30:	4630      	mov	r0, r6
1a002d32:	b1b9      	cbz	r1, 1a002d64 <_scanf_i+0x13c>
1a002d34:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
1a002d38:	f422 6110 	bic.w	r1, r2, #2304	@ 0x900
1a002d3c:	d055      	beq.n	1a002dea <_scanf_i+0x1c2>
1a002d3e:	6021      	str	r1, [r4, #0]
1a002d40:	f89e 3000 	ldrb.w	r3, [lr]
1a002d44:	f800 3b01 	strb.w	r3, [r0], #1
1a002d48:	4606      	mov	r6, r0
1a002d4a:	686b      	ldr	r3, [r5, #4]
1a002d4c:	3b01      	subs	r3, #1
1a002d4e:	2b00      	cmp	r3, #0
1a002d50:	4629      	mov	r1, r5
1a002d52:	4638      	mov	r0, r7
1a002d54:	606b      	str	r3, [r5, #4]
1a002d56:	dcdc      	bgt.n	1a002d12 <_scanf_i+0xea>
1a002d58:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
1a002d5c:	4798      	blx	r3
1a002d5e:	2800      	cmp	r0, #0
1a002d60:	d0da      	beq.n	1a002d18 <_scanf_i+0xf0>
1a002d62:	6822      	ldr	r2, [r4, #0]
1a002d64:	05d1      	lsls	r1, r2, #23
1a002d66:	d50c      	bpl.n	1a002d82 <_scanf_i+0x15a>
1a002d68:	4546      	cmp	r6, r8
1a002d6a:	d907      	bls.n	1a002d7c <_scanf_i+0x154>
1a002d6c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
1a002d70:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
1a002d74:	462a      	mov	r2, r5
1a002d76:	4638      	mov	r0, r7
1a002d78:	3e01      	subs	r6, #1
1a002d7a:	4798      	blx	r3
1a002d7c:	4546      	cmp	r6, r8
1a002d7e:	d062      	beq.n	1a002e46 <_scanf_i+0x21e>
1a002d80:	6822      	ldr	r2, [r4, #0]
1a002d82:	f012 0210 	ands.w	r2, r2, #16
1a002d86:	d111      	bne.n	1a002dac <_scanf_i+0x184>
1a002d88:	7032      	strb	r2, [r6, #0]
1a002d8a:	6863      	ldr	r3, [r4, #4]
1a002d8c:	9d01      	ldr	r5, [sp, #4]
1a002d8e:	4638      	mov	r0, r7
1a002d90:	4641      	mov	r1, r8
1a002d92:	47a8      	blx	r5
1a002d94:	6823      	ldr	r3, [r4, #0]
1a002d96:	069a      	lsls	r2, r3, #26
1a002d98:	d546      	bpl.n	1a002e28 <_scanf_i+0x200>
1a002d9a:	9900      	ldr	r1, [sp, #0]
1a002d9c:	680b      	ldr	r3, [r1, #0]
1a002d9e:	1d1a      	adds	r2, r3, #4
1a002da0:	600a      	str	r2, [r1, #0]
1a002da2:	681b      	ldr	r3, [r3, #0]
1a002da4:	6018      	str	r0, [r3, #0]
1a002da6:	68e3      	ldr	r3, [r4, #12]
1a002da8:	3301      	adds	r3, #1
1a002daa:	60e3      	str	r3, [r4, #12]
1a002dac:	6923      	ldr	r3, [r4, #16]
1a002dae:	eba6 0608 	sub.w	r6, r6, r8
1a002db2:	4456      	add	r6, sl
1a002db4:	4433      	add	r3, r6
1a002db6:	6123      	str	r3, [r4, #16]
1a002db8:	2000      	movs	r0, #0
1a002dba:	b007      	add	sp, #28
1a002dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002dc0:	f04f 0900 	mov.w	r9, #0
1a002dc4:	e753      	b.n	1a002c6e <_scanf_i+0x46>
1a002dc6:	230a      	movs	r3, #10
1a002dc8:	6063      	str	r3, [r4, #4]
1a002dca:	2106      	movs	r1, #6
1a002dcc:	e795      	b.n	1a002cfa <_scanf_i+0xd2>
1a002dce:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
1a002dd2:	4629      	mov	r1, r5
1a002dd4:	4638      	mov	r0, r7
1a002dd6:	4798      	blx	r3
1a002dd8:	2800      	cmp	r0, #0
1a002dda:	d084      	beq.n	1a002ce6 <_scanf_i+0xbe>
1a002ddc:	6822      	ldr	r2, [r4, #0]
1a002dde:	f04f 0a00 	mov.w	sl, #0
1a002de2:	e7bf      	b.n	1a002d64 <_scanf_i+0x13c>
1a002de4:	f04f 0b02 	mov.w	fp, #2
1a002de8:	e75f      	b.n	1a002caa <_scanf_i+0x82>
1a002dea:	0512      	lsls	r2, r2, #20
1a002dec:	d5a7      	bpl.n	1a002d3e <_scanf_i+0x116>
1a002dee:	3301      	adds	r3, #1
1a002df0:	f10a 0a01 	add.w	sl, sl, #1
1a002df4:	f1b9 0f00 	cmp.w	r9, #0
1a002df8:	d0a7      	beq.n	1a002d4a <_scanf_i+0x122>
1a002dfa:	60a3      	str	r3, [r4, #8]
1a002dfc:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
1a002e00:	e7a3      	b.n	1a002d4a <_scanf_i+0x122>
1a002e02:	6823      	ldr	r3, [r4, #0]
1a002e04:	f403 62c0 	and.w	r2, r3, #1536	@ 0x600
1a002e08:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
1a002e0c:	f47f af70 	bne.w	1a002cf0 <_scanf_i+0xc8>
1a002e10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
1a002e14:	6023      	str	r3, [r4, #0]
1a002e16:	68a3      	ldr	r3, [r4, #8]
1a002e18:	2210      	movs	r2, #16
1a002e1a:	6062      	str	r2, [r4, #4]
1a002e1c:	1e5a      	subs	r2, r3, #1
1a002e1e:	60a2      	str	r2, [r4, #8]
1a002e20:	2b00      	cmp	r3, #0
1a002e22:	f43f af65 	beq.w	1a002cf0 <_scanf_i+0xc8>
1a002e26:	e753      	b.n	1a002cd0 <_scanf_i+0xa8>
1a002e28:	9d00      	ldr	r5, [sp, #0]
1a002e2a:	682a      	ldr	r2, [r5, #0]
1a002e2c:	07df      	lsls	r7, r3, #31
1a002e2e:	f102 0104 	add.w	r1, r2, #4
1a002e32:	d503      	bpl.n	1a002e3c <_scanf_i+0x214>
1a002e34:	6029      	str	r1, [r5, #0]
1a002e36:	6813      	ldr	r3, [r2, #0]
1a002e38:	8018      	strh	r0, [r3, #0]
1a002e3a:	e7b4      	b.n	1a002da6 <_scanf_i+0x17e>
1a002e3c:	9b00      	ldr	r3, [sp, #0]
1a002e3e:	6019      	str	r1, [r3, #0]
1a002e40:	6813      	ldr	r3, [r2, #0]
1a002e42:	6018      	str	r0, [r3, #0]
1a002e44:	e7af      	b.n	1a002da6 <_scanf_i+0x17e>
1a002e46:	2001      	movs	r0, #1
1a002e48:	e7b7      	b.n	1a002dba <_scanf_i+0x192>
1a002e4a:	469a      	mov	sl, r3
1a002e4c:	e789      	b.n	1a002d62 <_scanf_i+0x13a>
1a002e4e:	bf00      	nop
1a002e50:	1a0032e5 	.word	0x1a0032e5
1a002e54:	1a002f99 	.word	0x1a002f99
1a002e58:	1a0039ac 	.word	0x1a0039ac
1a002e5c:	1a003844 	.word	0x1a003844

1a002e60 <_strtol_l.isra.0>:
1a002e60:	2b24      	cmp	r3, #36	@ 0x24
1a002e62:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002e66:	d843      	bhi.n	1a002ef0 <_strtol_l.isra.0+0x90>
1a002e68:	2b01      	cmp	r3, #1
1a002e6a:	d041      	beq.n	1a002ef0 <_strtol_l.isra.0+0x90>
1a002e6c:	4680      	mov	r8, r0
1a002e6e:	4849      	ldr	r0, [pc, #292]	@ (1a002f94 <_strtol_l.isra.0+0x134>)
1a002e70:	461f      	mov	r7, r3
1a002e72:	468e      	mov	lr, r1
1a002e74:	4675      	mov	r5, lr
1a002e76:	f81e bb01 	ldrb.w	fp, [lr], #1
1a002e7a:	f810 400b 	ldrb.w	r4, [r0, fp]
1a002e7e:	f014 0408 	ands.w	r4, r4, #8
1a002e82:	d1f7      	bne.n	1a002e74 <_strtol_l.isra.0+0x14>
1a002e84:	f1bb 0f2d 	cmp.w	fp, #45	@ 0x2d
1a002e88:	d06f      	beq.n	1a002f6a <_strtol_l.isra.0+0x10a>
1a002e8a:	f1bb 0f2b 	cmp.w	fp, #43	@ 0x2b
1a002e8e:	bf08      	it	eq
1a002e90:	f89e b000 	ldrbeq.w	fp, [lr]
1a002e94:	f06f 4900 	mvn.w	r9, #2147483648	@ 0x80000000
1a002e98:	bf08      	it	eq
1a002e9a:	f105 0e02 	addeq.w	lr, r5, #2
1a002e9e:	bb73      	cbnz	r3, 1a002efe <_strtol_l.isra.0+0x9e>
1a002ea0:	f1bb 0f30 	cmp.w	fp, #48	@ 0x30
1a002ea4:	d04b      	beq.n	1a002f3e <_strtol_l.isra.0+0xde>
1a002ea6:	270a      	movs	r7, #10
1a002ea8:	463b      	mov	r3, r7
1a002eaa:	2500      	movs	r5, #0
1a002eac:	fbb9 f6f7 	udiv	r6, r9, r7
1a002eb0:	4628      	mov	r0, r5
1a002eb2:	fb07 9a16 	mls	sl, r7, r6, r9
1a002eb6:	e005      	b.n	1a002ec4 <_strtol_l.isra.0+0x64>
1a002eb8:	d03a      	beq.n	1a002f30 <_strtol_l.isra.0+0xd0>
1a002eba:	fb07 c000 	mla	r0, r7, r0, ip
1a002ebe:	2501      	movs	r5, #1
1a002ec0:	f81e bb01 	ldrb.w	fp, [lr], #1
1a002ec4:	f1ab 0c30 	sub.w	ip, fp, #48	@ 0x30
1a002ec8:	f1bc 0f09 	cmp.w	ip, #9
1a002ecc:	d906      	bls.n	1a002edc <_strtol_l.isra.0+0x7c>
1a002ece:	f1ab 0c41 	sub.w	ip, fp, #65	@ 0x41
1a002ed2:	f1bc 0f19 	cmp.w	ip, #25
1a002ed6:	d819      	bhi.n	1a002f0c <_strtol_l.isra.0+0xac>
1a002ed8:	f1ab 0c37 	sub.w	ip, fp, #55	@ 0x37
1a002edc:	4563      	cmp	r3, ip
1a002ede:	dd1e      	ble.n	1a002f1e <_strtol_l.isra.0+0xbe>
1a002ee0:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
1a002ee4:	d0ec      	beq.n	1a002ec0 <_strtol_l.isra.0+0x60>
1a002ee6:	4286      	cmp	r6, r0
1a002ee8:	d2e6      	bcs.n	1a002eb8 <_strtol_l.isra.0+0x58>
1a002eea:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
1a002eee:	e7e7      	b.n	1a002ec0 <_strtol_l.isra.0+0x60>
1a002ef0:	f000 fbf8 	bl	1a0036e4 <__errno>
1a002ef4:	2316      	movs	r3, #22
1a002ef6:	6003      	str	r3, [r0, #0]
1a002ef8:	2000      	movs	r0, #0
1a002efa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002efe:	2b10      	cmp	r3, #16
1a002f00:	d1d3      	bne.n	1a002eaa <_strtol_l.isra.0+0x4a>
1a002f02:	f1bb 0f30 	cmp.w	fp, #48	@ 0x30
1a002f06:	d023      	beq.n	1a002f50 <_strtol_l.isra.0+0xf0>
1a002f08:	461f      	mov	r7, r3
1a002f0a:	e7ce      	b.n	1a002eaa <_strtol_l.isra.0+0x4a>
1a002f0c:	f1ab 0c61 	sub.w	ip, fp, #97	@ 0x61
1a002f10:	f1bc 0f19 	cmp.w	ip, #25
1a002f14:	d803      	bhi.n	1a002f1e <_strtol_l.isra.0+0xbe>
1a002f16:	f1ab 0c57 	sub.w	ip, fp, #87	@ 0x57
1a002f1a:	4563      	cmp	r3, ip
1a002f1c:	dce0      	bgt.n	1a002ee0 <_strtol_l.isra.0+0x80>
1a002f1e:	1c6b      	adds	r3, r5, #1
1a002f20:	d02b      	beq.n	1a002f7a <_strtol_l.isra.0+0x11a>
1a002f22:	b954      	cbnz	r4, 1a002f3a <_strtol_l.isra.0+0xda>
1a002f24:	2a00      	cmp	r2, #0
1a002f26:	d0e8      	beq.n	1a002efa <_strtol_l.isra.0+0x9a>
1a002f28:	bb85      	cbnz	r5, 1a002f8c <_strtol_l.isra.0+0x12c>
1a002f2a:	6011      	str	r1, [r2, #0]
1a002f2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002f30:	45e2      	cmp	sl, ip
1a002f32:	dac2      	bge.n	1a002eba <_strtol_l.isra.0+0x5a>
1a002f34:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
1a002f38:	e7c2      	b.n	1a002ec0 <_strtol_l.isra.0+0x60>
1a002f3a:	4240      	negs	r0, r0
1a002f3c:	e7f2      	b.n	1a002f24 <_strtol_l.isra.0+0xc4>
1a002f3e:	f89e 3000 	ldrb.w	r3, [lr]
1a002f42:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
1a002f46:	2b58      	cmp	r3, #88	@ 0x58
1a002f48:	d008      	beq.n	1a002f5c <_strtol_l.isra.0+0xfc>
1a002f4a:	2708      	movs	r7, #8
1a002f4c:	463b      	mov	r3, r7
1a002f4e:	e7ac      	b.n	1a002eaa <_strtol_l.isra.0+0x4a>
1a002f50:	f89e 0000 	ldrb.w	r0, [lr]
1a002f54:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
1a002f58:	2858      	cmp	r0, #88	@ 0x58
1a002f5a:	d1d5      	bne.n	1a002f08 <_strtol_l.isra.0+0xa8>
1a002f5c:	2710      	movs	r7, #16
1a002f5e:	f89e b001 	ldrb.w	fp, [lr, #1]
1a002f62:	463b      	mov	r3, r7
1a002f64:	f10e 0e02 	add.w	lr, lr, #2
1a002f68:	e79f      	b.n	1a002eaa <_strtol_l.isra.0+0x4a>
1a002f6a:	f89e b000 	ldrb.w	fp, [lr]
1a002f6e:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
1a002f72:	f105 0e02 	add.w	lr, r5, #2
1a002f76:	2401      	movs	r4, #1
1a002f78:	e791      	b.n	1a002e9e <_strtol_l.isra.0+0x3e>
1a002f7a:	2322      	movs	r3, #34	@ 0x22
1a002f7c:	f8c8 3000 	str.w	r3, [r8]
1a002f80:	b132      	cbz	r2, 1a002f90 <_strtol_l.isra.0+0x130>
1a002f82:	f10e 31ff 	add.w	r1, lr, #4294967295	@ 0xffffffff
1a002f86:	4648      	mov	r0, r9
1a002f88:	6011      	str	r1, [r2, #0]
1a002f8a:	e7cf      	b.n	1a002f2c <_strtol_l.isra.0+0xcc>
1a002f8c:	4681      	mov	r9, r0
1a002f8e:	e7f8      	b.n	1a002f82 <_strtol_l.isra.0+0x122>
1a002f90:	4648      	mov	r0, r9
1a002f92:	e7b2      	b.n	1a002efa <_strtol_l.isra.0+0x9a>
1a002f94:	1a0039b9 	.word	0x1a0039b9

1a002f98 <_strtol_r>:
1a002f98:	e762      	b.n	1a002e60 <_strtol_l.isra.0>
1a002f9a:	bf00      	nop

1a002f9c <strtol_l>:
1a002f9c:	b410      	push	{r4}
1a002f9e:	4c04      	ldr	r4, [pc, #16]	@ (1a002fb0 <strtol_l+0x14>)
1a002fa0:	4684      	mov	ip, r0
1a002fa2:	4613      	mov	r3, r2
1a002fa4:	6820      	ldr	r0, [r4, #0]
1a002fa6:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002faa:	460a      	mov	r2, r1
1a002fac:	4661      	mov	r1, ip
1a002fae:	e757      	b.n	1a002e60 <_strtol_l.isra.0>
1a002fb0:	10000000 	.word	0x10000000

1a002fb4 <strtol>:
1a002fb4:	b410      	push	{r4}
1a002fb6:	4c04      	ldr	r4, [pc, #16]	@ (1a002fc8 <strtol+0x14>)
1a002fb8:	4684      	mov	ip, r0
1a002fba:	4613      	mov	r3, r2
1a002fbc:	6820      	ldr	r0, [r4, #0]
1a002fbe:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002fc2:	460a      	mov	r2, r1
1a002fc4:	4661      	mov	r1, ip
1a002fc6:	e74b      	b.n	1a002e60 <_strtol_l.isra.0>
1a002fc8:	10000000 	.word	0x10000000

1a002fcc <__sccl>:
1a002fcc:	b570      	push	{r4, r5, r6, lr}
1a002fce:	780c      	ldrb	r4, [r1, #0]
1a002fd0:	2c5e      	cmp	r4, #94	@ 0x5e
1a002fd2:	4686      	mov	lr, r0
1a002fd4:	d024      	beq.n	1a003020 <__sccl+0x54>
1a002fd6:	2300      	movs	r3, #0
1a002fd8:	1c48      	adds	r0, r1, #1
1a002fda:	469c      	mov	ip, r3
1a002fdc:	2200      	movs	r2, #0
1a002fde:	f363 0207 	bfi	r2, r3, #0, #8
1a002fe2:	f363 220f 	bfi	r2, r3, #8, #8
1a002fe6:	f363 4217 	bfi	r2, r3, #16, #8
1a002fea:	f363 621f 	bfi	r2, r3, #24, #8
1a002fee:	f50e 7180 	add.w	r1, lr, #256	@ 0x100
1a002ff2:	4673      	mov	r3, lr
1a002ff4:	f843 2b04 	str.w	r2, [r3], #4
1a002ff8:	428b      	cmp	r3, r1
1a002ffa:	d1fb      	bne.n	1a002ff4 <__sccl+0x28>
1a002ffc:	b174      	cbz	r4, 1a00301c <__sccl+0x50>
1a002ffe:	f08c 0101 	eor.w	r1, ip, #1
1a003002:	f80e 1004 	strb.w	r1, [lr, r4]
1a003006:	1c45      	adds	r5, r0, #1
1a003008:	f815 3c01 	ldrb.w	r3, [r5, #-1]
1a00300c:	2b2d      	cmp	r3, #45	@ 0x2d
1a00300e:	d00e      	beq.n	1a00302e <__sccl+0x62>
1a003010:	2b5d      	cmp	r3, #93	@ 0x5d
1a003012:	d00a      	beq.n	1a00302a <__sccl+0x5e>
1a003014:	b11b      	cbz	r3, 1a00301e <__sccl+0x52>
1a003016:	461c      	mov	r4, r3
1a003018:	4628      	mov	r0, r5
1a00301a:	e7f2      	b.n	1a003002 <__sccl+0x36>
1a00301c:	3801      	subs	r0, #1
1a00301e:	bd70      	pop	{r4, r5, r6, pc}
1a003020:	2301      	movs	r3, #1
1a003022:	784c      	ldrb	r4, [r1, #1]
1a003024:	1c88      	adds	r0, r1, #2
1a003026:	469c      	mov	ip, r3
1a003028:	e7d8      	b.n	1a002fdc <__sccl+0x10>
1a00302a:	4628      	mov	r0, r5
1a00302c:	bd70      	pop	{r4, r5, r6, pc}
1a00302e:	f890 c001 	ldrb.w	ip, [r0, #1]
1a003032:	f1bc 0f5d 	cmp.w	ip, #93	@ 0x5d
1a003036:	d0ee      	beq.n	1a003016 <__sccl+0x4a>
1a003038:	4564      	cmp	r4, ip
1a00303a:	dcec      	bgt.n	1a003016 <__sccl+0x4a>
1a00303c:	1c66      	adds	r6, r4, #1
1a00303e:	3002      	adds	r0, #2
1a003040:	eb0e 0206 	add.w	r2, lr, r6
1a003044:	f802 1b01 	strb.w	r1, [r2], #1
1a003048:	eba2 030e 	sub.w	r3, r2, lr
1a00304c:	3b01      	subs	r3, #1
1a00304e:	459c      	cmp	ip, r3
1a003050:	dcf8      	bgt.n	1a003044 <__sccl+0x78>
1a003052:	ebac 0304 	sub.w	r3, ip, r4
1a003056:	3b01      	subs	r3, #1
1a003058:	4564      	cmp	r4, ip
1a00305a:	bfa8      	it	ge
1a00305c:	2300      	movge	r3, #0
1a00305e:	3502      	adds	r5, #2
1a003060:	18f4      	adds	r4, r6, r3
1a003062:	e7d1      	b.n	1a003008 <__sccl+0x3c>

1a003064 <__submore>:
1a003064:	f101 0344 	add.w	r3, r1, #68	@ 0x44
1a003068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a00306c:	460c      	mov	r4, r1
1a00306e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
1a003070:	4299      	cmp	r1, r3
1a003072:	d014      	beq.n	1a00309e <__submore+0x3a>
1a003074:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
1a003076:	0077      	lsls	r7, r6, #1
1a003078:	463a      	mov	r2, r7
1a00307a:	f7ff f86b 	bl	1a002154 <_realloc_r>
1a00307e:	4605      	mov	r5, r0
1a003080:	b330      	cbz	r0, 1a0030d0 <__submore+0x6c>
1a003082:	eb00 0806 	add.w	r8, r0, r6
1a003086:	4601      	mov	r1, r0
1a003088:	4632      	mov	r2, r6
1a00308a:	4640      	mov	r0, r8
1a00308c:	f7fe ffc8 	bl	1a002020 <memcpy>
1a003090:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
1a003094:	f8c4 8000 	str.w	r8, [r4]
1a003098:	2000      	movs	r0, #0
1a00309a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00309e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
1a0030a2:	f7fe fe0f 	bl	1a001cc4 <_malloc_r>
1a0030a6:	b198      	cbz	r0, 1a0030d0 <__submore+0x6c>
1a0030a8:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
1a0030ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
1a0030b0:	e9c4 020d 	strd	r0, r2, [r4, #52]	@ 0x34
1a0030b4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
1a0030b8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
1a0030bc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
1a0030c0:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
1a0030c4:	f880 23fd 	strb.w	r2, [r0, #1021]	@ 0x3fd
1a0030c8:	f200 33fd 	addw	r3, r0, #1021	@ 0x3fd
1a0030cc:	6023      	str	r3, [r4, #0]
1a0030ce:	e7e3      	b.n	1a003098 <__submore+0x34>
1a0030d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a0030d4:	e7e1      	b.n	1a00309a <__submore+0x36>
1a0030d6:	bf00      	nop

1a0030d8 <_ungetc_r>:
1a0030d8:	b570      	push	{r4, r5, r6, lr}
1a0030da:	1c4c      	adds	r4, r1, #1
1a0030dc:	d02b      	beq.n	1a003136 <_ungetc_r+0x5e>
1a0030de:	460e      	mov	r6, r1
1a0030e0:	4605      	mov	r5, r0
1a0030e2:	4614      	mov	r4, r2
1a0030e4:	b110      	cbz	r0, 1a0030ec <_ungetc_r+0x14>
1a0030e6:	6a03      	ldr	r3, [r0, #32]
1a0030e8:	2b00      	cmp	r3, #0
1a0030ea:	d04c      	beq.n	1a003186 <_ungetc_r+0xae>
1a0030ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0030f0:	f023 0220 	bic.w	r2, r3, #32
1a0030f4:	0758      	lsls	r0, r3, #29
1a0030f6:	81a2      	strh	r2, [r4, #12]
1a0030f8:	d406      	bmi.n	1a003108 <_ungetc_r+0x30>
1a0030fa:	06d9      	lsls	r1, r3, #27
1a0030fc:	d51b      	bpl.n	1a003136 <_ungetc_r+0x5e>
1a0030fe:	071b      	lsls	r3, r3, #28
1a003100:	d434      	bmi.n	1a00316c <_ungetc_r+0x94>
1a003102:	f042 0204 	orr.w	r2, r2, #4
1a003106:	81a2      	strh	r2, [r4, #12]
1a003108:	6b62      	ldr	r2, [r4, #52]	@ 0x34
1a00310a:	6863      	ldr	r3, [r4, #4]
1a00310c:	b2f6      	uxtb	r6, r6
1a00310e:	b1aa      	cbz	r2, 1a00313c <_ungetc_r+0x64>
1a003110:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
1a003112:	429a      	cmp	r2, r3
1a003114:	dd09      	ble.n	1a00312a <_ungetc_r+0x52>
1a003116:	6823      	ldr	r3, [r4, #0]
1a003118:	1e5a      	subs	r2, r3, #1
1a00311a:	6022      	str	r2, [r4, #0]
1a00311c:	f803 6c01 	strb.w	r6, [r3, #-1]
1a003120:	6863      	ldr	r3, [r4, #4]
1a003122:	3301      	adds	r3, #1
1a003124:	6063      	str	r3, [r4, #4]
1a003126:	4630      	mov	r0, r6
1a003128:	bd70      	pop	{r4, r5, r6, pc}
1a00312a:	4621      	mov	r1, r4
1a00312c:	4628      	mov	r0, r5
1a00312e:	f7ff ff99 	bl	1a003064 <__submore>
1a003132:	2800      	cmp	r0, #0
1a003134:	d0ef      	beq.n	1a003116 <_ungetc_r+0x3e>
1a003136:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
1a00313a:	e7f4      	b.n	1a003126 <_ungetc_r+0x4e>
1a00313c:	6922      	ldr	r2, [r4, #16]
1a00313e:	6821      	ldr	r1, [r4, #0]
1a003140:	b12a      	cbz	r2, 1a00314e <_ungetc_r+0x76>
1a003142:	428a      	cmp	r2, r1
1a003144:	d203      	bcs.n	1a00314e <_ungetc_r+0x76>
1a003146:	f811 2c01 	ldrb.w	r2, [r1, #-1]
1a00314a:	42b2      	cmp	r2, r6
1a00314c:	d01e      	beq.n	1a00318c <_ungetc_r+0xb4>
1a00314e:	4622      	mov	r2, r4
1a003150:	e9c4 130f 	strd	r1, r3, [r4, #60]	@ 0x3c
1a003154:	f104 0044 	add.w	r0, r4, #68	@ 0x44
1a003158:	2303      	movs	r3, #3
1a00315a:	6360      	str	r0, [r4, #52]	@ 0x34
1a00315c:	63a3      	str	r3, [r4, #56]	@ 0x38
1a00315e:	f802 6f46 	strb.w	r6, [r2, #70]!
1a003162:	2301      	movs	r3, #1
1a003164:	e9c4 2300 	strd	r2, r3, [r4]
1a003168:	4630      	mov	r0, r6
1a00316a:	bd70      	pop	{r4, r5, r6, pc}
1a00316c:	4621      	mov	r1, r4
1a00316e:	4628      	mov	r0, r5
1a003170:	f000 fa76 	bl	1a003660 <_fflush_r>
1a003174:	2800      	cmp	r0, #0
1a003176:	d1de      	bne.n	1a003136 <_ungetc_r+0x5e>
1a003178:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a00317c:	60a0      	str	r0, [r4, #8]
1a00317e:	f022 0208 	bic.w	r2, r2, #8
1a003182:	61a0      	str	r0, [r4, #24]
1a003184:	e7bd      	b.n	1a003102 <_ungetc_r+0x2a>
1a003186:	f000 f9b1 	bl	1a0034ec <__sinit>
1a00318a:	e7af      	b.n	1a0030ec <_ungetc_r+0x14>
1a00318c:	3901      	subs	r1, #1
1a00318e:	3301      	adds	r3, #1
1a003190:	e9c4 1300 	strd	r1, r3, [r4]
1a003194:	e7c7      	b.n	1a003126 <_ungetc_r+0x4e>
1a003196:	bf00      	nop

1a003198 <ungetc>:
1a003198:	b410      	push	{r4}
1a00319a:	4c04      	ldr	r4, [pc, #16]	@ (1a0031ac <ungetc+0x14>)
1a00319c:	4603      	mov	r3, r0
1a00319e:	460a      	mov	r2, r1
1a0031a0:	6820      	ldr	r0, [r4, #0]
1a0031a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0031a6:	4619      	mov	r1, r3
1a0031a8:	f7ff bf96 	b.w	1a0030d8 <_ungetc_r>
1a0031ac:	10000000 	.word	0x10000000

1a0031b0 <_strtoul_l.isra.0>:
1a0031b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0031b4:	4607      	mov	r7, r0
1a0031b6:	4849      	ldr	r0, [pc, #292]	@ (1a0032dc <_strtoul_l.isra.0+0x12c>)
1a0031b8:	460e      	mov	r6, r1
1a0031ba:	4635      	mov	r5, r6
1a0031bc:	f816 eb01 	ldrb.w	lr, [r6], #1
1a0031c0:	f810 c00e 	ldrb.w	ip, [r0, lr]
1a0031c4:	f01c 0c08 	ands.w	ip, ip, #8
1a0031c8:	d1f7      	bne.n	1a0031ba <_strtoul_l.isra.0+0xa>
1a0031ca:	f1be 0f2d 	cmp.w	lr, #45	@ 0x2d
1a0031ce:	d05a      	beq.n	1a003286 <_strtoul_l.isra.0+0xd6>
1a0031d0:	f1be 0f2b 	cmp.w	lr, #43	@ 0x2b
1a0031d4:	bf03      	ittte	eq
1a0031d6:	f896 e000 	ldrbeq.w	lr, [r6]
1a0031da:	4664      	moveq	r4, ip
1a0031dc:	1cae      	addeq	r6, r5, #2
1a0031de:	4664      	movne	r4, ip
1a0031e0:	b94b      	cbnz	r3, 1a0031f6 <_strtoul_l.isra.0+0x46>
1a0031e2:	f1be 0f30 	cmp.w	lr, #48	@ 0x30
1a0031e6:	d05c      	beq.n	1a0032a2 <_strtoul_l.isra.0+0xf2>
1a0031e8:	230a      	movs	r3, #10
1a0031ea:	f8df 80f4 	ldr.w	r8, [pc, #244]	@ 1a0032e0 <_strtoul_l.isra.0+0x130>
1a0031ee:	f04f 0a05 	mov.w	sl, #5
1a0031f2:	4699      	mov	r9, r3
1a0031f4:	e00a      	b.n	1a00320c <_strtoul_l.isra.0+0x5c>
1a0031f6:	2b10      	cmp	r3, #16
1a0031f8:	d04a      	beq.n	1a003290 <_strtoul_l.isra.0+0xe0>
1a0031fa:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
1a0031fe:	fbb8 f8f3 	udiv	r8, r8, r3
1a003202:	fb03 fa08 	mul.w	sl, r3, r8
1a003206:	ea6f 0a0a 	mvn.w	sl, sl
1a00320a:	4699      	mov	r9, r3
1a00320c:	2500      	movs	r5, #0
1a00320e:	4628      	mov	r0, r5
1a003210:	e005      	b.n	1a00321e <_strtoul_l.isra.0+0x6e>
1a003212:	d02c      	beq.n	1a00326e <_strtoul_l.isra.0+0xbe>
1a003214:	fb09 c000 	mla	r0, r9, r0, ip
1a003218:	2501      	movs	r5, #1
1a00321a:	f816 eb01 	ldrb.w	lr, [r6], #1
1a00321e:	f1ae 0c30 	sub.w	ip, lr, #48	@ 0x30
1a003222:	f1bc 0f09 	cmp.w	ip, #9
1a003226:	d906      	bls.n	1a003236 <_strtoul_l.isra.0+0x86>
1a003228:	f1ae 0c41 	sub.w	ip, lr, #65	@ 0x41
1a00322c:	f1bc 0f19 	cmp.w	ip, #25
1a003230:	d80b      	bhi.n	1a00324a <_strtoul_l.isra.0+0x9a>
1a003232:	f1ae 0c37 	sub.w	ip, lr, #55	@ 0x37
1a003236:	4563      	cmp	r3, ip
1a003238:	dd10      	ble.n	1a00325c <_strtoul_l.isra.0+0xac>
1a00323a:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
1a00323e:	d0ec      	beq.n	1a00321a <_strtoul_l.isra.0+0x6a>
1a003240:	4540      	cmp	r0, r8
1a003242:	d9e6      	bls.n	1a003212 <_strtoul_l.isra.0+0x62>
1a003244:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
1a003248:	e7e7      	b.n	1a00321a <_strtoul_l.isra.0+0x6a>
1a00324a:	f1ae 0c61 	sub.w	ip, lr, #97	@ 0x61
1a00324e:	f1bc 0f19 	cmp.w	ip, #25
1a003252:	d803      	bhi.n	1a00325c <_strtoul_l.isra.0+0xac>
1a003254:	f1ae 0c57 	sub.w	ip, lr, #87	@ 0x57
1a003258:	4563      	cmp	r3, ip
1a00325a:	dcee      	bgt.n	1a00323a <_strtoul_l.isra.0+0x8a>
1a00325c:	1c6b      	adds	r3, r5, #1
1a00325e:	d00b      	beq.n	1a003278 <_strtoul_l.isra.0+0xc8>
1a003260:	b104      	cbz	r4, 1a003264 <_strtoul_l.isra.0+0xb4>
1a003262:	4240      	negs	r0, r0
1a003264:	b10a      	cbz	r2, 1a00326a <_strtoul_l.isra.0+0xba>
1a003266:	b965      	cbnz	r5, 1a003282 <_strtoul_l.isra.0+0xd2>
1a003268:	6011      	str	r1, [r2, #0]
1a00326a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00326e:	45d4      	cmp	ip, sl
1a003270:	ddd0      	ble.n	1a003214 <_strtoul_l.isra.0+0x64>
1a003272:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
1a003276:	e7d0      	b.n	1a00321a <_strtoul_l.isra.0+0x6a>
1a003278:	2322      	movs	r3, #34	@ 0x22
1a00327a:	603b      	str	r3, [r7, #0]
1a00327c:	4628      	mov	r0, r5
1a00327e:	2a00      	cmp	r2, #0
1a003280:	d0f3      	beq.n	1a00326a <_strtoul_l.isra.0+0xba>
1a003282:	1e71      	subs	r1, r6, #1
1a003284:	e7f0      	b.n	1a003268 <_strtoul_l.isra.0+0xb8>
1a003286:	f896 e000 	ldrb.w	lr, [r6]
1a00328a:	2401      	movs	r4, #1
1a00328c:	1cae      	adds	r6, r5, #2
1a00328e:	e7a7      	b.n	1a0031e0 <_strtoul_l.isra.0+0x30>
1a003290:	f1be 0f30 	cmp.w	lr, #48	@ 0x30
1a003294:	d011      	beq.n	1a0032ba <_strtoul_l.isra.0+0x10a>
1a003296:	f04f 0a0f 	mov.w	sl, #15
1a00329a:	f06f 4870 	mvn.w	r8, #4026531840	@ 0xf0000000
1a00329e:	4699      	mov	r9, r3
1a0032a0:	e7b4      	b.n	1a00320c <_strtoul_l.isra.0+0x5c>
1a0032a2:	7833      	ldrb	r3, [r6, #0]
1a0032a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
1a0032a8:	2b58      	cmp	r3, #88	@ 0x58
1a0032aa:	d00b      	beq.n	1a0032c4 <_strtoul_l.isra.0+0x114>
1a0032ac:	2308      	movs	r3, #8
1a0032ae:	f04f 0a07 	mov.w	sl, #7
1a0032b2:	f06f 4860 	mvn.w	r8, #3758096384	@ 0xe0000000
1a0032b6:	4699      	mov	r9, r3
1a0032b8:	e7a8      	b.n	1a00320c <_strtoul_l.isra.0+0x5c>
1a0032ba:	7830      	ldrb	r0, [r6, #0]
1a0032bc:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
1a0032c0:	2858      	cmp	r0, #88	@ 0x58
1a0032c2:	d1e8      	bne.n	1a003296 <_strtoul_l.isra.0+0xe6>
1a0032c4:	f04f 0910 	mov.w	r9, #16
1a0032c8:	f896 e001 	ldrb.w	lr, [r6, #1]
1a0032cc:	f04f 0a0f 	mov.w	sl, #15
1a0032d0:	3602      	adds	r6, #2
1a0032d2:	f06f 4870 	mvn.w	r8, #4026531840	@ 0xf0000000
1a0032d6:	464b      	mov	r3, r9
1a0032d8:	e798      	b.n	1a00320c <_strtoul_l.isra.0+0x5c>
1a0032da:	bf00      	nop
1a0032dc:	1a0039b9 	.word	0x1a0039b9
1a0032e0:	19999999 	.word	0x19999999

1a0032e4 <_strtoul_r>:
1a0032e4:	e764      	b.n	1a0031b0 <_strtoul_l.isra.0>
1a0032e6:	bf00      	nop

1a0032e8 <strtoul_l>:
1a0032e8:	b410      	push	{r4}
1a0032ea:	4c04      	ldr	r4, [pc, #16]	@ (1a0032fc <strtoul_l+0x14>)
1a0032ec:	4684      	mov	ip, r0
1a0032ee:	4613      	mov	r3, r2
1a0032f0:	6820      	ldr	r0, [r4, #0]
1a0032f2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0032f6:	460a      	mov	r2, r1
1a0032f8:	4661      	mov	r1, ip
1a0032fa:	e759      	b.n	1a0031b0 <_strtoul_l.isra.0>
1a0032fc:	10000000 	.word	0x10000000

1a003300 <strtoul>:
1a003300:	b410      	push	{r4}
1a003302:	4c04      	ldr	r4, [pc, #16]	@ (1a003314 <strtoul+0x14>)
1a003304:	4684      	mov	ip, r0
1a003306:	4613      	mov	r3, r2
1a003308:	6820      	ldr	r0, [r4, #0]
1a00330a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00330e:	460a      	mov	r2, r1
1a003310:	4661      	mov	r1, ip
1a003312:	e74d      	b.n	1a0031b0 <_strtoul_l.isra.0>
1a003314:	10000000 	.word	0x10000000

1a003318 <__fp_lock>:
1a003318:	2000      	movs	r0, #0
1a00331a:	4770      	bx	lr

1a00331c <stdio_exit_handler>:
1a00331c:	4a02      	ldr	r2, [pc, #8]	@ (1a003328 <stdio_exit_handler+0xc>)
1a00331e:	4903      	ldr	r1, [pc, #12]	@ (1a00332c <stdio_exit_handler+0x10>)
1a003320:	4803      	ldr	r0, [pc, #12]	@ (1a003330 <stdio_exit_handler+0x14>)
1a003322:	f000 b9e5 	b.w	1a0036f0 <_fwalk_sglue>
1a003326:	bf00      	nop
1a003328:	10000050 	.word	0x10000050
1a00332c:	1a003661 	.word	0x1a003661
1a003330:	10000004 	.word	0x10000004

1a003334 <cleanup_stdio>:
1a003334:	4b0c      	ldr	r3, [pc, #48]	@ (1a003368 <cleanup_stdio+0x34>)
1a003336:	6841      	ldr	r1, [r0, #4]
1a003338:	4299      	cmp	r1, r3
1a00333a:	b510      	push	{r4, lr}
1a00333c:	4604      	mov	r4, r0
1a00333e:	d001      	beq.n	1a003344 <cleanup_stdio+0x10>
1a003340:	f000 f98e 	bl	1a003660 <_fflush_r>
1a003344:	68a1      	ldr	r1, [r4, #8]
1a003346:	4b09      	ldr	r3, [pc, #36]	@ (1a00336c <cleanup_stdio+0x38>)
1a003348:	4299      	cmp	r1, r3
1a00334a:	d002      	beq.n	1a003352 <cleanup_stdio+0x1e>
1a00334c:	4620      	mov	r0, r4
1a00334e:	f000 f987 	bl	1a003660 <_fflush_r>
1a003352:	68e1      	ldr	r1, [r4, #12]
1a003354:	4b06      	ldr	r3, [pc, #24]	@ (1a003370 <cleanup_stdio+0x3c>)
1a003356:	4299      	cmp	r1, r3
1a003358:	d004      	beq.n	1a003364 <cleanup_stdio+0x30>
1a00335a:	4620      	mov	r0, r4
1a00335c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003360:	f000 b97e 	b.w	1a003660 <_fflush_r>
1a003364:	bd10      	pop	{r4, pc}
1a003366:	bf00      	nop
1a003368:	100000c4 	.word	0x100000c4
1a00336c:	1000012c 	.word	0x1000012c
1a003370:	10000194 	.word	0x10000194

1a003374 <__fp_unlock>:
1a003374:	2000      	movs	r0, #0
1a003376:	4770      	bx	lr

1a003378 <global_stdio_init.part.0>:
1a003378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a00337c:	4c2a      	ldr	r4, [pc, #168]	@ (1a003428 <global_stdio_init.part.0+0xb0>)
1a00337e:	492b      	ldr	r1, [pc, #172]	@ (1a00342c <global_stdio_init.part.0+0xb4>)
1a003380:	f8df 90bc 	ldr.w	r9, [pc, #188]	@ 1a003440 <global_stdio_init.part.0+0xc8>
1a003384:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 1a003444 <global_stdio_init.part.0+0xcc>
1a003388:	4f29      	ldr	r7, [pc, #164]	@ (1a003430 <global_stdio_init.part.0+0xb8>)
1a00338a:	f8c4 1138 	str.w	r1, [r4, #312]	@ 0x138
1a00338e:	2500      	movs	r5, #0
1a003390:	2304      	movs	r3, #4
1a003392:	2208      	movs	r2, #8
1a003394:	4629      	mov	r1, r5
1a003396:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
1a00339a:	4e26      	ldr	r6, [pc, #152]	@ (1a003434 <global_stdio_init.part.0+0xbc>)
1a00339c:	60e3      	str	r3, [r4, #12]
1a00339e:	e9c4 5500 	strd	r5, r5, [r4]
1a0033a2:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a0033a6:	60a5      	str	r5, [r4, #8]
1a0033a8:	6665      	str	r5, [r4, #100]	@ 0x64
1a0033aa:	61a5      	str	r5, [r4, #24]
1a0033ac:	f7fe fc14 	bl	1a001bd8 <memset>
1a0033b0:	4b21      	ldr	r3, [pc, #132]	@ (1a003438 <global_stdio_init.part.0+0xc0>)
1a0033b2:	6763      	str	r3, [r4, #116]	@ 0x74
1a0033b4:	2208      	movs	r2, #8
1a0033b6:	4629      	mov	r1, r5
1a0033b8:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
1a0033bc:	e9c4 4908 	strd	r4, r9, [r4, #32]
1a0033c0:	e9c4 870a 	strd	r8, r7, [r4, #40]	@ 0x28
1a0033c4:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
1a0033c8:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
1a0033cc:	6725      	str	r5, [r4, #112]	@ 0x70
1a0033ce:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
1a0033d2:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
1a0033d6:	6326      	str	r6, [r4, #48]	@ 0x30
1a0033d8:	f7fe fbfe 	bl	1a001bd8 <memset>
1a0033dc:	4b17      	ldr	r3, [pc, #92]	@ (1a00343c <global_stdio_init.part.0+0xc4>)
1a0033de:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
1a0033e2:	4629      	mov	r1, r5
1a0033e4:	f104 0368 	add.w	r3, r4, #104	@ 0x68
1a0033e8:	2208      	movs	r2, #8
1a0033ea:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
1a0033ee:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
1a0033f2:	e9c4 9823 	strd	r9, r8, [r4, #140]	@ 0x8c
1a0033f6:	e9c4 7625 	strd	r7, r6, [r4, #148]	@ 0x94
1a0033fa:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
1a0033fe:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
1a003402:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
1a003406:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
1a00340a:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
1a00340e:	f7fe fbe3 	bl	1a001bd8 <memset>
1a003412:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
1a003416:	e9c4 983d 	strd	r9, r8, [r4, #244]	@ 0xf4
1a00341a:	e9c4 763f 	strd	r7, r6, [r4, #252]	@ 0xfc
1a00341e:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
1a003422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003426:	bf00      	nop
1a003428:	100000c4 	.word	0x100000c4
1a00342c:	1a00331d 	.word	0x1a00331d
1a003430:	1a0026e5 	.word	0x1a0026e5
1a003434:	1a002709 	.word	0x1a002709
1a003438:	00010009 	.word	0x00010009
1a00343c:	00020012 	.word	0x00020012
1a003440:	1a00267d 	.word	0x1a00267d
1a003444:	1a0026a5 	.word	0x1a0026a5

1a003448 <__sfp>:
1a003448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00344a:	4b25      	ldr	r3, [pc, #148]	@ (1a0034e0 <__sfp+0x98>)
1a00344c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
1a003450:	4606      	mov	r6, r0
1a003452:	2b00      	cmp	r3, #0
1a003454:	d03c      	beq.n	1a0034d0 <__sfp+0x88>
1a003456:	4f23      	ldr	r7, [pc, #140]	@ (1a0034e4 <__sfp+0x9c>)
1a003458:	e9d7 3401 	ldrd	r3, r4, [r7, #4]
1a00345c:	3b01      	subs	r3, #1
1a00345e:	d504      	bpl.n	1a00346a <__sfp+0x22>
1a003460:	e01d      	b.n	1a00349e <__sfp+0x56>
1a003462:	1c5a      	adds	r2, r3, #1
1a003464:	f104 0468 	add.w	r4, r4, #104	@ 0x68
1a003468:	d019      	beq.n	1a00349e <__sfp+0x56>
1a00346a:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a00346e:	3b01      	subs	r3, #1
1a003470:	2d00      	cmp	r5, #0
1a003472:	d1f6      	bne.n	1a003462 <__sfp+0x1a>
1a003474:	4b1c      	ldr	r3, [pc, #112]	@ (1a0034e8 <__sfp+0xa0>)
1a003476:	60e3      	str	r3, [r4, #12]
1a003478:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a00347c:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a003480:	6665      	str	r5, [r4, #100]	@ 0x64
1a003482:	6025      	str	r5, [r4, #0]
1a003484:	61a5      	str	r5, [r4, #24]
1a003486:	2208      	movs	r2, #8
1a003488:	4629      	mov	r1, r5
1a00348a:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
1a00348e:	f7fe fba3 	bl	1a001bd8 <memset>
1a003492:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
1a003496:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
1a00349a:	4620      	mov	r0, r4
1a00349c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00349e:	683d      	ldr	r5, [r7, #0]
1a0034a0:	b10d      	cbz	r5, 1a0034a6 <__sfp+0x5e>
1a0034a2:	462f      	mov	r7, r5
1a0034a4:	e7d8      	b.n	1a003458 <__sfp+0x10>
1a0034a6:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
1a0034aa:	4630      	mov	r0, r6
1a0034ac:	f7fe fc0a 	bl	1a001cc4 <_malloc_r>
1a0034b0:	4604      	mov	r4, r0
1a0034b2:	b180      	cbz	r0, 1a0034d6 <__sfp+0x8e>
1a0034b4:	2304      	movs	r3, #4
1a0034b6:	e9c0 5300 	strd	r5, r3, [r0]
1a0034ba:	300c      	adds	r0, #12
1a0034bc:	4629      	mov	r1, r5
1a0034be:	60a0      	str	r0, [r4, #8]
1a0034c0:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
1a0034c4:	4625      	mov	r5, r4
1a0034c6:	f7fe fb87 	bl	1a001bd8 <memset>
1a0034ca:	603c      	str	r4, [r7, #0]
1a0034cc:	462f      	mov	r7, r5
1a0034ce:	e7c3      	b.n	1a003458 <__sfp+0x10>
1a0034d0:	f7ff ff52 	bl	1a003378 <global_stdio_init.part.0>
1a0034d4:	e7bf      	b.n	1a003456 <__sfp+0xe>
1a0034d6:	230c      	movs	r3, #12
1a0034d8:	6038      	str	r0, [r7, #0]
1a0034da:	6033      	str	r3, [r6, #0]
1a0034dc:	e7dd      	b.n	1a00349a <__sfp+0x52>
1a0034de:	bf00      	nop
1a0034e0:	100000c4 	.word	0x100000c4
1a0034e4:	10000050 	.word	0x10000050
1a0034e8:	ffff0001 	.word	0xffff0001

1a0034ec <__sinit>:
1a0034ec:	6a03      	ldr	r3, [r0, #32]
1a0034ee:	b103      	cbz	r3, 1a0034f2 <__sinit+0x6>
1a0034f0:	4770      	bx	lr
1a0034f2:	4b04      	ldr	r3, [pc, #16]	@ (1a003504 <__sinit+0x18>)
1a0034f4:	4a04      	ldr	r2, [pc, #16]	@ (1a003508 <__sinit+0x1c>)
1a0034f6:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
1a0034fa:	6202      	str	r2, [r0, #32]
1a0034fc:	2b00      	cmp	r3, #0
1a0034fe:	d1f7      	bne.n	1a0034f0 <__sinit+0x4>
1a003500:	e73a      	b.n	1a003378 <global_stdio_init.part.0>
1a003502:	bf00      	nop
1a003504:	100000c4 	.word	0x100000c4
1a003508:	1a003335 	.word	0x1a003335

1a00350c <__sfp_lock_acquire>:
1a00350c:	4770      	bx	lr
1a00350e:	bf00      	nop

1a003510 <__sfp_lock_release>:
1a003510:	4770      	bx	lr
1a003512:	bf00      	nop

1a003514 <__fp_lock_all>:
1a003514:	4a02      	ldr	r2, [pc, #8]	@ (1a003520 <__fp_lock_all+0xc>)
1a003516:	4903      	ldr	r1, [pc, #12]	@ (1a003524 <__fp_lock_all+0x10>)
1a003518:	2000      	movs	r0, #0
1a00351a:	f000 b8e9 	b.w	1a0036f0 <_fwalk_sglue>
1a00351e:	bf00      	nop
1a003520:	10000050 	.word	0x10000050
1a003524:	1a003319 	.word	0x1a003319

1a003528 <__fp_unlock_all>:
1a003528:	4a02      	ldr	r2, [pc, #8]	@ (1a003534 <__fp_unlock_all+0xc>)
1a00352a:	4903      	ldr	r1, [pc, #12]	@ (1a003538 <__fp_unlock_all+0x10>)
1a00352c:	2000      	movs	r0, #0
1a00352e:	f000 b8df 	b.w	1a0036f0 <_fwalk_sglue>
1a003532:	bf00      	nop
1a003534:	10000050 	.word	0x10000050
1a003538:	1a003375 	.word	0x1a003375

1a00353c <__sflush_r>:
1a00353c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a003540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003544:	071e      	lsls	r6, r3, #28
1a003546:	460c      	mov	r4, r1
1a003548:	4680      	mov	r8, r0
1a00354a:	d43d      	bmi.n	1a0035c8 <__sflush_r+0x8c>
1a00354c:	684a      	ldr	r2, [r1, #4]
1a00354e:	2a00      	cmp	r2, #0
1a003550:	dd56      	ble.n	1a003600 <__sflush_r+0xc4>
1a003552:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
1a003554:	2d00      	cmp	r5, #0
1a003556:	d034      	beq.n	1a0035c2 <__sflush_r+0x86>
1a003558:	2200      	movs	r2, #0
1a00355a:	f8d8 6000 	ldr.w	r6, [r8]
1a00355e:	f8c8 2000 	str.w	r2, [r8]
1a003562:	f413 5280 	ands.w	r2, r3, #4096	@ 0x1000
1a003566:	6a21      	ldr	r1, [r4, #32]
1a003568:	d157      	bne.n	1a00361a <__sflush_r+0xde>
1a00356a:	2301      	movs	r3, #1
1a00356c:	4640      	mov	r0, r8
1a00356e:	47a8      	blx	r5
1a003570:	1c45      	adds	r5, r0, #1
1a003572:	4602      	mov	r2, r0
1a003574:	d066      	beq.n	1a003644 <__sflush_r+0x108>
1a003576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00357a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
1a00357c:	6a21      	ldr	r1, [r4, #32]
1a00357e:	0758      	lsls	r0, r3, #29
1a003580:	d505      	bpl.n	1a00358e <__sflush_r+0x52>
1a003582:	6863      	ldr	r3, [r4, #4]
1a003584:	1ad2      	subs	r2, r2, r3
1a003586:	6b63      	ldr	r3, [r4, #52]	@ 0x34
1a003588:	b10b      	cbz	r3, 1a00358e <__sflush_r+0x52>
1a00358a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1a00358c:	1ad2      	subs	r2, r2, r3
1a00358e:	2300      	movs	r3, #0
1a003590:	4640      	mov	r0, r8
1a003592:	47a8      	blx	r5
1a003594:	1c43      	adds	r3, r0, #1
1a003596:	d042      	beq.n	1a00361e <__sflush_r+0xe2>
1a003598:	2300      	movs	r3, #0
1a00359a:	6063      	str	r3, [r4, #4]
1a00359c:	6923      	ldr	r3, [r4, #16]
1a00359e:	6023      	str	r3, [r4, #0]
1a0035a0:	89a3      	ldrh	r3, [r4, #12]
1a0035a2:	04df      	lsls	r7, r3, #19
1a0035a4:	d500      	bpl.n	1a0035a8 <__sflush_r+0x6c>
1a0035a6:	6560      	str	r0, [r4, #84]	@ 0x54
1a0035a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1a0035aa:	f8c8 6000 	str.w	r6, [r8]
1a0035ae:	b141      	cbz	r1, 1a0035c2 <__sflush_r+0x86>
1a0035b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
1a0035b4:	4299      	cmp	r1, r3
1a0035b6:	d002      	beq.n	1a0035be <__sflush_r+0x82>
1a0035b8:	4640      	mov	r0, r8
1a0035ba:	f7fe fc03 	bl	1a001dc4 <_free_r>
1a0035be:	2300      	movs	r3, #0
1a0035c0:	6363      	str	r3, [r4, #52]	@ 0x34
1a0035c2:	2000      	movs	r0, #0
1a0035c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0035c8:	690e      	ldr	r6, [r1, #16]
1a0035ca:	2e00      	cmp	r6, #0
1a0035cc:	d0f9      	beq.n	1a0035c2 <__sflush_r+0x86>
1a0035ce:	079b      	lsls	r3, r3, #30
1a0035d0:	680d      	ldr	r5, [r1, #0]
1a0035d2:	bf08      	it	eq
1a0035d4:	694b      	ldreq	r3, [r1, #20]
1a0035d6:	600e      	str	r6, [r1, #0]
1a0035d8:	bf18      	it	ne
1a0035da:	2300      	movne	r3, #0
1a0035dc:	1bad      	subs	r5, r5, r6
1a0035de:	608b      	str	r3, [r1, #8]
1a0035e0:	e00b      	b.n	1a0035fa <__sflush_r+0xbe>
1a0035e2:	462b      	mov	r3, r5
1a0035e4:	4632      	mov	r2, r6
1a0035e6:	6a21      	ldr	r1, [r4, #32]
1a0035e8:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
1a0035ea:	4640      	mov	r0, r8
1a0035ec:	47b8      	blx	r7
1a0035ee:	f1b0 0c00 	subs.w	ip, r0, #0
1a0035f2:	eba5 050c 	sub.w	r5, r5, ip
1a0035f6:	4466      	add	r6, ip
1a0035f8:	dd06      	ble.n	1a003608 <__sflush_r+0xcc>
1a0035fa:	2d00      	cmp	r5, #0
1a0035fc:	dcf1      	bgt.n	1a0035e2 <__sflush_r+0xa6>
1a0035fe:	e7e0      	b.n	1a0035c2 <__sflush_r+0x86>
1a003600:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
1a003602:	2a00      	cmp	r2, #0
1a003604:	dca5      	bgt.n	1a003552 <__sflush_r+0x16>
1a003606:	e7dc      	b.n	1a0035c2 <__sflush_r+0x86>
1a003608:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00360c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1a003610:	81a3      	strh	r3, [r4, #12]
1a003612:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a003616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00361a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
1a00361c:	e7af      	b.n	1a00357e <__sflush_r+0x42>
1a00361e:	f8d8 1000 	ldr.w	r1, [r8]
1a003622:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a003626:	291d      	cmp	r1, #29
1a003628:	d8f0      	bhi.n	1a00360c <__sflush_r+0xd0>
1a00362a:	4a0c      	ldr	r2, [pc, #48]	@ (1a00365c <__sflush_r+0x120>)
1a00362c:	40ca      	lsrs	r2, r1
1a00362e:	07d5      	lsls	r5, r2, #31
1a003630:	d5ec      	bpl.n	1a00360c <__sflush_r+0xd0>
1a003632:	6922      	ldr	r2, [r4, #16]
1a003634:	6022      	str	r2, [r4, #0]
1a003636:	2200      	movs	r2, #0
1a003638:	6062      	str	r2, [r4, #4]
1a00363a:	04da      	lsls	r2, r3, #19
1a00363c:	d5b4      	bpl.n	1a0035a8 <__sflush_r+0x6c>
1a00363e:	2900      	cmp	r1, #0
1a003640:	d0b1      	beq.n	1a0035a6 <__sflush_r+0x6a>
1a003642:	e7b1      	b.n	1a0035a8 <__sflush_r+0x6c>
1a003644:	f8d8 3000 	ldr.w	r3, [r8]
1a003648:	2b00      	cmp	r3, #0
1a00364a:	d094      	beq.n	1a003576 <__sflush_r+0x3a>
1a00364c:	2b1d      	cmp	r3, #29
1a00364e:	d001      	beq.n	1a003654 <__sflush_r+0x118>
1a003650:	2b16      	cmp	r3, #22
1a003652:	d1d9      	bne.n	1a003608 <__sflush_r+0xcc>
1a003654:	f8c8 6000 	str.w	r6, [r8]
1a003658:	e7b3      	b.n	1a0035c2 <__sflush_r+0x86>
1a00365a:	bf00      	nop
1a00365c:	20400001 	.word	0x20400001

1a003660 <_fflush_r>:
1a003660:	690b      	ldr	r3, [r1, #16]
1a003662:	b1b3      	cbz	r3, 1a003692 <_fflush_r+0x32>
1a003664:	b510      	push	{r4, lr}
1a003666:	4604      	mov	r4, r0
1a003668:	b082      	sub	sp, #8
1a00366a:	b108      	cbz	r0, 1a003670 <_fflush_r+0x10>
1a00366c:	6a03      	ldr	r3, [r0, #32]
1a00366e:	b15b      	cbz	r3, 1a003688 <_fflush_r+0x28>
1a003670:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a003674:	b913      	cbnz	r3, 1a00367c <_fflush_r+0x1c>
1a003676:	2000      	movs	r0, #0
1a003678:	b002      	add	sp, #8
1a00367a:	bd10      	pop	{r4, pc}
1a00367c:	4620      	mov	r0, r4
1a00367e:	b002      	add	sp, #8
1a003680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a003684:	f7ff bf5a 	b.w	1a00353c <__sflush_r>
1a003688:	9101      	str	r1, [sp, #4]
1a00368a:	f7ff ff2f 	bl	1a0034ec <__sinit>
1a00368e:	9901      	ldr	r1, [sp, #4]
1a003690:	e7ee      	b.n	1a003670 <_fflush_r+0x10>
1a003692:	2000      	movs	r0, #0
1a003694:	4770      	bx	lr
1a003696:	bf00      	nop

1a003698 <fflush>:
1a003698:	b1b8      	cbz	r0, 1a0036ca <fflush+0x32>
1a00369a:	b538      	push	{r3, r4, r5, lr}
1a00369c:	4a0d      	ldr	r2, [pc, #52]	@ (1a0036d4 <fflush+0x3c>)
1a00369e:	6903      	ldr	r3, [r0, #16]
1a0036a0:	6815      	ldr	r5, [r2, #0]
1a0036a2:	4604      	mov	r4, r0
1a0036a4:	b12b      	cbz	r3, 1a0036b2 <fflush+0x1a>
1a0036a6:	b10d      	cbz	r5, 1a0036ac <fflush+0x14>
1a0036a8:	6a2b      	ldr	r3, [r5, #32]
1a0036aa:	b153      	cbz	r3, 1a0036c2 <fflush+0x2a>
1a0036ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0036b0:	b90b      	cbnz	r3, 1a0036b6 <fflush+0x1e>
1a0036b2:	2000      	movs	r0, #0
1a0036b4:	bd38      	pop	{r3, r4, r5, pc}
1a0036b6:	4621      	mov	r1, r4
1a0036b8:	4628      	mov	r0, r5
1a0036ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a0036be:	f7ff bf3d 	b.w	1a00353c <__sflush_r>
1a0036c2:	4628      	mov	r0, r5
1a0036c4:	f7ff ff12 	bl	1a0034ec <__sinit>
1a0036c8:	e7f0      	b.n	1a0036ac <fflush+0x14>
1a0036ca:	4a03      	ldr	r2, [pc, #12]	@ (1a0036d8 <fflush+0x40>)
1a0036cc:	4903      	ldr	r1, [pc, #12]	@ (1a0036dc <fflush+0x44>)
1a0036ce:	4804      	ldr	r0, [pc, #16]	@ (1a0036e0 <fflush+0x48>)
1a0036d0:	f000 b80e 	b.w	1a0036f0 <_fwalk_sglue>
1a0036d4:	10000000 	.word	0x10000000
1a0036d8:	10000050 	.word	0x10000050
1a0036dc:	1a003661 	.word	0x1a003661
1a0036e0:	10000004 	.word	0x10000004

1a0036e4 <__errno>:
1a0036e4:	4b01      	ldr	r3, [pc, #4]	@ (1a0036ec <__errno+0x8>)
1a0036e6:	6818      	ldr	r0, [r3, #0]
1a0036e8:	4770      	bx	lr
1a0036ea:	bf00      	nop
1a0036ec:	10000000 	.word	0x10000000

1a0036f0 <_fwalk_sglue>:
1a0036f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0036f4:	4607      	mov	r7, r0
1a0036f6:	4688      	mov	r8, r1
1a0036f8:	4616      	mov	r6, r2
1a0036fa:	f04f 0900 	mov.w	r9, #0
1a0036fe:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
1a003702:	3d01      	subs	r5, #1
1a003704:	d410      	bmi.n	1a003728 <_fwalk_sglue+0x38>
1a003706:	89a3      	ldrh	r3, [r4, #12]
1a003708:	2b01      	cmp	r3, #1
1a00370a:	d908      	bls.n	1a00371e <_fwalk_sglue+0x2e>
1a00370c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a003710:	3301      	adds	r3, #1
1a003712:	4621      	mov	r1, r4
1a003714:	4638      	mov	r0, r7
1a003716:	d002      	beq.n	1a00371e <_fwalk_sglue+0x2e>
1a003718:	47c0      	blx	r8
1a00371a:	ea49 0900 	orr.w	r9, r9, r0
1a00371e:	3d01      	subs	r5, #1
1a003720:	1c6b      	adds	r3, r5, #1
1a003722:	f104 0468 	add.w	r4, r4, #104	@ 0x68
1a003726:	d1ee      	bne.n	1a003706 <_fwalk_sglue+0x16>
1a003728:	6836      	ldr	r6, [r6, #0]
1a00372a:	2e00      	cmp	r6, #0
1a00372c:	d1e7      	bne.n	1a0036fe <_fwalk_sglue+0xe>
1a00372e:	4648      	mov	r0, r9
1a003730:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a003734:	6f746f4d 	.word	0x6f746f4d
1a003738:	3a736572 	.word	0x3a736572
1a00373c:	3d314d20 	.word	0x3d314d20
1a003740:	202c6425 	.word	0x202c6425
1a003744:	253d324d 	.word	0x253d324d
1a003748:	00000a64 	.word	0x00000a64
1a00374c:	6f727245 	.word	0x6f727245
1a003750:	43203a72 	.word	0x43203a72
1a003754:	6e616d6f 	.word	0x6e616d6f
1a003758:	49206f64 	.word	0x49206f64
1a00375c:	6c61766e 	.word	0x6c61766e
1a003760:	0a6f6469 	.word	0x0a6f6469
1a003764:	00000000 	.word	0x00000000
1a003768:	203a4b4f 	.word	0x203a4b4f
1a00376c:	57524f46 	.word	0x57524f46
1a003770:	0a445241 	.word	0x0a445241
1a003774:	00000000 	.word	0x00000000
1a003778:	203a4b4f 	.word	0x203a4b4f
1a00377c:	4b434142 	.word	0x4b434142
1a003780:	44524157 	.word	0x44524157
1a003784:	00000a53 	.word	0x00000a53
1a003788:	203a4b4f 	.word	0x203a4b4f
1a00378c:	5446454c 	.word	0x5446454c
1a003790:	0000000a 	.word	0x0000000a
1a003794:	203a4b4f 	.word	0x203a4b4f
1a003798:	48474952 	.word	0x48474952
1a00379c:	00000a54 	.word	0x00000a54
1a0037a0:	6f727245 	.word	0x6f727245
1a0037a4:	43203a72 	.word	0x43203a72
1a0037a8:	6e616d6f 	.word	0x6e616d6f
1a0037ac:	44206f64 	.word	0x44206f64
1a0037b0:	6f637365 	.word	0x6f637365
1a0037b4:	69636f6e 	.word	0x69636f6e
1a0037b8:	000a6f64 	.word	0x000a6f64
1a0037bc:	2d554445 	.word	0x2d554445
1a0037c0:	41414943 	.word	0x41414943
1a0037c4:	766f5220 	.word	0x766f5220
1a0037c8:	43207265 	.word	0x43207265
1a0037cc:	72746e6f 	.word	0x72746e6f
1a0037d0:	656c6c6f 	.word	0x656c6c6f
1a0037d4:	6e492072 	.word	0x6e492072
1a0037d8:	61696369 	.word	0x61696369
1a0037dc:	617a696c 	.word	0x617a696c
1a0037e0:	0a2e6f64 	.word	0x0a2e6f64
1a0037e4:	00000000 	.word	0x00000000
1a0037e8:	64253a53 	.word	0x64253a53
1a0037ec:	3a75253a 	.word	0x3a75253a
1a0037f0:	00000045 	.word	0x00000045
1a0037f4:	75686825 	.word	0x75686825
1a0037f8:	7568253a 	.word	0x7568253a
1a0037fc:	0000003a 	.word	0x0000003a
1a003800:	0f0f0f03 	.word	0x0f0f0f03
1a003804:	000000ff 	.word	0x000000ff
1a003808:	2b302d23 	.word	0x2b302d23
1a00380c:	00000020 	.word	0x00000020
1a003810:	004c6c68 	.word	0x004c6c68
1a003814:	45676665 	.word	0x45676665
1a003818:	00004746 	.word	0x00004746
1a00381c:	33323130 	.word	0x33323130
1a003820:	37363534 	.word	0x37363534
1a003824:	42413938 	.word	0x42413938
1a003828:	46454443 	.word	0x46454443
1a00382c:	00000000 	.word	0x00000000
1a003830:	33323130 	.word	0x33323130
1a003834:	37363534 	.word	0x37363534
1a003838:	62613938 	.word	0x62613938
1a00383c:	66656463 	.word	0x66656463
1a003840:	00000000 	.word	0x00000000
1a003844:	61462d41 	.word	0x61462d41
1a003848:	3938662d 	.word	0x3938662d
1a00384c:	33323130 	.word	0x33323130
1a003850:	37363534 	.word	0x37363534
1a003854:	0000005d 	.word	0x0000005d
1a003858:	00002d2b 	.word	0x00002d2b
1a00385c:	00003030 	.word	0x00003030
1a003860:	00005878 	.word	0x00005878
1a003864:	08040201 	.word	0x08040201

1a003868 <periph_to_base>:
1a003868:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a003878:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a003888:	000100e0 01000100 01200003 00060120     .......... . ...
1a003898:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0038a8:	01820013 00120182 01a201a2 01c20011     ................
1a0038b8:	001001c2 01e201e2 0202000f 000e0202     ................
1a0038c8:	02220222 0223000d 001c0223              "."...#.#...

1a0038d4 <InitClkStates>:
1a0038d4:	00010100 00010909 0001090a 01010701     ................
1a0038e4:	00010902 00010906 0101090c 0001090d     ................
1a0038f4:	0001090e 0001090f 00010910 00010911     ................
1a003904:	00010912 00010913 00011114 00011119     ................
1a003914:	0001111a 0001111b                       ........

1a00391c <UART_BClock>:
1a00391c:	01a201c2 01620182                       ......b.

1a003924 <UART_PClock>:
1a003924:	00820081 00a200a1                       ........

1a00392c <gpioLEDBits>:
1a00392c:	0b010e00 00050c01 02050105              ............

1a003938 <OscRateIn>:
1a003938:	00b71b00                                ....

1a00393c <ExtRateIn>:
1a00393c:	00000000                                ....

1a003940 <pinmuxing>:
1a003940:	00400a02 00400b02 00400c02 00440002     ..@...@...@...D.
1a003950:	00440102 00440202 00520302 00520402     ..D...D...R...R.
1a003960:	00520509 00570609 00570206 00500001     ..R...W...W...P.
1a003970:	00500101 00500201 00500601 00f30f01     ..P...P...P.....
1a003980:	00f71001 00f31101 00b31201 00f01301     ................
1a003990:	00b31401 00b60707 00f20000 00b60100     ................

1a0039a0 <InitClkStates>:
1a0039a0:	00010308 00010307 01010f01 1a003858     ............X8..
1a0039b0:	1a00385c 1a003860                       \8..`8..

1a0039b8 <_ctype_>:
1a0039b8:	20202000 20202020 28282020 20282828     .         ((((( 
1a0039c8:	20202020 20202020 20202020 20202020                     
1a0039d8:	10108820 10101010 10101010 10101010      ...............
1a0039e8:	04040410 04040404 10040404 10101010     ................
1a0039f8:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a003a08:	01010101 01010101 01010101 10101010     ................
1a003a18:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a003a28:	02020202 02020202 02020202 10101010     ................
1a003a38:	00000020 00000000 00000000 00000000      ...............
	...
