
rover_firmware.elf:     file format elf32-littlearm
rover_firmware.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000fe9

Program Header:
0x70000001 off    0x00012b94 vaddr 0x1a002b94 paddr 0x1a002b94 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00010064 vaddr 0x10000064 paddr 0x10000064 align 2**16
         filesz 0x00000000 memsz 0x000000c0 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00002b9c memsz 0x00002b9c flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a002b9c align 2**16
         filesz 0x00000064 memsz 0x00000064 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b94  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000064  10000000  1a002b9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020064  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020064  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020064  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020064  2**2
                  CONTENTS
  6 .bss          000000c0  10000064  10000064  00010064  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020064  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020064  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020064  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020064  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a002b94  1a002b94  00012b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  00020064  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  00020064  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  00020064  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  00020064  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  00020064  2**2
                  CONTENTS
 17 .noinit       00000000  10000124  10000124  00020064  2**2
                  CONTENTS
 18 .debug_info   0000e334  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000024b5  00000000  00000000  0002e398  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00003fef  00000000  00000000  0003084d  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000568  00000000  00000000  0003483c  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000548  00000000  00000000  00034da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  000082b6  00000000  00000000  000352ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   00007c0f  00000000  00000000  0003d5a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    0001c4cf  00000000  00000000  000451b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000068  00000000  00000000  00061680  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000032  00000000  00000000  000616e8  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00001538  00000000  00000000  0006171c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000064 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002b94 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10000124 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 uart_comm.c
1a000300 l     F .text	000000d8 parse_command_string
10000064 l     O .bss	00000010 last_received_command
10000074 l     O .bss	00000001 new_command_received
10000078 l     O .bss	00000080 rx_buffer
100000f8 l     O .bss	00000002 rx_write_index
00000000 l    df *ABS*	00000000 main.c
1a000558 l     F .text	00000020 control_motors
1a000578 l     F .text	00000118 process_rover_command
100000fc l     O .bss	00000004 tick_counter
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000730 l     F .text	0000002c Chip_UART_GetIndex
1a002888 l     O .text	00000008 UART_BClock
1a002890 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0008d8 l     F .text	000000a0 pll_calc_divs
1a000978 l     F .text	00000100 pll_get_frac
1a000a78 l     F .text	0000004c Chip_Clock_FindBaseClock
1a000cec l     F .text	00000022 Chip_Clock_GetDivRate
10000100 l     O .bss	00000008 audio_usb_pll_freq
1a0028a4 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a002910 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a002958 l     O .text	0000000c InitClkStates
1a002964 l     O .text	00000060 pinmuxing
00000000 l    df *ABS*	00000000 board.c
1a001114 l     F .text	00000044 Board_LED_Init
1a0029cc l     O .text	0000000c gpioLEDBits
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 system.c
10000108 l     O .bss	00000004 heap_end.11990
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 sscanf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 lib_a-strcmp.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strstr.c
00000000 l    df *ABS*	00000000 strtol.c
1a00169c l     F .text	000000f0 _strtol_l.isra.0
00000000 l    df *ABS*	00000000 nano-vfprintf.c
00000000 l    df *ABS*	00000000 nano-vfscanf.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 nano-vfscanf_i.c
00000000 l    df *ABS*	00000000 sccl.c
00000000 l    df *ABS*	00000000 strtoul.c
1a0023a0 l     F .text	000000ec _strtoul_l.isra.0
00000000 l    df *ABS*	00000000 ungetc.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 impure.c
10000004 l     O .data	00000060 impure_data
1a002798 g     F .text	00000010 _malloc_usable_size_r
1a0020a4 g     F .text	000000b0 _scanf_chars
1a000b10 g     F .text	0000001c Chip_Clock_GetDividerSource
1a0004f8 g     F .text	0000000c uart_is_new_command_available
1a00018a  w    F .text	00000002 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a00018a  w    F .text	00000002 I2C0_IRQHandler
10000118 g     O .bss	00000001 __lock___atexit_recursive_mutex
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a00278c g     F .text	0000000c __malloc_unlock
1a000720 g     F .text	00000010 SysTick_Handler
10000119 g     O .bss	00000001 __lock___arc4random_mutex
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a0025b0 g     F .text	00000034 memmove
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a002b9c g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
1a00018a  w    F .text	00000002 CAN1_IRQHandler
1a002154 g     F .text	000001e8 _scanf_i
1a001620 g     F .text	00000004 __seofread
1a002b9c g       .ARM.exidx	00000000 _etext
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a00018a  w    F .text	00000002 TIMER3_IRQHandler
1a000d8e g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a00018a  w    F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a001560 g     F .text	0000001c memcpy
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a000504 g     F .text	0000003c uart_get_received_command
1a00185c g     F .text	000001f0 _svfprintf_r
1a001254 g     F .text	00000000 .hidden __aeabi_uldivmod
10000124 g       .noinit	00000000 _noinit
10000114 g     O .bss	00000004 SystemCoreClock
1a00075c g     F .text	00000054 Chip_UART_Init
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a000dd8 g     F .text	0000004c Chip_Clock_GetRate
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
1a001ac6 g     F .text	0000003a __ssrefill_r
1a00109c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a001284 g     F .text	000002d0 .hidden __udivmoddi4
1a001234 g     F .text	00000020 _sbrk_r
1a0029c4 g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a00018a  w    F .text	00000002 GPIO1_IRQHandler
1a001b00 g     F .text	00000290 __ssvfscanf_r
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a002b94 g       .text	00000000 __exidx_start
1000011a g     O .bss	00000001 __lock___env_recursive_mutex
1a0002fc g     O .text	00000004 CRP_WORD
1000011b g     O .bss	00000001 __lock___sinit_recursive_mutex
1a002734 g     F .text	0000004c _realloc_r
1a00018a  w    F .text	00000002 ADC1_IRQHandler
1a001200 g     F .text	00000028 Board_Init
1a000114 g       .text	00000000 __data_section_table
1a001790 g     F .text	00000014 strtol
1a00018a  w    F .text	00000002 RTC_IRQHandler
10000124 g       .bss	00000000 _ebss
1a00018a  w    F .text	00000002 TIMER0_IRQHandler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a000ac4 g     F .text	0000004c Chip_Clock_EnableCrystal
1000011c g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018c g     F .text	0000001e data_init
1a00018a  w    F .text	00000002 TIMER1_IRQHandler
1a002b34 g     O .text	00000020 __sf_fake_stderr
1a002506 g     F .text	00000002 __retarget_lock_release_recursive
1a0003d8 g     F .text	000000a8 UART2_IRQHandler
1a000c80 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a0017a4 g     F .text	000000b6 __ssputs_r
1a00018a  w    F .text	00000002 GPIO2_IRQHandler
1a000480 g     F .text	00000078 uart_init
1a002510 g     F .text	00000000 memchr
1a0025e4 g     F .text	0000009c _free_r
1a000d68 g     F .text	00000026 Chip_Clock_GetBaseClock
10000064 g       .bss	00000000 _bss
1a001a4c g     F .text	0000007a _sungetc_r
1a00166e g     F .text	0000002e strstr
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a000e24 g     F .text	00000002 Chip_GPIO_Init
1a0029c8 g     O .text	00000004 OscRateIn
10000124 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a001648 g     F .text	00000026 strncpy
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a00248c g     F .text	00000004 _strtoul_r
1a000178 g       .text	00000000 __bss_section_table_end
1a0015cc g     F .text	00000054 sscanf
1a001554  w    F .text	00000002 .hidden __aeabi_ldiv0
1a00018a  w    F .text	00000002 USB0_IRQHandler
1a00018a  w    F .text	00000002 GPIO3_IRQHandler
1a002780 g     F .text	0000000c __malloc_lock
1a0007b0 g     F .text	00000028 Chip_UART_Send
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a002b54 g     O .text	00000020 __sf_fake_stdin
1a000b2c g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002504 g     F .text	00000002 __retarget_lock_acquire_recursive
1a00157c g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000690 g     F .text	00000090 main
1a00018a  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a00178c g     F .text	00000004 _strtol_r
1a0011e8 g     F .text	00000016 Board_LED_Toggle
1a002680 g     F .text	000000b4 _malloc_r
1a002490 g     F .text	00000074 __submore
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a000d9c g     F .text	0000003c Chip_Clock_EnableOpts
1a000b48 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000f94 g     F .text	00000054 fpuInit
1a001624 g     F .text	00000014 strcmp
1a0011bc g     F .text	0000002c Board_LED_Test
1a0015cc g     F .text	00000054 siscanf
1a000c00 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001228 g     F .text	0000000c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0007d8 g     F .text	00000024 Chip_UART_SendBlocking
1a00158c g     F .text	00000040 sprintf
1a001064 g     F .text	00000038 Board_SetupMuxing
1a0007fc g     F .text	000000dc Chip_UART_SetBaudFDR
1a00018a  w    F .text	00000002 ETH_IRQHandler
1a001d90 g     F .text	000000ea _printf_common
10000000 g     O .data	00000004 _impure_ptr
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a00185c g     F .text	000001f0 _svfiprintf_r
1a00018a  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
10000124 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1a001b00 g     F .text	00000290 __ssvfiscanf_r
1a00018a  w    F .text	00000002 DAC_IRQHandler
1a00116c g     F .text	00000028 Board_Debug_Init
10000064 g       .data	00000000 _edata
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
1000011d g     O .bss	00000001 __lock___at_quick_exit_mutex
1a000e28 g     F .text	00000158 Chip_SetupCoreClock
1a00018a  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a000fe8 g     F .text	0000007c ResetISR
1a000f80 g     F .text	00000014 SystemCoreClockUpdate
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a002b74 g     O .text	00000020 __sf_fake_stdout
1a00158c g     F .text	00000040 siprintf
1a00233c g     F .text	00000064 __sccl
1a001558 g     F .text	00000008 atoi
1a0029d8 g     O .text	00000101 _ctype_
1a001554  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a000540 g     F .text	00000018 uart_send_string_blocking
1000011e g     O .bss	00000001 __lock___dd_hash_mutex
1000011f g     O .bss	00000001 __lock___tz_mutex
1a001638 g     F .text	00000010 strlen
1a001e7c g     F .text	00000228 _printf_i
1a00018a  w    F .text	00000002 UART3_IRQHandler
10000110 g     O .bss	00000004 __malloc_sbrk_start
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a001194 g     F .text	00000028 Board_LED_Set
1a00018a  w    F .text	00000002 M0APP_IRQHandler
1000010c g     O .bss	00000004 __malloc_free_list
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a001158 g     F .text	00000014 Board_UART_Init
1a000d10 g     F .text	00000058 Chip_Clock_SetBaseClock
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
10000120 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a001108 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 e9 0f 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 00 00 00 00     }...............
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	21 07 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     !...............
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00006c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00007c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a d9 03 00 1a     ................
1a0000ac:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000bc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000cc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a002b9c 	.word	0x1a002b9c
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000064 	.word	0x00000064
1a000120:	1a002b9c 	.word	0x1a002b9c
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002b9c 	.word	0x1a002b9c
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002b9c 	.word	0x1a002b9c
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002b9c 	.word	0x1a002b9c
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000064 	.word	0x10000064
1a000154:	000000c0 	.word	0x000000c0
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <ADC0_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	f850 4b04 	ldr.w	r4, [r0], #4
1a000198:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	3304      	adds	r3, #4
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	428b      	cmp	r3, r1
1a0001ae:	d204      	bcs.n	1a0001ba <bss_init+0x10>
        *pulDest++ = 0;
1a0001b0:	2200      	movs	r2, #0
1a0001b2:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b6:	3304      	adds	r3, #4
1a0001b8:	e7f8      	b.n	1a0001ac <bss_init+0x2>
}
1a0001ba:	4770      	bx	lr
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <parse_command_string>:
/**
 * @brief Parsea una cadena de texto (comando JSON simplificado) y extrae la información.
 * Busca patrones como "CMD":"XXX", "M1":DDD, "M2":DDD
 */
static bool parse_command_string(const char *buffer, RoverCommand *command)
{
1a000300:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000302:	b083      	sub	sp, #12
    char *cmd_ptr, *m1_ptr, *m2_ptr;
    int parsed_m1 = 0;
    int parsed_m2 = 0;
    char cmd_str[4] = {0}; // Buffer temporal para el comando
1a000304:	2300      	movs	r3, #0
1a000306:	9301      	str	r3, [sp, #4]

    if (buffer == NULL || command == NULL)
1a000308:	2800      	cmp	r0, #0
1a00030a:	d052      	beq.n	1a0003b2 <parse_command_string+0xb2>
1a00030c:	4604      	mov	r4, r0
1a00030e:	2900      	cmp	r1, #0
1a000310:	d051      	beq.n	1a0003b6 <parse_command_string+0xb6>
1a000312:	460d      	mov	r5, r1
    {
        return false;
    }

    // Busca las claves en el string. strstr devuelve un puntero a la primera ocurrencia.
    cmd_ptr = strstr(buffer, "\"CMD\":\"");
1a000314:	492c      	ldr	r1, [pc, #176]	; (1a0003c8 <parse_command_string+0xc8>)
1a000316:	f001 f9aa 	bl	1a00166e <strstr>
1a00031a:	4606      	mov	r6, r0
    m1_ptr = strstr(buffer, "\"M1\":");
1a00031c:	492b      	ldr	r1, [pc, #172]	; (1a0003cc <parse_command_string+0xcc>)
1a00031e:	4620      	mov	r0, r4
1a000320:	f001 f9a5 	bl	1a00166e <strstr>
1a000324:	4607      	mov	r7, r0
    m2_ptr = strstr(buffer, "\"M2\":");
1a000326:	492a      	ldr	r1, [pc, #168]	; (1a0003d0 <parse_command_string+0xd0>)
1a000328:	4620      	mov	r0, r4
1a00032a:	f001 f9a0 	bl	1a00166e <strstr>
1a00032e:	4604      	mov	r4, r0

    // Verifica si se encontraron todas las claves esperadas
    if (cmd_ptr == NULL || m1_ptr == NULL || m2_ptr == NULL)
1a000330:	2e00      	cmp	r6, #0
1a000332:	d042      	beq.n	1a0003ba <parse_command_string+0xba>
1a000334:	2f00      	cmp	r7, #0
1a000336:	d042      	beq.n	1a0003be <parse_command_string+0xbe>
1a000338:	2800      	cmp	r0, #0
1a00033a:	d042      	beq.n	1a0003c2 <parse_command_string+0xc2>
        return false; // Formato incorrecto
    }

    // Extrae el comando (3 caracteres después de "CMD":")
    // sscanf es potente pero puede consumir más recursos. strncpy es más simple aquí.
    if (sscanf(cmd_ptr, "\"CMD\":\"%3[^\"]\"", cmd_str) == 1)
1a00033c:	aa01      	add	r2, sp, #4
1a00033e:	4925      	ldr	r1, [pc, #148]	; (1a0003d4 <parse_command_string+0xd4>)
1a000340:	4630      	mov	r0, r6
1a000342:	f001 f943 	bl	1a0015cc <siscanf>
1a000346:	2801      	cmp	r0, #1
1a000348:	d002      	beq.n	1a000350 <parse_command_string+0x50>
        strncpy(command->command, cmd_str, 3);
        command->command[3] = '\0'; // Asegura terminación null
    }
    else
    {
        return false; // No se pudo extraer el comando
1a00034a:	2000      	movs	r0, #0
        command->speed_M2 = parsed_m2;
    }

    command->valid = true; // El parseo (simplificado) fue exitoso
    return true;
}
1a00034c:	b003      	add	sp, #12
1a00034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        strncpy(command->command, cmd_str, 3);
1a000350:	2203      	movs	r2, #3
1a000352:	a901      	add	r1, sp, #4
1a000354:	4628      	mov	r0, r5
1a000356:	f001 f977 	bl	1a001648 <strncpy>
        command->command[3] = '\0'; // Asegura terminación null
1a00035a:	2300      	movs	r3, #0
1a00035c:	70eb      	strb	r3, [r5, #3]
    parsed_m1 = atoi(m1_ptr);
1a00035e:	1d78      	adds	r0, r7, #5
1a000360:	f001 f8fa 	bl	1a001558 <atoi>
1a000364:	4606      	mov	r6, r0
    parsed_m2 = atoi(m2_ptr);
1a000366:	1d60      	adds	r0, r4, #5
1a000368:	f001 f8f6 	bl	1a001558 <atoi>
    if (parsed_m1 < -100 || parsed_m1 > 100 || parsed_m2 < -100 || parsed_m2 > 100)
1a00036c:	f106 0364 	add.w	r3, r6, #100	; 0x64
1a000370:	2bc8      	cmp	r3, #200	; 0xc8
1a000372:	d804      	bhi.n	1a00037e <parse_command_string+0x7e>
1a000374:	f110 0f64 	cmn.w	r0, #100	; 0x64
1a000378:	db01      	blt.n	1a00037e <parse_command_string+0x7e>
1a00037a:	2864      	cmp	r0, #100	; 0x64
1a00037c:	dd16      	ble.n	1a0003ac <parse_command_string+0xac>
        command->speed_M1 = (parsed_m1 < -100) ? -100 : (parsed_m1 > 100 ? 100 : parsed_m1);
1a00037e:	f116 0f64 	cmn.w	r6, #100	; 0x64
1a000382:	db0d      	blt.n	1a0003a0 <parse_command_string+0xa0>
1a000384:	2e64      	cmp	r6, #100	; 0x64
1a000386:	bfa8      	it	ge
1a000388:	2664      	movge	r6, #100	; 0x64
1a00038a:	606e      	str	r6, [r5, #4]
        command->speed_M2 = (parsed_m2 < -100) ? -100 : (parsed_m2 > 100 ? 100 : parsed_m2);
1a00038c:	f110 0f64 	cmn.w	r0, #100	; 0x64
1a000390:	db09      	blt.n	1a0003a6 <parse_command_string+0xa6>
1a000392:	2864      	cmp	r0, #100	; 0x64
1a000394:	bfa8      	it	ge
1a000396:	2064      	movge	r0, #100	; 0x64
1a000398:	60a8      	str	r0, [r5, #8]
    command->valid = true; // El parseo (simplificado) fue exitoso
1a00039a:	2001      	movs	r0, #1
1a00039c:	7328      	strb	r0, [r5, #12]
    return true;
1a00039e:	e7d5      	b.n	1a00034c <parse_command_string+0x4c>
        command->speed_M1 = (parsed_m1 < -100) ? -100 : (parsed_m1 > 100 ? 100 : parsed_m1);
1a0003a0:	f06f 0663 	mvn.w	r6, #99	; 0x63
1a0003a4:	e7f1      	b.n	1a00038a <parse_command_string+0x8a>
        command->speed_M2 = (parsed_m2 < -100) ? -100 : (parsed_m2 > 100 ? 100 : parsed_m2);
1a0003a6:	f06f 0063 	mvn.w	r0, #99	; 0x63
1a0003aa:	e7f5      	b.n	1a000398 <parse_command_string+0x98>
        command->speed_M1 = parsed_m1;
1a0003ac:	606e      	str	r6, [r5, #4]
        command->speed_M2 = parsed_m2;
1a0003ae:	60a8      	str	r0, [r5, #8]
1a0003b0:	e7f3      	b.n	1a00039a <parse_command_string+0x9a>
        return false;
1a0003b2:	2000      	movs	r0, #0
1a0003b4:	e7ca      	b.n	1a00034c <parse_command_string+0x4c>
1a0003b6:	2000      	movs	r0, #0
1a0003b8:	e7c8      	b.n	1a00034c <parse_command_string+0x4c>
        return false; // Formato incorrecto
1a0003ba:	2000      	movs	r0, #0
1a0003bc:	e7c6      	b.n	1a00034c <parse_command_string+0x4c>
1a0003be:	2000      	movs	r0, #0
1a0003c0:	e7c4      	b.n	1a00034c <parse_command_string+0x4c>
1a0003c2:	2000      	movs	r0, #0
1a0003c4:	e7c2      	b.n	1a00034c <parse_command_string+0x4c>
1a0003c6:	bf00      	nop
1a0003c8:	1a0027a8 	.word	0x1a0027a8
1a0003cc:	1a0027b0 	.word	0x1a0027b0
1a0003d0:	1a0027b8 	.word	0x1a0027b8
1a0003d4:	1a0027c0 	.word	0x1a0027c0

1a0003d8 <UART2_IRQHandler>:
{
1a0003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 * @note   Mask bits of the returned status value with UART_LSR_*
 *         definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
   return pUART->LSR;
1a0003da:	4b24      	ldr	r3, [pc, #144]	; (1a00046c <UART2_IRQHandler+0x94>)
1a0003dc:	695b      	ldr	r3, [r3, #20]
    if (Chip_UART_ReadLineStatus(LPC_USART2) & UART_LSR_RDR)
1a0003de:	f013 0f01 	tst.w	r3, #1
1a0003e2:	d11b      	bne.n	1a00041c <UART2_IRQHandler+0x44>
}
1a0003e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    rx_buffer[rx_write_index] = '\0'; // Termina la cadena
1a0003e6:	4e22      	ldr	r6, [pc, #136]	; (1a000470 <UART2_IRQHandler+0x98>)
1a0003e8:	8833      	ldrh	r3, [r6, #0]
1a0003ea:	b29b      	uxth	r3, r3
1a0003ec:	460c      	mov	r4, r1
1a0003ee:	2500      	movs	r5, #0
1a0003f0:	54cd      	strb	r5, [r1, r3]
                    last_received_command.valid = parse_command_string((const char *)rx_buffer, &last_received_command);
1a0003f2:	4f20      	ldr	r7, [pc, #128]	; (1a000474 <UART2_IRQHandler+0x9c>)
1a0003f4:	4639      	mov	r1, r7
1a0003f6:	4620      	mov	r0, r4
1a0003f8:	f7ff ff82 	bl	1a000300 <parse_command_string>
1a0003fc:	7338      	strb	r0, [r7, #12]
                    new_command_received = true;                       // Marca que hay un nuevo comando
1a0003fe:	4b1e      	ldr	r3, [pc, #120]	; (1a000478 <UART2_IRQHandler+0xa0>)
1a000400:	2201      	movs	r2, #1
1a000402:	701a      	strb	r2, [r3, #0]
                    rx_write_index = 0;                                // Reinicia el índice para el próximo mensaje
1a000404:	8035      	strh	r5, [r6, #0]
                    memset((void *)rx_buffer, 0, UART_RX_BUFFER_SIZE); // Limpia buffer (opcional, por seguridad)
1a000406:	2280      	movs	r2, #128	; 0x80
1a000408:	4629      	mov	r1, r5
1a00040a:	4620      	mov	r0, r4
1a00040c:	f001 f8b6 	bl	1a00157c <memset>
1a000410:	e004      	b.n	1a00041c <UART2_IRQHandler+0x44>
            else if (rx_write_index >= (UART_RX_BUFFER_SIZE - 1))
1a000412:	4b17      	ldr	r3, [pc, #92]	; (1a000470 <UART2_IRQHandler+0x98>)
1a000414:	881b      	ldrh	r3, [r3, #0]
1a000416:	b29b      	uxth	r3, r3
1a000418:	2b7e      	cmp	r3, #126	; 0x7e
1a00041a:	d81d      	bhi.n	1a000458 <UART2_IRQHandler+0x80>
1a00041c:	4b13      	ldr	r3, [pc, #76]	; (1a00046c <UART2_IRQHandler+0x94>)
1a00041e:	695b      	ldr	r3, [r3, #20]
        while (Chip_UART_ReadLineStatus(LPC_USART2) & UART_LSR_RDR)
1a000420:	f013 0f01 	tst.w	r3, #1
1a000424:	d0de      	beq.n	1a0003e4 <UART2_IRQHandler+0xc>
   return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000426:	4b11      	ldr	r3, [pc, #68]	; (1a00046c <UART2_IRQHandler+0x94>)
1a000428:	681b      	ldr	r3, [r3, #0]
1a00042a:	b2db      	uxtb	r3, r3
            if (!new_command_received && rx_write_index < (UART_RX_BUFFER_SIZE - 1))
1a00042c:	4a12      	ldr	r2, [pc, #72]	; (1a000478 <UART2_IRQHandler+0xa0>)
1a00042e:	7812      	ldrb	r2, [r2, #0]
1a000430:	2a00      	cmp	r2, #0
1a000432:	d1ee      	bne.n	1a000412 <UART2_IRQHandler+0x3a>
1a000434:	4a0e      	ldr	r2, [pc, #56]	; (1a000470 <UART2_IRQHandler+0x98>)
1a000436:	8812      	ldrh	r2, [r2, #0]
1a000438:	b292      	uxth	r2, r2
1a00043a:	2a7e      	cmp	r2, #126	; 0x7e
1a00043c:	d8e9      	bhi.n	1a000412 <UART2_IRQHandler+0x3a>
                rx_buffer[rx_write_index] = received_byte;
1a00043e:	4a0c      	ldr	r2, [pc, #48]	; (1a000470 <UART2_IRQHandler+0x98>)
1a000440:	8812      	ldrh	r2, [r2, #0]
1a000442:	b292      	uxth	r2, r2
1a000444:	490d      	ldr	r1, [pc, #52]	; (1a00047c <UART2_IRQHandler+0xa4>)
1a000446:	548b      	strb	r3, [r1, r2]
                if (received_byte == '\n')
1a000448:	2b0a      	cmp	r3, #10
1a00044a:	d0cc      	beq.n	1a0003e6 <UART2_IRQHandler+0xe>
                    rx_write_index++; // Incrementa índice si no es fin de línea
1a00044c:	4a08      	ldr	r2, [pc, #32]	; (1a000470 <UART2_IRQHandler+0x98>)
1a00044e:	8813      	ldrh	r3, [r2, #0]
1a000450:	3301      	adds	r3, #1
1a000452:	b29b      	uxth	r3, r3
1a000454:	8013      	strh	r3, [r2, #0]
1a000456:	e7e1      	b.n	1a00041c <UART2_IRQHandler+0x44>
                rx_write_index = 0;
1a000458:	2100      	movs	r1, #0
1a00045a:	4b05      	ldr	r3, [pc, #20]	; (1a000470 <UART2_IRQHandler+0x98>)
1a00045c:	8019      	strh	r1, [r3, #0]
                new_command_received = false;                      // Asegura que no se procese un comando incompleto
1a00045e:	4b06      	ldr	r3, [pc, #24]	; (1a000478 <UART2_IRQHandler+0xa0>)
1a000460:	7019      	strb	r1, [r3, #0]
                memset((void *)rx_buffer, 0, UART_RX_BUFFER_SIZE); // Limpia buffer
1a000462:	2280      	movs	r2, #128	; 0x80
1a000464:	4805      	ldr	r0, [pc, #20]	; (1a00047c <UART2_IRQHandler+0xa4>)
1a000466:	f001 f889 	bl	1a00157c <memset>
1a00046a:	e7d7      	b.n	1a00041c <UART2_IRQHandler+0x44>
1a00046c:	400c1000 	.word	0x400c1000
1a000470:	100000f8 	.word	0x100000f8
1a000474:	10000064 	.word	0x10000064
1a000478:	10000074 	.word	0x10000074
1a00047c:	10000078 	.word	0x10000078

1a000480 <uart_init>:
{
1a000480:	b538      	push	{r3, r4, r5, lr}
1a000482:	4605      	mov	r5, r0
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000484:	4b15      	ldr	r3, [pc, #84]	; (1a0004dc <uart_init+0x5c>)
1a000486:	221e      	movs	r2, #30
1a000488:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
1a00048c:	22d6      	movs	r2, #214	; 0xd6
1a00048e:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
    Chip_UART_Init(LPC_USART2);
1a000492:	4c13      	ldr	r4, [pc, #76]	; (1a0004e0 <uart_init+0x60>)
1a000494:	4620      	mov	r0, r4
1a000496:	f000 f961 	bl	1a00075c <Chip_UART_Init>
    Chip_UART_SetBaudFDR(LPC_USART2, baudRate);
1a00049a:	4629      	mov	r1, r5
1a00049c:	4620      	mov	r0, r4
1a00049e:	f000 f9ad 	bl	1a0007fc <Chip_UART_SetBaudFDR>
   pUART->LCR = config;
1a0004a2:	2303      	movs	r3, #3
1a0004a4:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a0004a6:	2301      	movs	r3, #1
1a0004a8:	65e3      	str	r3, [r4, #92]	; 0x5c
   pUART->FCR = fcr;
1a0004aa:	2307      	movs	r3, #7
1a0004ac:	60a3      	str	r3, [r4, #8]
   pUART->IER |= intMask;
1a0004ae:	6863      	ldr	r3, [r4, #4]
1a0004b0:	f043 0301 	orr.w	r3, r3, #1
1a0004b4:	6063      	str	r3, [r4, #4]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
1a0004b6:	4b0b      	ldr	r3, [pc, #44]	; (1a0004e4 <uart_init+0x64>)
1a0004b8:	22c0      	movs	r2, #192	; 0xc0
1a0004ba:	f883 231a 	strb.w	r2, [r3, #794]	; 0x31a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a0004be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
1a0004c2:	601a      	str	r2, [r3, #0]
    rx_write_index = 0;
1a0004c4:	2100      	movs	r1, #0
1a0004c6:	4b08      	ldr	r3, [pc, #32]	; (1a0004e8 <uart_init+0x68>)
1a0004c8:	8019      	strh	r1, [r3, #0]
    new_command_received = false;
1a0004ca:	4b08      	ldr	r3, [pc, #32]	; (1a0004ec <uart_init+0x6c>)
1a0004cc:	7019      	strb	r1, [r3, #0]
    last_received_command.valid = false;
1a0004ce:	4b08      	ldr	r3, [pc, #32]	; (1a0004f0 <uart_init+0x70>)
1a0004d0:	7319      	strb	r1, [r3, #12]
    memset((void *)rx_buffer, 0, UART_RX_BUFFER_SIZE);
1a0004d2:	2280      	movs	r2, #128	; 0x80
1a0004d4:	4807      	ldr	r0, [pc, #28]	; (1a0004f4 <uart_init+0x74>)
1a0004d6:	f001 f851 	bl	1a00157c <memset>
}
1a0004da:	bd38      	pop	{r3, r4, r5, pc}
1a0004dc:	40086000 	.word	0x40086000
1a0004e0:	400c1000 	.word	0x400c1000
1a0004e4:	e000e100 	.word	0xe000e100
1a0004e8:	100000f8 	.word	0x100000f8
1a0004ec:	10000074 	.word	0x10000074
1a0004f0:	10000064 	.word	0x10000064
1a0004f4:	10000078 	.word	0x10000078

1a0004f8 <uart_is_new_command_available>:
    return new_command_received;
1a0004f8:	4b01      	ldr	r3, [pc, #4]	; (1a000500 <uart_is_new_command_available+0x8>)
1a0004fa:	7818      	ldrb	r0, [r3, #0]
}
1a0004fc:	4770      	bx	lr
1a0004fe:	bf00      	nop
1a000500:	10000074 	.word	0x10000074

1a000504 <uart_get_received_command>:
{
1a000504:	b470      	push	{r4, r5, r6}
1a000506:	4604      	mov	r4, r0
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
1a000508:	b672      	cpsid	i
    if (new_command_received && cmd != NULL)
1a00050a:	4b0b      	ldr	r3, [pc, #44]	; (1a000538 <uart_get_received_command+0x34>)
1a00050c:	781b      	ldrb	r3, [r3, #0]
1a00050e:	b163      	cbz	r3, 1a00052a <uart_get_received_command+0x26>
1a000510:	b158      	cbz	r0, 1a00052a <uart_get_received_command+0x26>
        memcpy(cmd, (void *)&last_received_command, sizeof(RoverCommand));
1a000512:	4e0a      	ldr	r6, [pc, #40]	; (1a00053c <uart_get_received_command+0x38>)
1a000514:	4635      	mov	r5, r6
1a000516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000518:	6020      	str	r0, [r4, #0]
1a00051a:	6061      	str	r1, [r4, #4]
1a00051c:	60a2      	str	r2, [r4, #8]
1a00051e:	60e3      	str	r3, [r4, #12]
        new_command_received = false;
1a000520:	2300      	movs	r3, #0
1a000522:	4a05      	ldr	r2, [pc, #20]	; (1a000538 <uart_get_received_command+0x34>)
1a000524:	7013      	strb	r3, [r2, #0]
        last_received_command.valid = false; // Marca como inválido hasta el próximo parseo
1a000526:	7333      	strb	r3, [r6, #12]
1a000528:	e002      	b.n	1a000530 <uart_get_received_command+0x2c>
    else if (cmd != NULL)
1a00052a:	b10c      	cbz	r4, 1a000530 <uart_get_received_command+0x2c>
        cmd->valid = false;
1a00052c:	2300      	movs	r3, #0
1a00052e:	7323      	strb	r3, [r4, #12]
  __ASM volatile ("cpsie i" : : : "memory");
1a000530:	b662      	cpsie	i
}
1a000532:	bc70      	pop	{r4, r5, r6}
1a000534:	4770      	bx	lr
1a000536:	bf00      	nop
1a000538:	10000074 	.word	0x10000074
1a00053c:	10000064 	.word	0x10000064

1a000540 <uart_send_string_blocking>:
{
1a000540:	b510      	push	{r4, lr}
1a000542:	4604      	mov	r4, r0
    Chip_UART_SendBlocking(LPC_USART2, str, strlen(str));
1a000544:	f001 f878 	bl	1a001638 <strlen>
1a000548:	4602      	mov	r2, r0
1a00054a:	4621      	mov	r1, r4
1a00054c:	4801      	ldr	r0, [pc, #4]	; (1a000554 <uart_send_string_blocking+0x14>)
1a00054e:	f000 f943 	bl	1a0007d8 <Chip_UART_SendBlocking>
}
1a000552:	bd10      	pop	{r4, pc}
1a000554:	400c1000 	.word	0x400c1000

1a000558 <control_motors>:
 * @brief Control de Motores
 *
 * Envia comandos de control a los motores. Por ahora es un placeholder para debugear.
 */
static void control_motors(int speed_m1, int speed_m2)
{
1a000558:	b500      	push	{lr}
1a00055a:	b08f      	sub	sp, #60	; 0x3c
   // Placeholder: Imprime velocidades recibidas por UART (útil para debug inicial)
   char debug_msg[50];
   sprintf(debug_msg, "Motores: M1=%d, M2=%d\n", speed_m1, speed_m2);
1a00055c:	460b      	mov	r3, r1
1a00055e:	4602      	mov	r2, r0
1a000560:	4904      	ldr	r1, [pc, #16]	; (1a000574 <control_motors+0x1c>)
1a000562:	a801      	add	r0, sp, #4
1a000564:	f001 f812 	bl	1a00158c <siprintf>
   uart_send_string_blocking(debug_msg);
1a000568:	a801      	add	r0, sp, #4
1a00056a:	f7ff ffe9 	bl	1a000540 <uart_send_string_blocking>
}
1a00056e:	b00f      	add	sp, #60	; 0x3c
1a000570:	f85d fb04 	ldr.w	pc, [sp], #4
1a000574:	1a0027d0 	.word	0x1a0027d0

1a000578 <process_rover_command>:
{
1a000578:	b500      	push	{lr}
1a00057a:	b085      	sub	sp, #20
1a00057c:	f10d 0c10 	add.w	ip, sp, #16
1a000580:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
   if (!cmd.valid)
1a000584:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a000588:	b363      	cbz	r3, 1a0005e4 <process_rover_command+0x6c>
   if (strcmp(cmd.command, "FW") == 0)
1a00058a:	4935      	ldr	r1, [pc, #212]	; (1a000660 <process_rover_command+0xe8>)
1a00058c:	4668      	mov	r0, sp
1a00058e:	f001 f849 	bl	1a001624 <strcmp>
1a000592:	b358      	cbz	r0, 1a0005ec <process_rover_command+0x74>
   else if (strcmp(cmd.command, "BW") == 0)
1a000594:	4933      	ldr	r1, [pc, #204]	; (1a000664 <process_rover_command+0xec>)
1a000596:	4668      	mov	r0, sp
1a000598:	f001 f844 	bl	1a001624 <strcmp>
1a00059c:	2800      	cmp	r0, #0
1a00059e:	d036      	beq.n	1a00060e <process_rover_command+0x96>
   else if (strcmp(cmd.command, "LT") == 0)
1a0005a0:	4931      	ldr	r1, [pc, #196]	; (1a000668 <process_rover_command+0xf0>)
1a0005a2:	4668      	mov	r0, sp
1a0005a4:	f001 f83e 	bl	1a001624 <strcmp>
1a0005a8:	2800      	cmp	r0, #0
1a0005aa:	d040      	beq.n	1a00062e <process_rover_command+0xb6>
   else if (strcmp(cmd.command, "RT") == 0)
1a0005ac:	492f      	ldr	r1, [pc, #188]	; (1a00066c <process_rover_command+0xf4>)
1a0005ae:	4668      	mov	r0, sp
1a0005b0:	f001 f838 	bl	1a001624 <strcmp>
1a0005b4:	2800      	cmp	r0, #0
1a0005b6:	d042      	beq.n	1a00063e <process_rover_command+0xc6>
   else if (strcmp(cmd.command, "ST") == 0)
1a0005b8:	492d      	ldr	r1, [pc, #180]	; (1a000670 <process_rover_command+0xf8>)
1a0005ba:	4668      	mov	r0, sp
1a0005bc:	f001 f832 	bl	1a001624 <strcmp>
1a0005c0:	2800      	cmp	r0, #0
1a0005c2:	d144      	bne.n	1a00064e <process_rover_command+0xd6>
      Board_LED_Set(LED_1, false);
1a0005c4:	2100      	movs	r1, #0
1a0005c6:	4608      	mov	r0, r1
1a0005c8:	f000 fde4 	bl	1a001194 <Board_LED_Set>
      Board_LED_Set(LED_2, false);
1a0005cc:	2100      	movs	r1, #0
1a0005ce:	2001      	movs	r0, #1
1a0005d0:	f000 fde0 	bl	1a001194 <Board_LED_Set>
      control_motors(0, 0); // Detiene ambos motores
1a0005d4:	2100      	movs	r1, #0
1a0005d6:	4608      	mov	r0, r1
1a0005d8:	f7ff ffbe 	bl	1a000558 <control_motors>
      uart_send_string_blocking("OK: ST\n");
1a0005dc:	4825      	ldr	r0, [pc, #148]	; (1a000674 <process_rover_command+0xfc>)
1a0005de:	f7ff ffaf 	bl	1a000540 <uart_send_string_blocking>
1a0005e2:	e011      	b.n	1a000608 <process_rover_command+0x90>
      uart_send_string_blocking("Error: Comando Invalido\n");
1a0005e4:	4824      	ldr	r0, [pc, #144]	; (1a000678 <process_rover_command+0x100>)
1a0005e6:	f7ff ffab 	bl	1a000540 <uart_send_string_blocking>
      return;
1a0005ea:	e00d      	b.n	1a000608 <process_rover_command+0x90>
      Board_LED_Set(LED_1, true);
1a0005ec:	2101      	movs	r1, #1
1a0005ee:	f000 fdd1 	bl	1a001194 <Board_LED_Set>
      Board_LED_Set(LED_2, false);
1a0005f2:	2100      	movs	r1, #0
1a0005f4:	2001      	movs	r0, #1
1a0005f6:	f000 fdcd 	bl	1a001194 <Board_LED_Set>
      control_motors(cmd.speed_M1, cmd.speed_M2);
1a0005fa:	9902      	ldr	r1, [sp, #8]
1a0005fc:	9801      	ldr	r0, [sp, #4]
1a0005fe:	f7ff ffab 	bl	1a000558 <control_motors>
      uart_send_string_blocking("OK: FW\n");
1a000602:	481e      	ldr	r0, [pc, #120]	; (1a00067c <process_rover_command+0x104>)
1a000604:	f7ff ff9c 	bl	1a000540 <uart_send_string_blocking>
}
1a000608:	b005      	add	sp, #20
1a00060a:	f85d fb04 	ldr.w	pc, [sp], #4
      Board_LED_Set(LED_1, false);
1a00060e:	2100      	movs	r1, #0
1a000610:	4608      	mov	r0, r1
1a000612:	f000 fdbf 	bl	1a001194 <Board_LED_Set>
      Board_LED_Set(LED_2, true);
1a000616:	2101      	movs	r1, #1
1a000618:	4608      	mov	r0, r1
1a00061a:	f000 fdbb 	bl	1a001194 <Board_LED_Set>
      control_motors(cmd.speed_M1, cmd.speed_M2);
1a00061e:	9902      	ldr	r1, [sp, #8]
1a000620:	9801      	ldr	r0, [sp, #4]
1a000622:	f7ff ff99 	bl	1a000558 <control_motors>
      uart_send_string_blocking("OK: BW\n");
1a000626:	4816      	ldr	r0, [pc, #88]	; (1a000680 <process_rover_command+0x108>)
1a000628:	f7ff ff8a 	bl	1a000540 <uart_send_string_blocking>
1a00062c:	e7ec      	b.n	1a000608 <process_rover_command+0x90>
      control_motors(cmd.speed_M1, cmd.speed_M2);
1a00062e:	9902      	ldr	r1, [sp, #8]
1a000630:	9801      	ldr	r0, [sp, #4]
1a000632:	f7ff ff91 	bl	1a000558 <control_motors>
      uart_send_string_blocking("OK: LT\n");
1a000636:	4813      	ldr	r0, [pc, #76]	; (1a000684 <process_rover_command+0x10c>)
1a000638:	f7ff ff82 	bl	1a000540 <uart_send_string_blocking>
1a00063c:	e7e4      	b.n	1a000608 <process_rover_command+0x90>
      control_motors(cmd.speed_M1, cmd.speed_M2);
1a00063e:	9902      	ldr	r1, [sp, #8]
1a000640:	9801      	ldr	r0, [sp, #4]
1a000642:	f7ff ff89 	bl	1a000558 <control_motors>
      uart_send_string_blocking("OK: RT\n");
1a000646:	4810      	ldr	r0, [pc, #64]	; (1a000688 <process_rover_command+0x110>)
1a000648:	f7ff ff7a 	bl	1a000540 <uart_send_string_blocking>
1a00064c:	e7dc      	b.n	1a000608 <process_rover_command+0x90>
      uart_send_string_blocking("Error: Comando Desconocido\n");
1a00064e:	480f      	ldr	r0, [pc, #60]	; (1a00068c <process_rover_command+0x114>)
1a000650:	f7ff ff76 	bl	1a000540 <uart_send_string_blocking>
      control_motors(0, 0); // Detener por seguridad
1a000654:	2100      	movs	r1, #0
1a000656:	4608      	mov	r0, r1
1a000658:	f7ff ff7e 	bl	1a000558 <control_motors>
1a00065c:	e7d4      	b.n	1a000608 <process_rover_command+0x90>
1a00065e:	bf00      	nop
1a000660:	1a002830 	.word	0x1a002830
1a000664:	1a00283c 	.word	0x1a00283c
1a000668:	1a002848 	.word	0x1a002848
1a00066c:	1a002854 	.word	0x1a002854
1a000670:	1a002860 	.word	0x1a002860
1a000674:	1a002864 	.word	0x1a002864
1a000678:	1a002814 	.word	0x1a002814
1a00067c:	1a002834 	.word	0x1a002834
1a000680:	1a002840 	.word	0x1a002840
1a000684:	1a00284c 	.word	0x1a00284c
1a000688:	1a002858 	.word	0x1a002858
1a00068c:	1a00286c 	.word	0x1a00286c

1a000690 <main>:
 * This is the main entry point of the software.
 *
 * @returns 0 : Never returns.
 */
int main(void)
{
1a000690:	b500      	push	{lr}
1a000692:	b085      	sub	sp, #20
   /* Inicializaciones */
   Board_Init();
1a000694:	f000 fdb4 	bl	1a001200 <Board_Init>
   SystemCoreClockUpdate();
1a000698:	f000 fc72 	bl	1a000f80 <SystemCoreClockUpdate>
   SysTick_Config(SystemCoreClock / 1000); /* Interrupción cada 1 ms */
1a00069c:	4b1a      	ldr	r3, [pc, #104]	; (1a000708 <main+0x78>)
1a00069e:	681b      	ldr	r3, [r3, #0]
1a0006a0:	4a1a      	ldr	r2, [pc, #104]	; (1a00070c <main+0x7c>)
1a0006a2:	fba2 2303 	umull	r2, r3, r2, r3
1a0006a6:	099b      	lsrs	r3, r3, #6
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a0006a8:	3b01      	subs	r3, #1
1a0006aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
1a0006ae:	d209      	bcs.n	1a0006c4 <main+0x34>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a0006b0:	4a17      	ldr	r2, [pc, #92]	; (1a000710 <main+0x80>)
1a0006b2:	6053      	str	r3, [r2, #4]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a0006b4:	4b17      	ldr	r3, [pc, #92]	; (1a000714 <main+0x84>)
1a0006b6:	21e0      	movs	r1, #224	; 0xe0
1a0006b8:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a0006bc:	2300      	movs	r3, #0
1a0006be:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a0006c0:	2307      	movs	r3, #7
1a0006c2:	6013      	str	r3, [r2, #0]

   // Inicializa la comunicación UART a 115200 baudios (igual que el ESP32)
   uart_init(UART_BAUD_RATE);
1a0006c4:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
1a0006c8:	f7ff feda 	bl	1a000480 <uart_init>
   uart_send_string_blocking("EDU-CIAA Rover Controller Inicializado.\n");
1a0006cc:	4812      	ldr	r0, [pc, #72]	; (1a000718 <main+0x88>)
1a0006ce:	f7ff ff37 	bl	1a000540 <uart_send_string_blocking>
1a0006d2:	e009      	b.n	1a0006e8 <main+0x58>
   while (1)
   {
      /* Verifica si hay un nuevo comando disponible desde UART */
      if (uart_is_new_command_available())
      {
         uart_get_received_command(&current_command); // Obtiene el comando
1a0006d4:	466c      	mov	r4, sp
1a0006d6:	4620      	mov	r0, r4
1a0006d8:	f7ff ff14 	bl	1a000504 <uart_get_received_command>
         process_rover_command(current_command);      // Procesa el comando
1a0006dc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
1a0006e0:	f7ff ff4a 	bl	1a000578 <process_rover_command>
1a0006e4:	e004      	b.n	1a0006f0 <main+0x60>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
1a0006e6:	bf30      	wfi
      if (uart_is_new_command_available())
1a0006e8:	f7ff ff06 	bl	1a0004f8 <uart_is_new_command_available>
1a0006ec:	2800      	cmp	r0, #0
1a0006ee:	d1f1      	bne.n	1a0006d4 <main+0x44>
      }

      /* Parpadeo de LED RGB azul como señal de vida (heartbeat) */
      if (tick_counter >= TICK_DELAY_MS)
1a0006f0:	4b0a      	ldr	r3, [pc, #40]	; (1a00071c <main+0x8c>)
1a0006f2:	681b      	ldr	r3, [r3, #0]
1a0006f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
1a0006f8:	d3f5      	bcc.n	1a0006e6 <main+0x56>
      {
         tick_counter = 0;
1a0006fa:	4b08      	ldr	r3, [pc, #32]	; (1a00071c <main+0x8c>)
1a0006fc:	2200      	movs	r2, #0
1a0006fe:	601a      	str	r2, [r3, #0]
         Board_LED_Toggle(LED_3); // LED Azul
1a000700:	2002      	movs	r0, #2
1a000702:	f000 fd71 	bl	1a0011e8 <Board_LED_Toggle>
1a000706:	e7ee      	b.n	1a0006e6 <main+0x56>
1a000708:	10000114 	.word	0x10000114
1a00070c:	10624dd3 	.word	0x10624dd3
1a000710:	e000e010 	.word	0xe000e010
1a000714:	e000ed00 	.word	0xe000ed00
1a000718:	1a0027e8 	.word	0x1a0027e8
1a00071c:	100000fc 	.word	0x100000fc

1a000720 <SysTick_Handler>:
 * @brief Handler de la interrupción del SysTick cada 1ms.
 */
void SysTick_Handler(void)
{
   // Incrementa el contador para el delay del parpadeo del LED
   tick_counter++;
1a000720:	4a02      	ldr	r2, [pc, #8]	; (1a00072c <SysTick_Handler+0xc>)
1a000722:	6813      	ldr	r3, [r2, #0]
1a000724:	3301      	adds	r3, #1
1a000726:	6013      	str	r3, [r2, #0]
1a000728:	4770      	bx	lr
1a00072a:	bf00      	nop
1a00072c:	100000fc 	.word	0x100000fc

1a000730 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
   uint32_t base = (uint32_t) pUART;
   switch(base) {
1a000730:	4b09      	ldr	r3, [pc, #36]	; (1a000758 <Chip_UART_GetIndex+0x28>)
1a000732:	4298      	cmp	r0, r3
1a000734:	d009      	beq.n	1a00074a <Chip_UART_GetIndex+0x1a>
1a000736:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00073a:	4298      	cmp	r0, r3
1a00073c:	d007      	beq.n	1a00074e <Chip_UART_GetIndex+0x1e>
1a00073e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000742:	4298      	cmp	r0, r3
1a000744:	d005      	beq.n	1a000752 <Chip_UART_GetIndex+0x22>
       case LPC_USART0_BASE:
           return 0;
1a000746:	2000      	movs	r0, #0
1a000748:	4770      	bx	lr
       case LPC_UART1_BASE:
           return 1;
       case LPC_USART2_BASE:
           return 2;
1a00074a:	2002      	movs	r0, #2
1a00074c:	4770      	bx	lr
       case LPC_USART3_BASE:
           return 3;
1a00074e:	2003      	movs	r0, #3
1a000750:	4770      	bx	lr
           return 1;
1a000752:	2001      	movs	r0, #1
       default:
           return 0; /* Should never come here */
   }
}
1a000754:	4770      	bx	lr
1a000756:	bf00      	nop
1a000758:	400c1000 	.word	0x400c1000

1a00075c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00075c:	b530      	push	{r4, r5, lr}
1a00075e:	b083      	sub	sp, #12
1a000760:	4604      	mov	r4, r0
    volatile uint32_t tmp;

   /* Enable UART clocking. UART base clock(s) must already be enabled */
   Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000762:	f7ff ffe5 	bl	1a000730 <Chip_UART_GetIndex>
1a000766:	2301      	movs	r3, #1
1a000768:	461a      	mov	r2, r3
1a00076a:	4619      	mov	r1, r3
1a00076c:	4d0e      	ldr	r5, [pc, #56]	; (1a0007a8 <Chip_UART_Init+0x4c>)
1a00076e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000772:	f000 fb13 	bl	1a000d9c <Chip_Clock_EnableOpts>
   pUART->FCR = fcr;
1a000776:	2307      	movs	r3, #7
1a000778:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00077a:	2300      	movs	r3, #0
1a00077c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
   pUART->IER = 0;
1a00077e:	6063      	str	r3, [r4, #4]
   /* Set LCR to default state */
   pUART->LCR = 0;
1a000780:	60e3      	str	r3, [r4, #12]
   /* Set ACR to default state */
   pUART->ACR = 0;
1a000782:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
   pUART->RS485CTRL = 0;
1a000784:	64e3      	str	r3, [r4, #76]	; 0x4c
   /* Set RS485 delay timer to default state */
   pUART->RS485DLY = 0;
1a000786:	6563      	str	r3, [r4, #84]	; 0x54
   /* Set RS485 addr match to default state */
   pUART->RS485ADRMATCH = 0;
1a000788:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00078a:	4b08      	ldr	r3, [pc, #32]	; (1a0007ac <Chip_UART_Init+0x50>)
1a00078c:	429c      	cmp	r4, r3
1a00078e:	d005      	beq.n	1a00079c <Chip_UART_Init+0x40>
   pUART->LCR = config;
1a000790:	2303      	movs	r3, #3
1a000792:	60e3      	str	r3, [r4, #12]

   /* Default 8N1, with DLAB disabled */
   Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

   /* Disable fractional divider */
   pUART->FDR = 0x10;
1a000794:	2310      	movs	r3, #16
1a000796:	62a3      	str	r3, [r4, #40]	; 0x28
}
1a000798:	b003      	add	sp, #12
1a00079a:	bd30      	pop	{r4, r5, pc}
       pUART->MCR = 0;
1a00079c:	2300      	movs	r3, #0
1a00079e:	6123      	str	r3, [r4, #16]
       tmp = pUART->MSR;
1a0007a0:	69a3      	ldr	r3, [r4, #24]
1a0007a2:	9301      	str	r3, [sp, #4]
1a0007a4:	e7f4      	b.n	1a000790 <Chip_UART_Init+0x34>
1a0007a6:	bf00      	nop
1a0007a8:	1a002890 	.word	0x1a002890
1a0007ac:	40082000 	.word	0x40082000

1a0007b0 <Chip_UART_Send>:
}

/* Transmit a byte array through the UART peripheral (non-blocking) */
int Chip_UART_Send(LPC_USART_T *pUART, const void *data, int numBytes)
{
   int sent = 0;
1a0007b0:	2300      	movs	r3, #0
   uint8_t *p8 = (uint8_t *) data;

   /* Send until the transmit FIFO is full or out of bytes */
   while ((sent < numBytes) &&
1a0007b2:	4293      	cmp	r3, r2
1a0007b4:	da0e      	bge.n	1a0007d4 <Chip_UART_Send+0x24>
{
1a0007b6:	b410      	push	{r4}
   return pUART->LSR;
1a0007b8:	6944      	ldr	r4, [r0, #20]
   while ((sent < numBytes) &&
1a0007ba:	f014 0f20 	tst.w	r4, #32
1a0007be:	d005      	beq.n	1a0007cc <Chip_UART_Send+0x1c>
          ((Chip_UART_ReadLineStatus(pUART) & UART_LSR_THRE) != 0)) {
       Chip_UART_SendByte(pUART, *p8);
1a0007c0:	f811 4b01 	ldrb.w	r4, [r1], #1
   pUART->THR = (uint32_t) data;
1a0007c4:	6004      	str	r4, [r0, #0]
       p8++;
       sent++;
1a0007c6:	3301      	adds	r3, #1
   while ((sent < numBytes) &&
1a0007c8:	4293      	cmp	r3, r2
1a0007ca:	dbf5      	blt.n	1a0007b8 <Chip_UART_Send+0x8>
   }

   return sent;
}
1a0007cc:	4618      	mov	r0, r3
1a0007ce:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0007d2:	4770      	bx	lr
1a0007d4:	4618      	mov	r0, r3
1a0007d6:	4770      	bx	lr

1a0007d8 <Chip_UART_SendBlocking>:
   }
}

/* Transmit a byte array through the UART peripheral (blocking) */
int Chip_UART_SendBlocking(LPC_USART_T *pUART, const void *data, int numBytes)
{
1a0007d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0007da:	4607      	mov	r7, r0
1a0007dc:	460d      	mov	r5, r1
1a0007de:	4614      	mov	r4, r2
   int pass, sent = 0;
1a0007e0:	2600      	movs	r6, #0
   uint8_t *p8 = (uint8_t *) data;

   while (numBytes > 0) {
1a0007e2:	2c00      	cmp	r4, #0
1a0007e4:	dd08      	ble.n	1a0007f8 <Chip_UART_SendBlocking+0x20>
       pass = Chip_UART_Send(pUART, p8, numBytes);
1a0007e6:	4622      	mov	r2, r4
1a0007e8:	4629      	mov	r1, r5
1a0007ea:	4638      	mov	r0, r7
1a0007ec:	f7ff ffe0 	bl	1a0007b0 <Chip_UART_Send>
       numBytes -= pass;
1a0007f0:	1a24      	subs	r4, r4, r0
       sent += pass;
1a0007f2:	4406      	add	r6, r0
       p8 += pass;
1a0007f4:	4405      	add	r5, r0
1a0007f6:	e7f4      	b.n	1a0007e2 <Chip_UART_SendBlocking+0xa>
   }

   return sent;
}
1a0007f8:	4630      	mov	r0, r6
1a0007fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a0007fc <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a0007fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000800:	b083      	sub	sp, #12
1a000802:	9001      	str	r0, [sp, #4]
1a000804:	4688      	mov	r8, r1
   uint32_t sdiv = 0, sm = 1, sd = 0;
   uint32_t pclk, m, d;
   uint32_t odiff = -1UL; /* old best diff */

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000806:	f7ff ff93 	bl	1a000730 <Chip_UART_GetIndex>
1a00080a:	4b32      	ldr	r3, [pc, #200]	; (1a0008d4 <Chip_UART_SetBaudFDR+0xd8>)
1a00080c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000810:	f000 fae2 	bl	1a000dd8 <Chip_Clock_GetRate>
1a000814:	4606      	mov	r6, r0
   uint32_t odiff = -1UL; /* old best diff */
1a000816:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a00081a:	2401      	movs	r4, #1
   uint32_t sdiv = 0, sm = 1, sd = 0;
1a00081c:	f04f 0b00 	mov.w	fp, #0
1a000820:	46a2      	mov	sl, r4
1a000822:	46d9      	mov	r9, fp
   for (m = 1; odiff && m < 16; m++) {
1a000824:	e02a      	b.n	1a00087c <Chip_UART_SetBaudFDR+0x80>
           /* Upper 32-bit of dval has div */
           div = (uint32_t) (dval >> 32);

           /* Closer to next div */
           if ((int)diff < 0) {
               diff = -diff;
1a000826:	4242      	negs	r2, r0
               div ++;
1a000828:	1c4b      	adds	r3, r1, #1
1a00082a:	e017      	b.n	1a00085c <Chip_UART_SetBaudFDR+0x60>
           sd = d;
           sm = m;
           odiff = diff;

           /* On perfect match, break loop */
           if(!diff) {
1a00082c:	b30a      	cbz	r2, 1a000872 <Chip_UART_SetBaudFDR+0x76>
           odiff = diff;
1a00082e:	4617      	mov	r7, r2
           sd = d;
1a000830:	46ab      	mov	fp, r5
           sm = m;
1a000832:	46a2      	mov	sl, r4
           sdiv = div;
1a000834:	4699      	mov	r9, r3
       for (d = 0; d < m; d++) {
1a000836:	3501      	adds	r5, #1
1a000838:	42ac      	cmp	r4, r5
1a00083a:	d91e      	bls.n	1a00087a <Chip_UART_SetBaudFDR+0x7e>
           uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a00083c:	0933      	lsrs	r3, r6, #4
1a00083e:	0730      	lsls	r0, r6, #28
1a000840:	fba4 0100 	umull	r0, r1, r4, r0
1a000844:	fb04 1103 	mla	r1, r4, r3, r1
1a000848:	1962      	adds	r2, r4, r5
1a00084a:	fb08 f202 	mul.w	r2, r8, r2
1a00084e:	2300      	movs	r3, #0
1a000850:	f000 fd00 	bl	1a001254 <__aeabi_uldivmod>
           diff = (uint32_t) dval;
1a000854:	4602      	mov	r2, r0
           div = (uint32_t) (dval >> 32);
1a000856:	460b      	mov	r3, r1
           if ((int)diff < 0) {
1a000858:	2800      	cmp	r0, #0
1a00085a:	dbe4      	blt.n	1a000826 <Chip_UART_SetBaudFDR+0x2a>
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a00085c:	4297      	cmp	r7, r2
1a00085e:	d3ea      	bcc.n	1a000836 <Chip_UART_SetBaudFDR+0x3a>
1a000860:	2b00      	cmp	r3, #0
1a000862:	d0e8      	beq.n	1a000836 <Chip_UART_SetBaudFDR+0x3a>
1a000864:	0c19      	lsrs	r1, r3, #16
1a000866:	d1e6      	bne.n	1a000836 <Chip_UART_SetBaudFDR+0x3a>
1a000868:	2b02      	cmp	r3, #2
1a00086a:	d8df      	bhi.n	1a00082c <Chip_UART_SetBaudFDR+0x30>
1a00086c:	2d00      	cmp	r5, #0
1a00086e:	d0dd      	beq.n	1a00082c <Chip_UART_SetBaudFDR+0x30>
1a000870:	e7e1      	b.n	1a000836 <Chip_UART_SetBaudFDR+0x3a>
           odiff = diff;
1a000872:	4617      	mov	r7, r2
           sd = d;
1a000874:	46ab      	mov	fp, r5
           sm = m;
1a000876:	46a2      	mov	sl, r4
           sdiv = div;
1a000878:	4699      	mov	r9, r3
   for (m = 1; odiff && m < 16; m++) {
1a00087a:	3401      	adds	r4, #1
1a00087c:	b11f      	cbz	r7, 1a000886 <Chip_UART_SetBaudFDR+0x8a>
1a00087e:	2c0f      	cmp	r4, #15
1a000880:	d801      	bhi.n	1a000886 <Chip_UART_SetBaudFDR+0x8a>
       for (d = 0; d < m; d++) {
1a000882:	2500      	movs	r5, #0
1a000884:	e7d8      	b.n	1a000838 <Chip_UART_SetBaudFDR+0x3c>
           }
       }
   }

   /* Return 0 if a vaild divisor is not possible */
   if (!sdiv) {
1a000886:	f1b9 0f00 	cmp.w	r9, #0
1a00088a:	d01e      	beq.n	1a0008ca <Chip_UART_SetBaudFDR+0xce>
   pUART->LCR |= UART_LCR_DLAB_EN;
1a00088c:	9a01      	ldr	r2, [sp, #4]
1a00088e:	4611      	mov	r1, r2
1a000890:	68d3      	ldr	r3, [r2, #12]
1a000892:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000896:	60d3      	str	r3, [r2, #12]
   pUART->DLL = (uint32_t) dll;
1a000898:	fa5f f389 	uxtb.w	r3, r9
1a00089c:	6013      	str	r3, [r2, #0]
   pUART->DLM = (uint32_t) dlm;
1a00089e:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0008a2:	6053      	str	r3, [r2, #4]
   pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0008a4:	68d3      	ldr	r3, [r2, #12]
1a0008a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0008aa:	60d3      	str	r3, [r2, #12]
   Chip_UART_EnableDivisorAccess(pUART);
   Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
   Chip_UART_DisableDivisorAccess(pUART);

   /* Set best fractional divider */
   pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0008ac:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0008b0:	b2db      	uxtb	r3, r3
1a0008b2:	f00b 020f 	and.w	r2, fp, #15
1a0008b6:	4313      	orrs	r3, r2
1a0008b8:	628b      	str	r3, [r1, #40]	; 0x28

   /* Return actual baud rate */
   return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0008ba:	0933      	lsrs	r3, r6, #4
1a0008bc:	fb0a f303 	mul.w	r3, sl, r3
1a0008c0:	44da      	add	sl, fp
1a0008c2:	fb09 f90a 	mul.w	r9, r9, sl
1a0008c6:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a0008ca:	4648      	mov	r0, r9
1a0008cc:	b003      	add	sp, #12
1a0008ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0008d2:	bf00      	nop
1a0008d4:	1a002888 	.word	0x1a002888

1a0008d8 <pll_calc_divs>:
       return -val;
   return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0008d8:	b4f0      	push	{r4, r5, r6, r7}

   uint32_t prev = freq;
   int n, m, p;

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
1a0008da:	680b      	ldr	r3, [r1, #0]
1a0008dc:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0008e0:	d002      	beq.n	1a0008e8 <pll_calc_divs+0x10>
       ppll->ctrl &= ~(1 << 6);
1a0008e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0008e6:	600b      	str	r3, [r1, #0]
   }
   for (n = 1; n <= 4; n++) {
       for (p = 0; p < 4; p ++) {
1a0008e8:	4607      	mov	r7, r0
1a0008ea:	2501      	movs	r5, #1
1a0008ec:	e03a      	b.n	1a000964 <pll_calc_divs+0x8c>
           for (m = 1; m <= 256; m++) {
               uint32_t fcco, fout;
               if (ppll->ctrl & (1 << 6)) {
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
               } else {
                   fcco = (m * ppll->fin) / n;
1a0008ee:	694b      	ldr	r3, [r1, #20]
1a0008f0:	fb03 f302 	mul.w	r3, r3, r2
1a0008f4:	fbb3 f3f5 	udiv	r3, r3, r5
1a0008f8:	e01c      	b.n	1a000934 <pll_calc_divs+0x5c>
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
               if (fcco > PLL_MAX_CCO_FREQ) break;
               if (ppll->ctrl & (1 << 7)) {
                   fout = fcco;
1a0008fa:	461c      	mov	r4, r3
   if (val < 0)
1a0008fc:	ebb0 0c04 	subs.w	ip, r0, r4
1a000900:	d427      	bmi.n	1a000952 <pll_calc_divs+0x7a>
               } else {
                   fout = fcco >> (p + 1);
               }

               if (ABS(freq - fout) < prev) {
1a000902:	4567      	cmp	r7, ip
1a000904:	d906      	bls.n	1a000914 <pll_calc_divs+0x3c>
                   ppll->nsel = n;
1a000906:	608d      	str	r5, [r1, #8]
                   ppll->psel = p + 1;
1a000908:	1c77      	adds	r7, r6, #1
1a00090a:	60cf      	str	r7, [r1, #12]
                   ppll->msel = m;
1a00090c:	610a      	str	r2, [r1, #16]
                   ppll->fout = fout;
1a00090e:	618c      	str	r4, [r1, #24]
                   ppll->fcco = fcco;
1a000910:	61cb      	str	r3, [r1, #28]
                   prev = ABS(freq - fout);
1a000912:	4667      	mov	r7, ip
           for (m = 1; m <= 256; m++) {
1a000914:	3201      	adds	r2, #1
1a000916:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00091a:	dc1d      	bgt.n	1a000958 <pll_calc_divs+0x80>
               if (ppll->ctrl & (1 << 6)) {
1a00091c:	680c      	ldr	r4, [r1, #0]
1a00091e:	f014 0f40 	tst.w	r4, #64	; 0x40
1a000922:	d0e4      	beq.n	1a0008ee <pll_calc_divs+0x16>
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000924:	1c73      	adds	r3, r6, #1
1a000926:	fa02 fc03 	lsl.w	ip, r2, r3
1a00092a:	694b      	ldr	r3, [r1, #20]
1a00092c:	fb03 f30c 	mul.w	r3, r3, ip
1a000930:	fbb3 f3f5 	udiv	r3, r3, r5
               if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000934:	f8df c038 	ldr.w	ip, [pc, #56]	; 1a000970 <pll_calc_divs+0x98>
1a000938:	4563      	cmp	r3, ip
1a00093a:	d9eb      	bls.n	1a000914 <pll_calc_divs+0x3c>
               if (fcco > PLL_MAX_CCO_FREQ) break;
1a00093c:	f8df c034 	ldr.w	ip, [pc, #52]	; 1a000974 <pll_calc_divs+0x9c>
1a000940:	4563      	cmp	r3, ip
1a000942:	d809      	bhi.n	1a000958 <pll_calc_divs+0x80>
               if (ppll->ctrl & (1 << 7)) {
1a000944:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000948:	d1d7      	bne.n	1a0008fa <pll_calc_divs+0x22>
                   fout = fcco >> (p + 1);
1a00094a:	1c74      	adds	r4, r6, #1
1a00094c:	fa23 f404 	lsr.w	r4, r3, r4
1a000950:	e7d4      	b.n	1a0008fc <pll_calc_divs+0x24>
       return -val;
1a000952:	f1cc 0c00 	rsb	ip, ip, #0
1a000956:	e7d4      	b.n	1a000902 <pll_calc_divs+0x2a>
       for (p = 0; p < 4; p ++) {
1a000958:	3601      	adds	r6, #1
1a00095a:	2e03      	cmp	r6, #3
1a00095c:	dc01      	bgt.n	1a000962 <pll_calc_divs+0x8a>
           for (m = 1; m <= 256; m++) {
1a00095e:	2201      	movs	r2, #1
1a000960:	e7d9      	b.n	1a000916 <pll_calc_divs+0x3e>
   for (n = 1; n <= 4; n++) {
1a000962:	3501      	adds	r5, #1
1a000964:	2d04      	cmp	r5, #4
1a000966:	dc01      	bgt.n	1a00096c <pll_calc_divs+0x94>
       for (p = 0; p < 4; p ++) {
1a000968:	2600      	movs	r6, #0
1a00096a:	e7f6      	b.n	1a00095a <pll_calc_divs+0x82>
               }
           }
       }
   }
}
1a00096c:	bcf0      	pop	{r4, r5, r6, r7}
1a00096e:	4770      	bx	lr
1a000970:	094c5eff 	.word	0x094c5eff
1a000974:	1312d000 	.word	0x1312d000

1a000978 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000978:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00097a:	b099      	sub	sp, #100	; 0x64
1a00097c:	4605      	mov	r5, r0
1a00097e:	460c      	mov	r4, r1
   int diff[3];
   PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000980:	225c      	movs	r2, #92	; 0x5c
1a000982:	2100      	movs	r1, #0
1a000984:	a801      	add	r0, sp, #4
1a000986:	f000 fdf9 	bl	1a00157c <memset>

   /* Try direct mode */
   pll[0].ctrl |= (1 << 7);
1a00098a:	2380      	movs	r3, #128	; 0x80
1a00098c:	9300      	str	r3, [sp, #0]
   pll[0].fin = ppll->fin;
1a00098e:	6963      	ldr	r3, [r4, #20]
1a000990:	9305      	str	r3, [sp, #20]
   pll[0].srcin = ppll->srcin;
1a000992:	7923      	ldrb	r3, [r4, #4]
1a000994:	f88d 3004 	strb.w	r3, [sp, #4]
   pll_calc_divs(freq, &pll[0]);
1a000998:	4669      	mov	r1, sp
1a00099a:	4628      	mov	r0, r5
1a00099c:	f7ff ff9c 	bl	1a0008d8 <pll_calc_divs>
   if (pll[0].fout == freq) {
1a0009a0:	9b06      	ldr	r3, [sp, #24]
1a0009a2:	42ab      	cmp	r3, r5
1a0009a4:	d02f      	beq.n	1a000a06 <pll_get_frac+0x8e>
   if (val < 0)
1a0009a6:	1aeb      	subs	r3, r5, r3
1a0009a8:	d436      	bmi.n	1a000a18 <pll_get_frac+0xa0>
       *ppll = pll[0];
       return ;
   }
   diff[0] = ABS(freq - pll[0].fout);
1a0009aa:	461e      	mov	r6, r3

   /* Try non-Integer mode */
   pll[2].ctrl = (1 << 6);
1a0009ac:	2340      	movs	r3, #64	; 0x40
1a0009ae:	9310      	str	r3, [sp, #64]	; 0x40
   pll[2].fin = ppll->fin;
1a0009b0:	6963      	ldr	r3, [r4, #20]
1a0009b2:	9315      	str	r3, [sp, #84]	; 0x54
   pll[2].srcin = ppll->srcin;
1a0009b4:	7923      	ldrb	r3, [r4, #4]
1a0009b6:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
   pll_calc_divs(freq, &pll[2]);
1a0009ba:	a910      	add	r1, sp, #64	; 0x40
1a0009bc:	4628      	mov	r0, r5
1a0009be:	f7ff ff8b 	bl	1a0008d8 <pll_calc_divs>
   if (pll[2].fout == freq) {
1a0009c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0009c4:	42ab      	cmp	r3, r5
1a0009c6:	d029      	beq.n	1a000a1c <pll_get_frac+0xa4>
   if (val < 0)
1a0009c8:	1aeb      	subs	r3, r5, r3
1a0009ca:	d42f      	bmi.n	1a000a2c <pll_get_frac+0xb4>
       *ppll = pll[2];
       return ;
   }

   diff[2] = ABS(freq - pll[2].fout);
1a0009cc:	461f      	mov	r7, r3
   /* Try integer mode */
   pll[1].ctrl = (1 << 6);
1a0009ce:	2340      	movs	r3, #64	; 0x40
1a0009d0:	9308      	str	r3, [sp, #32]
   pll[1].fin = ppll->fin;
1a0009d2:	6963      	ldr	r3, [r4, #20]
1a0009d4:	930d      	str	r3, [sp, #52]	; 0x34
   pll[1].srcin = ppll->srcin;
1a0009d6:	7923      	ldrb	r3, [r4, #4]
1a0009d8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   pll_calc_divs(freq, &pll[1]);
1a0009dc:	a908      	add	r1, sp, #32
1a0009de:	4628      	mov	r0, r5
1a0009e0:	f7ff ff7a 	bl	1a0008d8 <pll_calc_divs>
   if (pll[1].fout == freq) {
1a0009e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0009e6:	42ab      	cmp	r3, r5
1a0009e8:	d022      	beq.n	1a000a30 <pll_get_frac+0xb8>
   if (val < 0)
1a0009ea:	1aed      	subs	r5, r5, r3
1a0009ec:	d428      	bmi.n	1a000a40 <pll_get_frac+0xc8>
       return ;
   }
   diff[1] = ABS(freq - pll[1].fout);

   /* Find the min of 3 and return */
   if (diff[0] <= diff[1]) {
1a0009ee:	42ae      	cmp	r6, r5
1a0009f0:	dc30      	bgt.n	1a000a54 <pll_get_frac+0xdc>
       if (diff[0] <= diff[2]) {
1a0009f2:	42be      	cmp	r6, r7
1a0009f4:	dc26      	bgt.n	1a000a44 <pll_get_frac+0xcc>
           *ppll = pll[0];
1a0009f6:	466d      	mov	r5, sp
1a0009f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0009fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0009fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a00:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000a04:	e006      	b.n	1a000a14 <pll_get_frac+0x9c>
       *ppll = pll[0];
1a000a06:	466d      	mov	r5, sp
1a000a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a0c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
           *ppll = pll[1];
       } else {
           *ppll = pll[2];
       }
   }
}
1a000a14:	b019      	add	sp, #100	; 0x64
1a000a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
       return -val;
1a000a18:	425b      	negs	r3, r3
1a000a1a:	e7c6      	b.n	1a0009aa <pll_get_frac+0x32>
       *ppll = pll[2];
1a000a1c:	ad10      	add	r5, sp, #64	; 0x40
1a000a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a22:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a000a2a:	e7f3      	b.n	1a000a14 <pll_get_frac+0x9c>
       return -val;
1a000a2c:	425b      	negs	r3, r3
1a000a2e:	e7cd      	b.n	1a0009cc <pll_get_frac+0x54>
       *ppll = pll[1];
1a000a30:	ad08      	add	r5, sp, #32
1a000a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a36:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a000a3e:	e7e9      	b.n	1a000a14 <pll_get_frac+0x9c>
       return -val;
1a000a40:	426d      	negs	r5, r5
1a000a42:	e7d4      	b.n	1a0009ee <pll_get_frac+0x76>
           *ppll = pll[2];
1a000a44:	ad10      	add	r5, sp, #64	; 0x40
1a000a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a4a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000a52:	e7df      	b.n	1a000a14 <pll_get_frac+0x9c>
       if (diff[1] <= diff[2]) {
1a000a54:	42af      	cmp	r7, r5
1a000a56:	db07      	blt.n	1a000a68 <pll_get_frac+0xf0>
           *ppll = pll[1];
1a000a58:	ad08      	add	r5, sp, #32
1a000a5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000a66:	e7d5      	b.n	1a000a14 <pll_get_frac+0x9c>
           *ppll = pll[2];
1a000a68:	ad10      	add	r5, sp, #64	; 0x40
1a000a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a6e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000a76:	e7cd      	b.n	1a000a14 <pll_get_frac+0x9c>

1a000a78 <Chip_Clock_FindBaseClock>:
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000a78:	b430      	push	{r4, r5}
1a000a7a:	4605      	mov	r5, r0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;
1a000a7c:	2300      	movs	r3, #0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000a7e:	201c      	movs	r0, #28

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000a80:	e000      	b.n	1a000a84 <Chip_Clock_FindBaseClock+0xc>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
           baseclk = periph_to_base[i].clkbase;
       }
       else {
           i++;
1a000a82:	3301      	adds	r3, #1
   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000a84:	281c      	cmp	r0, #28
1a000a86:	d118      	bne.n	1a000aba <Chip_Clock_FindBaseClock+0x42>
1a000a88:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000a8c:	0051      	lsls	r1, r2, #1
1a000a8e:	4a0c      	ldr	r2, [pc, #48]	; (1a000ac0 <Chip_Clock_FindBaseClock+0x48>)
1a000a90:	440a      	add	r2, r1
1a000a92:	7914      	ldrb	r4, [r2, #4]
1a000a94:	4284      	cmp	r4, r0
1a000a96:	d010      	beq.n	1a000aba <Chip_Clock_FindBaseClock+0x42>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000a98:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000a9c:	004a      	lsls	r2, r1, #1
1a000a9e:	4908      	ldr	r1, [pc, #32]	; (1a000ac0 <Chip_Clock_FindBaseClock+0x48>)
1a000aa0:	5a8a      	ldrh	r2, [r1, r2]
1a000aa2:	42aa      	cmp	r2, r5
1a000aa4:	d8ed      	bhi.n	1a000a82 <Chip_Clock_FindBaseClock+0xa>
1a000aa6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000aaa:	0051      	lsls	r1, r2, #1
1a000aac:	4a04      	ldr	r2, [pc, #16]	; (1a000ac0 <Chip_Clock_FindBaseClock+0x48>)
1a000aae:	440a      	add	r2, r1
1a000ab0:	8852      	ldrh	r2, [r2, #2]
1a000ab2:	42aa      	cmp	r2, r5
1a000ab4:	d3e5      	bcc.n	1a000a82 <Chip_Clock_FindBaseClock+0xa>
           baseclk = periph_to_base[i].clkbase;
1a000ab6:	4620      	mov	r0, r4
1a000ab8:	e7e4      	b.n	1a000a84 <Chip_Clock_FindBaseClock+0xc>
       }
   }

   return baseclk;
}
1a000aba:	bc30      	pop	{r4, r5}
1a000abc:	4770      	bx	lr
1a000abe:	bf00      	nop
1a000ac0:	1a0028a4 	.word	0x1a0028a4

1a000ac4 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000ac4:	b082      	sub	sp, #8
   volatile uint32_t delay = 1000;
1a000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000aca:	9301      	str	r3, [sp, #4]

   uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000acc:	4a0d      	ldr	r2, [pc, #52]	; (1a000b04 <Chip_Clock_EnableCrystal+0x40>)
1a000ace:	6993      	ldr	r3, [r2, #24]

   /* Clear bypass mode */
   OldCrystalConfig &= (~2);
1a000ad0:	f023 0102 	bic.w	r1, r3, #2
   if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000ad4:	6992      	ldr	r2, [r2, #24]
1a000ad6:	428a      	cmp	r2, r1
1a000ad8:	d001      	beq.n	1a000ade <Chip_Clock_EnableCrystal+0x1a>
       LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000ada:	4a0a      	ldr	r2, [pc, #40]	; (1a000b04 <Chip_Clock_EnableCrystal+0x40>)
1a000adc:	6191      	str	r1, [r2, #24]
   }

   /* Enable crystal oscillator */
   OldCrystalConfig &= (~1);
1a000ade:	f023 0303 	bic.w	r3, r3, #3
   if (OscRateIn >= 20000000) {
1a000ae2:	4a09      	ldr	r2, [pc, #36]	; (1a000b08 <Chip_Clock_EnableCrystal+0x44>)
1a000ae4:	6811      	ldr	r1, [r2, #0]
1a000ae6:	4a09      	ldr	r2, [pc, #36]	; (1a000b0c <Chip_Clock_EnableCrystal+0x48>)
1a000ae8:	4291      	cmp	r1, r2
1a000aea:	d901      	bls.n	1a000af0 <Chip_Clock_EnableCrystal+0x2c>
       OldCrystalConfig |= 4;  /* Set high frequency mode */
1a000aec:	f043 0304 	orr.w	r3, r3, #4

   }
   LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000af0:	4a04      	ldr	r2, [pc, #16]	; (1a000b04 <Chip_Clock_EnableCrystal+0x40>)
1a000af2:	6193      	str	r3, [r2, #24]

   /* Delay for 250uSec */
   while(delay--) {}
1a000af4:	9b01      	ldr	r3, [sp, #4]
1a000af6:	1e5a      	subs	r2, r3, #1
1a000af8:	9201      	str	r2, [sp, #4]
1a000afa:	2b00      	cmp	r3, #0
1a000afc:	d1fa      	bne.n	1a000af4 <Chip_Clock_EnableCrystal+0x30>
}
1a000afe:	b002      	add	sp, #8
1a000b00:	4770      	bx	lr
1a000b02:	bf00      	nop
1a000b04:	40050000 	.word	0x40050000
1a000b08:	1a0029c8 	.word	0x1a0029c8
1a000b0c:	01312cff 	.word	0x01312cff

1a000b10 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000b10:	3012      	adds	r0, #18
1a000b12:	4b05      	ldr	r3, [pc, #20]	; (1a000b28 <Chip_Clock_GetDividerSource+0x18>)
1a000b14:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

   if (reg & 1) {  /* divider is powered down */
1a000b18:	f010 0f01 	tst.w	r0, #1
1a000b1c:	d102      	bne.n	1a000b24 <Chip_Clock_GetDividerSource+0x14>
       return CLKINPUT_PD;
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000b1e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000b22:	4770      	bx	lr
       return CLKINPUT_PD;
1a000b24:	2011      	movs	r0, #17
}
1a000b26:	4770      	bx	lr
1a000b28:	40050000 	.word	0x40050000

1a000b2c <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
   return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000b2c:	f100 0212 	add.w	r2, r0, #18
1a000b30:	4b03      	ldr	r3, [pc, #12]	; (1a000b40 <Chip_Clock_GetDividerDivisor+0x14>)
1a000b32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000b36:	4b03      	ldr	r3, [pc, #12]	; (1a000b44 <Chip_Clock_GetDividerDivisor+0x18>)
1a000b38:	5c18      	ldrb	r0, [r3, r0]
}
1a000b3a:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000b3e:	4770      	bx	lr
1a000b40:	40050000 	.word	0x40050000
1a000b44:	1a00289c 	.word	0x1a00289c

1a000b48 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000b48:	b508      	push	{r3, lr}
   uint32_t rate = 0;

   switch (input) {
1a000b4a:	2810      	cmp	r0, #16
1a000b4c:	d80a      	bhi.n	1a000b64 <Chip_Clock_GetClockInputHz+0x1c>
1a000b4e:	e8df f000 	tbb	[pc, r0]
1a000b52:	0b44      	.short	0x0b44
1a000b54:	0921180d 	.word	0x0921180d
1a000b58:	2d2a2724 	.word	0x2d2a2724
1a000b5c:	34300909 	.word	0x34300909
1a000b60:	3c38      	.short	0x3c38
1a000b62:	40          	.byte	0x40
1a000b63:	00          	.byte	0x00
   uint32_t rate = 0;
1a000b64:	2000      	movs	r0, #0
1a000b66:	e03a      	b.n	1a000bde <Chip_Clock_GetClockInputHz+0x96>
   case CLKIN_32K:
       rate = CRYSTAL_32K_FREQ_IN;
       break;

   case CLKIN_IRC:
       rate = CGU_IRC_FREQ;
1a000b68:	481e      	ldr	r0, [pc, #120]	; (1a000be4 <Chip_Clock_GetClockInputHz+0x9c>)
       break;
1a000b6a:	e038      	b.n	1a000bde <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_ENET_RX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000b6c:	4b1e      	ldr	r3, [pc, #120]	; (1a000be8 <Chip_Clock_GetClockInputHz+0xa0>)
1a000b6e:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000b72:	f003 0307 	and.w	r3, r3, #7
1a000b76:	2b04      	cmp	r3, #4
1a000b78:	d001      	beq.n	1a000b7e <Chip_Clock_GetClockInputHz+0x36>
           /* MII mode requires 25MHz clock */
           rate = 25000000;
1a000b7a:	481c      	ldr	r0, [pc, #112]	; (1a000bec <Chip_Clock_GetClockInputHz+0xa4>)
1a000b7c:	e02f      	b.n	1a000bde <Chip_Clock_GetClockInputHz+0x96>
   uint32_t rate = 0;
1a000b7e:	2000      	movs	r0, #0
1a000b80:	e02d      	b.n	1a000bde <Chip_Clock_GetClockInputHz+0x96>
       }
       break;

   case CLKIN_ENET_TX:
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000b82:	4b19      	ldr	r3, [pc, #100]	; (1a000be8 <Chip_Clock_GetClockInputHz+0xa0>)
1a000b84:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000b88:	f003 0307 	and.w	r3, r3, #7
1a000b8c:	2b04      	cmp	r3, #4
1a000b8e:	d027      	beq.n	1a000be0 <Chip_Clock_GetClockInputHz+0x98>
           rate = 25000000; /* MII uses 25 MHz */
1a000b90:	4816      	ldr	r0, [pc, #88]	; (1a000bec <Chip_Clock_GetClockInputHz+0xa4>)
1a000b92:	e024      	b.n	1a000bde <Chip_Clock_GetClockInputHz+0x96>
           rate = 50000000; /* RMII uses 50 MHz */
       }
       break;

   case CLKIN_CLKIN:
       rate = ExtRateIn;
1a000b94:	4b16      	ldr	r3, [pc, #88]	; (1a000bf0 <Chip_Clock_GetClockInputHz+0xa8>)
1a000b96:	6818      	ldr	r0, [r3, #0]
       break;
1a000b98:	e021      	b.n	1a000bde <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_CRYSTAL:
       rate = OscRateIn;
1a000b9a:	4b16      	ldr	r3, [pc, #88]	; (1a000bf4 <Chip_Clock_GetClockInputHz+0xac>)
1a000b9c:	6818      	ldr	r0, [r3, #0]
       break;
1a000b9e:	e01e      	b.n	1a000bde <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_USBPLL:
       rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000ba0:	4b15      	ldr	r3, [pc, #84]	; (1a000bf8 <Chip_Clock_GetClockInputHz+0xb0>)
1a000ba2:	6818      	ldr	r0, [r3, #0]
       break;
1a000ba4:	e01b      	b.n	1a000bde <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_AUDIOPLL:
       rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000ba6:	4b14      	ldr	r3, [pc, #80]	; (1a000bf8 <Chip_Clock_GetClockInputHz+0xb0>)
1a000ba8:	6858      	ldr	r0, [r3, #4]
       break;
1a000baa:	e018      	b.n	1a000bde <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_MAINPLL:
       rate = Chip_Clock_GetMainPLLHz();
1a000bac:	f000 f868 	bl	1a000c80 <Chip_Clock_GetMainPLLHz>
       break;
1a000bb0:	e015      	b.n	1a000bde <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVA:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000bb2:	2100      	movs	r1, #0
1a000bb4:	f000 f89a 	bl	1a000cec <Chip_Clock_GetDivRate>
       break;
1a000bb8:	e011      	b.n	1a000bde <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVB:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000bba:	2101      	movs	r1, #1
1a000bbc:	f000 f896 	bl	1a000cec <Chip_Clock_GetDivRate>
       break;
1a000bc0:	e00d      	b.n	1a000bde <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVC:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000bc2:	2102      	movs	r1, #2
1a000bc4:	f000 f892 	bl	1a000cec <Chip_Clock_GetDivRate>
       break;
1a000bc8:	e009      	b.n	1a000bde <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVD:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000bca:	2103      	movs	r1, #3
1a000bcc:	f000 f88e 	bl	1a000cec <Chip_Clock_GetDivRate>
       break;
1a000bd0:	e005      	b.n	1a000bde <Chip_Clock_GetClockInputHz+0x96>

   case CLKIN_IDIVE:
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000bd2:	2104      	movs	r1, #4
1a000bd4:	f000 f88a 	bl	1a000cec <Chip_Clock_GetDivRate>
       break;
1a000bd8:	e001      	b.n	1a000bde <Chip_Clock_GetClockInputHz+0x96>
       rate = CRYSTAL_32K_FREQ_IN;
1a000bda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   default:
       break;
   }

   return rate;
}
1a000bde:	bd08      	pop	{r3, pc}
           rate = 50000000; /* RMII uses 50 MHz */
1a000be0:	4806      	ldr	r0, [pc, #24]	; (1a000bfc <Chip_Clock_GetClockInputHz+0xb4>)
   return rate;
1a000be2:	e7fc      	b.n	1a000bde <Chip_Clock_GetClockInputHz+0x96>
1a000be4:	00b71b00 	.word	0x00b71b00
1a000be8:	40043000 	.word	0x40043000
1a000bec:	017d7840 	.word	0x017d7840
1a000bf0:	1a0029c4 	.word	0x1a0029c4
1a000bf4:	1a0029c8 	.word	0x1a0029c8
1a000bf8:	10000100 	.word	0x10000100
1a000bfc:	02faf080 	.word	0x02faf080

1a000c00 <Chip_Clock_CalcMainPLLValue>:
{
1a000c00:	b538      	push	{r3, r4, r5, lr}
1a000c02:	4605      	mov	r5, r0
1a000c04:	460c      	mov	r4, r1
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000c06:	7908      	ldrb	r0, [r1, #4]
1a000c08:	f7ff ff9e 	bl	1a000b48 <Chip_Clock_GetClockInputHz>
1a000c0c:	6160      	str	r0, [r4, #20]
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000c0e:	4b19      	ldr	r3, [pc, #100]	; (1a000c74 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000c10:	442b      	add	r3, r5
1a000c12:	4a19      	ldr	r2, [pc, #100]	; (1a000c78 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000c14:	4293      	cmp	r3, r2
1a000c16:	d821      	bhi.n	1a000c5c <Chip_Clock_CalcMainPLLValue+0x5c>
1a000c18:	b318      	cbz	r0, 1a000c62 <Chip_Clock_CalcMainPLLValue+0x62>
   ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000c1a:	2380      	movs	r3, #128	; 0x80
1a000c1c:	6023      	str	r3, [r4, #0]
   ppll->nsel = 0;
1a000c1e:	2300      	movs	r3, #0
1a000c20:	60a3      	str	r3, [r4, #8]
   ppll->psel = 0;
1a000c22:	60e3      	str	r3, [r4, #12]
   ppll->msel = freq / ppll->fin;
1a000c24:	fbb5 f3f0 	udiv	r3, r5, r0
1a000c28:	6123      	str	r3, [r4, #16]
   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000c2a:	4a14      	ldr	r2, [pc, #80]	; (1a000c7c <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000c2c:	4295      	cmp	r5, r2
1a000c2e:	d903      	bls.n	1a000c38 <Chip_Clock_CalcMainPLLValue+0x38>
1a000c30:	fb03 f000 	mul.w	r0, r3, r0
1a000c34:	42a8      	cmp	r0, r5
1a000c36:	d007      	beq.n	1a000c48 <Chip_Clock_CalcMainPLLValue+0x48>
       pll_get_frac(freq, ppll);
1a000c38:	4621      	mov	r1, r4
1a000c3a:	4628      	mov	r0, r5
1a000c3c:	f7ff fe9c 	bl	1a000978 <pll_get_frac>
       if (!ppll->nsel) {
1a000c40:	68a3      	ldr	r3, [r4, #8]
1a000c42:	b18b      	cbz	r3, 1a000c68 <Chip_Clock_CalcMainPLLValue+0x68>
       ppll->nsel --;
1a000c44:	3b01      	subs	r3, #1
1a000c46:	60a3      	str	r3, [r4, #8]
   if (ppll->msel == 0) {
1a000c48:	6923      	ldr	r3, [r4, #16]
1a000c4a:	b183      	cbz	r3, 1a000c6e <Chip_Clock_CalcMainPLLValue+0x6e>
   if (ppll->psel) {
1a000c4c:	68e2      	ldr	r2, [r4, #12]
1a000c4e:	b10a      	cbz	r2, 1a000c54 <Chip_Clock_CalcMainPLLValue+0x54>
       ppll->psel --;
1a000c50:	3a01      	subs	r2, #1
1a000c52:	60e2      	str	r2, [r4, #12]
   ppll->msel --;
1a000c54:	3b01      	subs	r3, #1
1a000c56:	6123      	str	r3, [r4, #16]
   return 0;
1a000c58:	2000      	movs	r0, #0
}
1a000c5a:	bd38      	pop	{r3, r4, r5, pc}
       return -1;
1a000c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c60:	e7fb      	b.n	1a000c5a <Chip_Clock_CalcMainPLLValue+0x5a>
1a000c62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c66:	e7f8      	b.n	1a000c5a <Chip_Clock_CalcMainPLLValue+0x5a>
           return -1;
1a000c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c6c:	e7f5      	b.n	1a000c5a <Chip_Clock_CalcMainPLLValue+0x5a>
       return - 1;
1a000c6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c72:	e7f2      	b.n	1a000c5a <Chip_Clock_CalcMainPLLValue+0x5a>
1a000c74:	ff6b3a10 	.word	0xff6b3a10
1a000c78:	0b940510 	.word	0x0b940510
1a000c7c:	094c5eff 	.word	0x094c5eff

1a000c80 <Chip_Clock_GetMainPLLHz>:
{
1a000c80:	b530      	push	{r4, r5, lr}
1a000c82:	b083      	sub	sp, #12
   uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000c84:	4d17      	ldr	r5, [pc, #92]	; (1a000ce4 <Chip_Clock_GetMainPLLHz+0x64>)
1a000c86:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000c88:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000c8c:	f7ff ff5c 	bl	1a000b48 <Chip_Clock_GetClockInputHz>
   const uint8_t ptab[] = {1, 2, 4, 8};
1a000c90:	4b15      	ldr	r3, [pc, #84]	; (1a000ce8 <Chip_Clock_GetMainPLLHz+0x68>)
1a000c92:	681b      	ldr	r3, [r3, #0]
1a000c94:	9301      	str	r3, [sp, #4]
   if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000c96:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a000c98:	f013 0f01 	tst.w	r3, #1
1a000c9c:	d020      	beq.n	1a000ce0 <Chip_Clock_GetMainPLLHz+0x60>
   msel = (PLLReg >> 16) & 0xFF;
1a000c9e:	f3c4 4307 	ubfx	r3, r4, #16, #8
   nsel = (PLLReg >> 12) & 0x3;
1a000ca2:	f3c4 3201 	ubfx	r2, r4, #12, #2
   psel = (PLLReg >> 8) & 0x3;
1a000ca6:	f3c4 2101 	ubfx	r1, r4, #8, #2
   fbsel = (PLLReg >> 6) & 0x1;
1a000caa:	f3c4 1580 	ubfx	r5, r4, #6, #1
   m = msel + 1;
1a000cae:	3301      	adds	r3, #1
   n = nsel + 1;
1a000cb0:	3201      	adds	r2, #1
   p = ptab[psel];
1a000cb2:	f10d 0c08 	add.w	ip, sp, #8
1a000cb6:	4461      	add	r1, ip
1a000cb8:	f811 1c04 	ldrb.w	r1, [r1, #-4]
   if (direct || fbsel) {
1a000cbc:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000cc0:	d108      	bne.n	1a000cd4 <Chip_Clock_GetMainPLLHz+0x54>
1a000cc2:	b93d      	cbnz	r5, 1a000cd4 <Chip_Clock_GetMainPLLHz+0x54>
   return (m / (2 * p)) * (freq / n);
1a000cc4:	0049      	lsls	r1, r1, #1
1a000cc6:	fbb3 f3f1 	udiv	r3, r3, r1
1a000cca:	fbb0 f0f2 	udiv	r0, r0, r2
1a000cce:	fb00 f003 	mul.w	r0, r0, r3
1a000cd2:	e003      	b.n	1a000cdc <Chip_Clock_GetMainPLLHz+0x5c>
       return m * (freq / n);
1a000cd4:	fbb0 f0f2 	udiv	r0, r0, r2
1a000cd8:	fb03 f000 	mul.w	r0, r3, r0
}
1a000cdc:	b003      	add	sp, #12
1a000cde:	bd30      	pop	{r4, r5, pc}
       return 0;
1a000ce0:	2000      	movs	r0, #0
1a000ce2:	e7fb      	b.n	1a000cdc <Chip_Clock_GetMainPLLHz+0x5c>
1a000ce4:	40050000 	.word	0x40050000
1a000ce8:	1a002898 	.word	0x1a002898

1a000cec <Chip_Clock_GetDivRate>:
{
1a000cec:	b538      	push	{r3, r4, r5, lr}
1a000cee:	460c      	mov	r4, r1
   input = Chip_Clock_GetDividerSource(divider);
1a000cf0:	4608      	mov	r0, r1
1a000cf2:	f7ff ff0d 	bl	1a000b10 <Chip_Clock_GetDividerSource>
1a000cf6:	4605      	mov	r5, r0
   div = Chip_Clock_GetDividerDivisor(divider);
1a000cf8:	4620      	mov	r0, r4
1a000cfa:	f7ff ff17 	bl	1a000b2c <Chip_Clock_GetDividerDivisor>
1a000cfe:	4604      	mov	r4, r0
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000d00:	4628      	mov	r0, r5
1a000d02:	f7ff ff21 	bl	1a000b48 <Chip_Clock_GetClockInputHz>
1a000d06:	3401      	adds	r4, #1
}
1a000d08:	fbb0 f0f4 	udiv	r0, r0, r4
1a000d0c:	bd38      	pop	{r3, r4, r5, pc}
1a000d0e:	Address 0x000000001a000d0e is out of bounds.


1a000d10 <Chip_Clock_SetBaseClock>:
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000d10:	b430      	push	{r4, r5}
   uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000d12:	f100 0416 	add.w	r4, r0, #22
1a000d16:	00a4      	lsls	r4, r4, #2
1a000d18:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a000d1c:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a000d20:	6864      	ldr	r4, [r4, #4]

   if (BaseClock < CLK_BASE_NONE) {
1a000d22:	281b      	cmp	r0, #27
1a000d24:	d813      	bhi.n	1a000d4e <Chip_Clock_SetBaseClock+0x3e>
       if (Input != CLKINPUT_PD) {
1a000d26:	2911      	cmp	r1, #17
1a000d28:	d01a      	beq.n	1a000d60 <Chip_Clock_SetBaseClock+0x50>
           /* Mask off fields we plan to update */
           reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000d2a:	4d0e      	ldr	r5, [pc, #56]	; (1a000d64 <Chip_Clock_SetBaseClock+0x54>)
1a000d2c:	4025      	ands	r5, r4

           if (autoblocken) {
1a000d2e:	b10a      	cbz	r2, 1a000d34 <Chip_Clock_SetBaseClock+0x24>
               reg |= (1 << 11);
1a000d30:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
           }
           if (powerdn) {
1a000d34:	b10b      	cbz	r3, 1a000d3a <Chip_Clock_SetBaseClock+0x2a>
               reg |= (1 << 0);
1a000d36:	f045 0501 	orr.w	r5, r5, #1
           }

           /* Set clock source */
           reg |= (Input << 24);
1a000d3a:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

           LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000d3e:	3016      	adds	r0, #22
1a000d40:	0080      	lsls	r0, r0, #2
1a000d42:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000d46:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000d4a:	6045      	str	r5, [r0, #4]
1a000d4c:	e008      	b.n	1a000d60 <Chip_Clock_SetBaseClock+0x50>
       }
   }
   else {
       LPC_CGU->BASE_CLK[BaseClock] = reg | 1; /* Power down this base clock */
1a000d4e:	f044 0401 	orr.w	r4, r4, #1
1a000d52:	3016      	adds	r0, #22
1a000d54:	0080      	lsls	r0, r0, #2
1a000d56:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000d5a:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000d5e:	6044      	str	r4, [r0, #4]
   }
}
1a000d60:	bc30      	pop	{r4, r5}
1a000d62:	4770      	bx	lr
1a000d64:	e0fff7fe 	.word	0xe0fff7fe

1a000d68 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
1a000d68:	281b      	cmp	r0, #27
1a000d6a:	d80c      	bhi.n	1a000d86 <Chip_Clock_GetBaseClock+0x1e>
       return CLKINPUT_PD;
   }

   reg = LPC_CGU->BASE_CLK[BaseClock];
1a000d6c:	3016      	adds	r0, #22
1a000d6e:	0080      	lsls	r0, r0, #2
1a000d70:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000d74:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000d78:	6840      	ldr	r0, [r0, #4]

   /* base clock is powered down? */
   if (reg & 1) {
1a000d7a:	f010 0f01 	tst.w	r0, #1
1a000d7e:	d104      	bne.n	1a000d8a <Chip_Clock_GetBaseClock+0x22>
       return CLKINPUT_PD;
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000d80:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000d84:	4770      	bx	lr
       return CLKINPUT_PD;
1a000d86:	2011      	movs	r0, #17
1a000d88:	4770      	bx	lr
       return CLKINPUT_PD;
1a000d8a:	2011      	movs	r0, #17
}
1a000d8c:	4770      	bx	lr

1a000d8e <Chip_Clock_GetBaseClocktHz>:
{
1a000d8e:	b508      	push	{r3, lr}
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000d90:	f7ff ffea 	bl	1a000d68 <Chip_Clock_GetBaseClock>
1a000d94:	f7ff fed8 	bl	1a000b48 <Chip_Clock_GetClockInputHz>
}
1a000d98:	bd08      	pop	{r3, pc}
1a000d9a:	Address 0x000000001a000d9a is out of bounds.


1a000d9c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
   uint32_t reg = 1;

   if (autoen) {
1a000d9c:	b971      	cbnz	r1, 1a000dbc <Chip_Clock_EnableOpts+0x20>
   uint32_t reg = 1;
1a000d9e:	2101      	movs	r1, #1
       reg |= (1 << 1);
   }
   if (wakeupen) {
1a000da0:	b10a      	cbz	r2, 1a000da6 <Chip_Clock_EnableOpts+0xa>
       reg |= (1 << 2);
1a000da2:	f041 0104 	orr.w	r1, r1, #4
   }

   /* Not all clocks support a divider, but we won't check that here. Only
      dividers of 1 and 2 are allowed. Assume 1 if not 2 */
   if (div == 2) {
1a000da6:	2b02      	cmp	r3, #2
1a000da8:	d00a      	beq.n	1a000dc0 <Chip_Clock_EnableOpts+0x24>
       reg |= (1 << 5);
   }

   /* Setup peripheral clock and start running */
   if (clk >= CLK_CCU2_START) {
1a000daa:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000dae:	d30a      	bcc.n	1a000dc6 <Chip_Clock_EnableOpts+0x2a>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000db0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000db4:	4b06      	ldr	r3, [pc, #24]	; (1a000dd0 <Chip_Clock_EnableOpts+0x34>)
1a000db6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000dba:	4770      	bx	lr
       reg |= (1 << 1);
1a000dbc:	2103      	movs	r1, #3
1a000dbe:	e7ef      	b.n	1a000da0 <Chip_Clock_EnableOpts+0x4>
       reg |= (1 << 5);
1a000dc0:	f041 0120 	orr.w	r1, r1, #32
1a000dc4:	e7f1      	b.n	1a000daa <Chip_Clock_EnableOpts+0xe>
   }
   else {
       LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000dc6:	3020      	adds	r0, #32
1a000dc8:	4b02      	ldr	r3, [pc, #8]	; (1a000dd4 <Chip_Clock_EnableOpts+0x38>)
1a000dca:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
   }
}
1a000dce:	4770      	bx	lr
1a000dd0:	40052000 	.word	0x40052000
1a000dd4:	40051000 	.word	0x40051000

1a000dd8 <Chip_Clock_GetRate>:
   LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000dd8:	b510      	push	{r4, lr}
   CHIP_CGU_BASE_CLK_T baseclk;
   uint32_t reg, div, rate;

   /* Get CCU config register for clock */
   if (clk >= CLK_CCU2_START) {
1a000dda:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000dde:	d309      	bcc.n	1a000df4 <Chip_Clock_GetRate+0x1c>
       reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000de0:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a000de4:	4a0d      	ldr	r2, [pc, #52]	; (1a000e1c <Chip_Clock_GetRate+0x44>)
1a000de6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
   else {
       reg = LPC_CCU1->CLKCCU[clk].CFG;
   }

   /* Is the clock enabled? */
   if (reg & 1) {
1a000dea:	f014 0f01 	tst.w	r4, #1
1a000dee:	d107      	bne.n	1a000e00 <Chip_Clock_GetRate+0x28>

       }
       rate = rate / div;
   }
   else {
       rate = 0;
1a000df0:	2000      	movs	r0, #0
   }

   return rate;
}
1a000df2:	bd10      	pop	{r4, pc}
       reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000df4:	f100 0320 	add.w	r3, r0, #32
1a000df8:	4a09      	ldr	r2, [pc, #36]	; (1a000e20 <Chip_Clock_GetRate+0x48>)
1a000dfa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a000dfe:	e7f4      	b.n	1a000dea <Chip_Clock_GetRate+0x12>
       baseclk = Chip_Clock_FindBaseClock(clk);
1a000e00:	f7ff fe3a 	bl	1a000a78 <Chip_Clock_FindBaseClock>
       rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000e04:	f7ff ffc3 	bl	1a000d8e <Chip_Clock_GetBaseClocktHz>
       if (((reg >> 5) & 0x7) == 0) {
1a000e08:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000e0c:	d103      	bne.n	1a000e16 <Chip_Clock_GetRate+0x3e>
           div = 1;
1a000e0e:	2301      	movs	r3, #1
       rate = rate / div;
1a000e10:	fbb0 f0f3 	udiv	r0, r0, r3
1a000e14:	e7ed      	b.n	1a000df2 <Chip_Clock_GetRate+0x1a>
           div = 2;/* No other dividers supported */
1a000e16:	2302      	movs	r3, #2
1a000e18:	e7fa      	b.n	1a000e10 <Chip_Clock_GetRate+0x38>
1a000e1a:	bf00      	nop
1a000e1c:	40052000 	.word	0x40052000
1a000e20:	40051000 	.word	0x40051000

1a000e24 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000e24:	4770      	bx	lr
1a000e26:	Address 0x000000001a000e26 is out of bounds.


1a000e28 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000e28:	b570      	push	{r4, r5, r6, lr}
1a000e2a:	b092      	sub	sp, #72	; 0x48
1a000e2c:	4605      	mov	r5, r0
1a000e2e:	460e      	mov	r6, r1
1a000e30:	4614      	mov	r4, r2
   int i;
   volatile uint32_t delay = 5500;
1a000e32:	f241 537c 	movw	r3, #5500	; 0x157c
1a000e36:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
   PLL_PARAM_T ppll;

   if (clkin == CLKIN_CRYSTAL) {
1a000e38:	2806      	cmp	r0, #6
1a000e3a:	d044      	beq.n	1a000ec6 <Chip_SetupCoreClock+0x9e>
       /* Switch main system clocking to crystal */
       Chip_Clock_EnableCrystal();
   }
   Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000e3c:	2300      	movs	r3, #0
1a000e3e:	2201      	movs	r2, #1
1a000e40:	4629      	mov	r1, r5
1a000e42:	2004      	movs	r0, #4
1a000e44:	f7ff ff64 	bl	1a000d10 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
   /* power down main PLL */
   LPC_CGU->PLL1_CTRL |= 1;
1a000e48:	4a4a      	ldr	r2, [pc, #296]	; (1a000f74 <Chip_SetupCoreClock+0x14c>)
1a000e4a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a000e4c:	f043 0301 	orr.w	r3, r3, #1
1a000e50:	6453      	str	r3, [r2, #68]	; 0x44
   Chip_Clock_DisableMainPLL(); /* Disable PLL */

   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
1a000e52:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a000e56:	a909      	add	r1, sp, #36	; 0x24
1a000e58:	4630      	mov	r0, r6
1a000e5a:	f7ff fed1 	bl	1a000c00 <Chip_Clock_CalcMainPLLValue>

   if (core_freq > 110000000UL) {
1a000e5e:	4b46      	ldr	r3, [pc, #280]	; (1a000f78 <Chip_SetupCoreClock+0x150>)
1a000e60:	429e      	cmp	r6, r3
1a000e62:	d938      	bls.n	1a000ed6 <Chip_SetupCoreClock+0xae>
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000e64:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000e66:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000e6a:	d001      	beq.n	1a000e70 <Chip_SetupCoreClock+0x48>
1a000e6c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000e6e:	b36a      	cbz	r2, 1a000ecc <Chip_SetupCoreClock+0xa4>
           PLL_PARAM_T lpll;
           /* Calculate the PLL Parameters */
           lpll.srcin = clkin;
1a000e70:	f88d 5008 	strb.w	r5, [sp, #8]
           Chip_Clock_CalcMainPLLValue(110000000UL, &lpll);
1a000e74:	a901      	add	r1, sp, #4
1a000e76:	4840      	ldr	r0, [pc, #256]	; (1a000f78 <Chip_SetupCoreClock+0x150>)
1a000e78:	f7ff fec2 	bl	1a000c00 <Chip_Clock_CalcMainPLLValue>
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000e7c:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a000e80:	9b01      	ldr	r3, [sp, #4]
1a000e82:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000e86:	9a05      	ldr	r2, [sp, #20]
1a000e88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000e8c:	9a03      	ldr	r2, [sp, #12]
1a000e8e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000e92:	9a04      	ldr	r2, [sp, #16]
1a000e94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000e98:	4a36      	ldr	r2, [pc, #216]	; (1a000f74 <Chip_SetupCoreClock+0x14c>)
1a000e9a:	6453      	str	r3, [r2, #68]	; 0x44
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000e9c:	4b35      	ldr	r3, [pc, #212]	; (1a000f74 <Chip_SetupCoreClock+0x14c>)
1a000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
           Chip_Clock_SetupMainPLL(&lpll);
           /* Wait for the PLL to lock */
           while(!Chip_Clock_MainPLLLocked()) {}
1a000ea0:	f013 0f01 	tst.w	r3, #1
1a000ea4:	d0fa      	beq.n	1a000e9c <Chip_SetupCoreClock+0x74>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000ea6:	2300      	movs	r3, #0
1a000ea8:	2201      	movs	r2, #1
1a000eaa:	2109      	movs	r1, #9
1a000eac:	2004      	movs	r0, #4
1a000eae:	f7ff ff2f 	bl	1a000d10 <Chip_Clock_SetBaseClock>
           while(delay --){}
1a000eb2:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000eb4:	1e5a      	subs	r2, r3, #1
1a000eb6:	9211      	str	r2, [sp, #68]	; 0x44
1a000eb8:	2b00      	cmp	r3, #0
1a000eba:	d1fa      	bne.n	1a000eb2 <Chip_SetupCoreClock+0x8a>
           delay = 5500;
1a000ebc:	f241 537c 	movw	r3, #5500	; 0x157c
1a000ec0:	9311      	str	r3, [sp, #68]	; 0x44
   uint32_t direct = 0;
1a000ec2:	2500      	movs	r5, #0
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a000ec4:	e008      	b.n	1a000ed8 <Chip_SetupCoreClock+0xb0>
       Chip_Clock_EnableCrystal();
1a000ec6:	f7ff fdfd 	bl	1a000ac4 <Chip_Clock_EnableCrystal>
1a000eca:	e7b7      	b.n	1a000e3c <Chip_SetupCoreClock+0x14>
       } else {
           direct = 1;
           ppll.ctrl &= ~(1 << 7);
1a000ecc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000ed0:	9309      	str	r3, [sp, #36]	; 0x24
           direct = 1;
1a000ed2:	2501      	movs	r5, #1
1a000ed4:	e000      	b.n	1a000ed8 <Chip_SetupCoreClock+0xb0>
   uint32_t direct = 0;
1a000ed6:	2500      	movs	r5, #0
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000ed8:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a000edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000ede:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000ee2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a000ee4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000ee8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a000eea:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000eee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000ef0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000ef4:	4a1f      	ldr	r2, [pc, #124]	; (1a000f74 <Chip_SetupCoreClock+0x14c>)
1a000ef6:	6453      	str	r3, [r2, #68]	; 0x44
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a000ef8:	4b1e      	ldr	r3, [pc, #120]	; (1a000f74 <Chip_SetupCoreClock+0x14c>)
1a000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40

   /* Setup and start the PLL */
   Chip_Clock_SetupMainPLL(&ppll);

   /* Wait for the PLL to lock */
   while(!Chip_Clock_MainPLLLocked()) {}
1a000efc:	f013 0f01 	tst.w	r3, #1
1a000f00:	d0fa      	beq.n	1a000ef8 <Chip_SetupCoreClock+0xd0>

   /* Set core clock base as PLL1 */
   Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000f02:	2300      	movs	r3, #0
1a000f04:	2201      	movs	r2, #1
1a000f06:	2109      	movs	r1, #9
1a000f08:	2004      	movs	r0, #4
1a000f0a:	f7ff ff01 	bl	1a000d10 <Chip_Clock_SetBaseClock>

   while(delay --){} /* Wait for approx 50 uSec */
1a000f0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000f10:	1e5a      	subs	r2, r3, #1
1a000f12:	9211      	str	r2, [sp, #68]	; 0x44
1a000f14:	2b00      	cmp	r3, #0
1a000f16:	d1fa      	bne.n	1a000f0e <Chip_SetupCoreClock+0xe6>
   if (direct) {
1a000f18:	b1d5      	cbz	r5, 1a000f50 <Chip_SetupCoreClock+0x128>
       delay = 5500;
1a000f1a:	f241 537c 	movw	r3, #5500	; 0x157c
1a000f1e:	9311      	str	r3, [sp, #68]	; 0x44
       ppll.ctrl |= 1 << 7;
1a000f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a000f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000f26:	9309      	str	r3, [sp, #36]	; 0x24
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a000f28:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
1a000f2c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000f30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1a000f32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a000f36:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
1a000f38:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000f3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a000f3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000f42:	4a0c      	ldr	r2, [pc, #48]	; (1a000f74 <Chip_SetupCoreClock+0x14c>)
1a000f44:	6453      	str	r3, [r2, #68]	; 0x44
       Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
       while(delay --){} /* Wait for approx 50 uSec */
1a000f46:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000f48:	1e5a      	subs	r2, r3, #1
1a000f4a:	9211      	str	r2, [sp, #68]	; 0x44
1a000f4c:	2b00      	cmp	r3, #0
1a000f4e:	d1fa      	bne.n	1a000f46 <Chip_SetupCoreClock+0x11e>
   }

   if (setbase) {
1a000f50:	b90c      	cbnz	r4, 1a000f56 <Chip_SetupCoreClock+0x12e>
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
                                   InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
       }
   }
}
1a000f52:	b012      	add	sp, #72	; 0x48
1a000f54:	bd70      	pop	{r4, r5, r6, pc}
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000f56:	2400      	movs	r4, #0
1a000f58:	2c11      	cmp	r4, #17
1a000f5a:	d8fa      	bhi.n	1a000f52 <Chip_SetupCoreClock+0x12a>
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000f5c:	4807      	ldr	r0, [pc, #28]	; (1a000f7c <Chip_SetupCoreClock+0x154>)
1a000f5e:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000f62:	78cb      	ldrb	r3, [r1, #3]
1a000f64:	788a      	ldrb	r2, [r1, #2]
1a000f66:	7849      	ldrb	r1, [r1, #1]
1a000f68:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000f6c:	f7ff fed0 	bl	1a000d10 <Chip_Clock_SetBaseClock>
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000f70:	3401      	adds	r4, #1
1a000f72:	e7f1      	b.n	1a000f58 <Chip_SetupCoreClock+0x130>
1a000f74:	40050000 	.word	0x40050000
1a000f78:	068e7780 	.word	0x068e7780
1a000f7c:	1a002910 	.word	0x1a002910

1a000f80 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000f80:	b508      	push	{r3, lr}
   /* CPU core speed */
   SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000f82:	2069      	movs	r0, #105	; 0x69
1a000f84:	f7ff ff28 	bl	1a000dd8 <Chip_Clock_GetRate>
1a000f88:	4b01      	ldr	r3, [pc, #4]	; (1a000f90 <SystemCoreClockUpdate+0x10>)
1a000f8a:	6018      	str	r0, [r3, #0]
}
1a000f8c:	bd08      	pop	{r3, pc}
1a000f8e:	bf00      	nop
1a000f90:	10000114 	.word	0x10000114

1a000f94 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a000f94:	b084      	sub	sp, #16
   volatile uint32_t Cpacr;
   volatile uint32_t Mvfr0;
   volatile uint32_t Mvfr1;
   char vfpPresent = 0;

   Mvfr0 = *regMvfr0;
1a000f96:	4b0f      	ldr	r3, [pc, #60]	; (1a000fd4 <fpuInit+0x40>)
1a000f98:	681b      	ldr	r3, [r3, #0]
1a000f9a:	9302      	str	r3, [sp, #8]
   Mvfr1 = *regMvfr1;
1a000f9c:	4b0e      	ldr	r3, [pc, #56]	; (1a000fd8 <fpuInit+0x44>)
1a000f9e:	681b      	ldr	r3, [r3, #0]
1a000fa0:	9301      	str	r3, [sp, #4]

   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000fa2:	9a02      	ldr	r2, [sp, #8]
1a000fa4:	4b0d      	ldr	r3, [pc, #52]	; (1a000fdc <fpuInit+0x48>)
1a000fa6:	429a      	cmp	r2, r3
1a000fa8:	d00c      	beq.n	1a000fc4 <fpuInit+0x30>
1a000faa:	2300      	movs	r3, #0

   if (vfpPresent) {
1a000fac:	b143      	cbz	r3, 1a000fc0 <fpuInit+0x2c>
       Cpacr = *regCpacr;
1a000fae:	4a0c      	ldr	r2, [pc, #48]	; (1a000fe0 <fpuInit+0x4c>)
1a000fb0:	6813      	ldr	r3, [r2, #0]
1a000fb2:	9303      	str	r3, [sp, #12]
       Cpacr |= (0xF << 20);
1a000fb4:	9b03      	ldr	r3, [sp, #12]
1a000fb6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a000fba:	9303      	str	r3, [sp, #12]
       *regCpacr = Cpacr;  // enable CP10 and CP11 for full access
1a000fbc:	9b03      	ldr	r3, [sp, #12]
1a000fbe:	6013      	str	r3, [r2, #0]
   }
#endif /* __FPU_PRESENT != 0 */
}
1a000fc0:	b004      	add	sp, #16
1a000fc2:	4770      	bx	lr
   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000fc4:	9a01      	ldr	r2, [sp, #4]
1a000fc6:	4b07      	ldr	r3, [pc, #28]	; (1a000fe4 <fpuInit+0x50>)
1a000fc8:	429a      	cmp	r2, r3
1a000fca:	d001      	beq.n	1a000fd0 <fpuInit+0x3c>
1a000fcc:	2300      	movs	r3, #0
1a000fce:	e7ed      	b.n	1a000fac <fpuInit+0x18>
1a000fd0:	2301      	movs	r3, #1
1a000fd2:	e7eb      	b.n	1a000fac <fpuInit+0x18>
1a000fd4:	e000ef40 	.word	0xe000ef40
1a000fd8:	e000ef44 	.word	0xe000ef44
1a000fdc:	10110021 	.word	0x10110021
1a000fe0:	e000ed88 	.word	0xe000ed88
1a000fe4:	11000011 	.word	0x11000011

1a000fe8 <ResetISR>:
void ResetISR(void) {
1a000fe8:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a000fea:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000fec:	4b16      	ldr	r3, [pc, #88]	; (1a001048 <ResetISR+0x60>)
1a000fee:	4a17      	ldr	r2, [pc, #92]	; (1a00104c <ResetISR+0x64>)
1a000ff0:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000ff2:	3304      	adds	r3, #4
1a000ff4:	4a16      	ldr	r2, [pc, #88]	; (1a001050 <ResetISR+0x68>)
1a000ff6:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000ff8:	2300      	movs	r3, #0
1a000ffa:	e005      	b.n	1a001008 <ResetISR+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000ffc:	4a15      	ldr	r2, [pc, #84]	; (1a001054 <ResetISR+0x6c>)
1a000ffe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a001002:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a001006:	3301      	adds	r3, #1
1a001008:	2b07      	cmp	r3, #7
1a00100a:	d9f7      	bls.n	1a000ffc <ResetISR+0x14>
    __asm volatile ("cpsie i");
1a00100c:	b662      	cpsie	i
    SystemInit();
1a00100e:	f000 f90b 	bl	1a001228 <SystemInit>
    SectionTableAddr = &__data_section_table;
1a001012:	4b11      	ldr	r3, [pc, #68]	; (1a001058 <ResetISR+0x70>)
    while (SectionTableAddr < &__data_section_table_end) {
1a001014:	e007      	b.n	1a001026 <ResetISR+0x3e>
        SectionLen = *SectionTableAddr++;
1a001016:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00101a:	689a      	ldr	r2, [r3, #8]
1a00101c:	6859      	ldr	r1, [r3, #4]
1a00101e:	6818      	ldr	r0, [r3, #0]
1a001020:	f7ff f8b4 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a001024:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a001026:	4a0d      	ldr	r2, [pc, #52]	; (1a00105c <ResetISR+0x74>)
1a001028:	4293      	cmp	r3, r2
1a00102a:	d3f4      	bcc.n	1a001016 <ResetISR+0x2e>
1a00102c:	e006      	b.n	1a00103c <ResetISR+0x54>
        ExeAddr = *SectionTableAddr++;
1a00102e:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a001030:	6859      	ldr	r1, [r3, #4]
1a001032:	f854 0b08 	ldr.w	r0, [r4], #8
1a001036:	f7ff f8b8 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a00103a:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a00103c:	4a08      	ldr	r2, [pc, #32]	; (1a001060 <ResetISR+0x78>)
1a00103e:	4293      	cmp	r3, r2
1a001040:	d3f5      	bcc.n	1a00102e <ResetISR+0x46>
    main();
1a001042:	f7ff fb25 	bl	1a000690 <main>
        ;
1a001046:	e7fe      	b.n	1a001046 <ResetISR+0x5e>
1a001048:	40053100 	.word	0x40053100
1a00104c:	10df1000 	.word	0x10df1000
1a001050:	01dff7ff 	.word	0x01dff7ff
1a001054:	e000e280 	.word	0xe000e280
1a001058:	1a000114 	.word	0x1a000114
1a00105c:	1a000150 	.word	0x1a000150
1a001060:	1a000178 	.word	0x1a000178

1a001064 <Board_SetupMuxing>:
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a001064:	2300      	movs	r3, #0
1a001066:	2b17      	cmp	r3, #23
1a001068:	d812      	bhi.n	1a001090 <Board_SetupMuxing+0x2c>
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a00106a:	b410      	push	{r4}
       Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a00106c:	4a09      	ldr	r2, [pc, #36]	; (1a001094 <Board_SetupMuxing+0x30>)
1a00106e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a001072:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a001076:	784a      	ldrb	r2, [r1, #1]
1a001078:	8848      	ldrh	r0, [r1, #2]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a00107a:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a00107e:	4906      	ldr	r1, [pc, #24]	; (1a001098 <Board_SetupMuxing+0x34>)
1a001080:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
   for (ix = 0; ix < arrayLength; ix++ ) {
1a001084:	3301      	adds	r3, #1
1a001086:	2b17      	cmp	r3, #23
1a001088:	d9f0      	bls.n	1a00106c <Board_SetupMuxing+0x8>
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a00108a:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00108e:	4770      	bx	lr
1a001090:	4770      	bx	lr
1a001092:	bf00      	nop
1a001094:	1a002964 	.word	0x1a002964
1a001098:	40086000 	.word	0x40086000

1a00109c <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a00109c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
   uint32_t FAValue = Hz / 21510000;

   LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00109e:	4a17      	ldr	r2, [pc, #92]	; (1a0010fc <Board_SetupClocking+0x60>)
1a0010a0:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0010a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0010a8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0010ac:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
   LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0010b0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0010b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0010b8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0010bc:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0010c0:	2201      	movs	r2, #1
1a0010c2:	490f      	ldr	r1, [pc, #60]	; (1a001100 <Board_SetupClocking+0x64>)
1a0010c4:	2006      	movs	r0, #6
1a0010c6:	f7ff feaf 	bl	1a000e28 <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0010ca:	2400      	movs	r4, #0
1a0010cc:	2c02      	cmp	r4, #2
1a0010ce:	d80b      	bhi.n	1a0010e8 <Board_SetupClocking+0x4c>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0010d0:	480c      	ldr	r0, [pc, #48]	; (1a001104 <Board_SetupClocking+0x68>)
1a0010d2:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0010d6:	78cb      	ldrb	r3, [r1, #3]
1a0010d8:	788a      	ldrb	r2, [r1, #2]
1a0010da:	7849      	ldrb	r1, [r1, #1]
1a0010dc:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0010e0:	f7ff fe16 	bl	1a000d10 <Chip_Clock_SetBaseClock>
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0010e4:	3401      	adds	r4, #1
1a0010e6:	e7f1      	b.n	1a0010cc <Board_SetupClocking+0x30>
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0010e8:	4b04      	ldr	r3, [pc, #16]	; (1a0010fc <Board_SetupClocking+0x60>)
1a0010ea:	685a      	ldr	r2, [r3, #4]
1a0010ec:	f022 020c 	bic.w	r2, r2, #12
1a0010f0:	605a      	str	r2, [r3, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0010f2:	685a      	ldr	r2, [r3, #4]
1a0010f4:	f042 0203 	orr.w	r2, r2, #3
1a0010f8:	605a      	str	r2, [r3, #4]
}
1a0010fa:	bd10      	pop	{r4, pc}
1a0010fc:	40043000 	.word	0x40043000
1a001100:	0c28cb00 	.word	0x0c28cb00
1a001104:	1a002958 	.word	0x1a002958

1a001108 <Board_SystemInit>:

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a001108:	b508      	push	{r3, lr}
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a00110a:	f7ff ffab 	bl	1a001064 <Board_SetupMuxing>
   Board_SetupClocking();
1a00110e:	f7ff ffc5 	bl	1a00109c <Board_SetupClocking>
}
1a001112:	bd08      	pop	{r3, pc}

1a001114 <Board_LED_Init>:

static void Board_LED_Init()
{
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a001114:	2200      	movs	r2, #0
1a001116:	2a05      	cmp	r2, #5
1a001118:	d819      	bhi.n	1a00114e <Board_LED_Init+0x3a>
{
1a00111a:	b470      	push	{r4, r5, r6}
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
1a00111c:	490c      	ldr	r1, [pc, #48]	; (1a001150 <Board_LED_Init+0x3c>)
1a00111e:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a001122:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a001126:	784c      	ldrb	r4, [r1, #1]
 * @param  pin     : GPIO pin to set direction on as output
 * @return Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
   pGPIO->DIR[port] |= 1UL << pin;
1a001128:	4b0a      	ldr	r3, [pc, #40]	; (1a001154 <Board_LED_Init+0x40>)
1a00112a:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a00112e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a001132:	2001      	movs	r0, #1
1a001134:	40a0      	lsls	r0, r4
1a001136:	4301      	orrs	r1, r0
1a001138:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
   pGPIO->B[port][pin] = setting;
1a00113c:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a001140:	2100      	movs	r1, #0
1a001142:	5519      	strb	r1, [r3, r4]
   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a001144:	3201      	adds	r2, #1
1a001146:	2a05      	cmp	r2, #5
1a001148:	d9e8      	bls.n	1a00111c <Board_LED_Init+0x8>
       Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin, (bool) false);
   }
}
1a00114a:	bc70      	pop	{r4, r5, r6}
1a00114c:	4770      	bx	lr
1a00114e:	4770      	bx	lr
1a001150:	1a0029cc 	.word	0x1a0029cc
1a001154:	400f4000 	.word	0x400f4000

1a001158 <Board_UART_Init>:
   LPC_SCU->SFSP[port][pin] = modefunc;
1a001158:	4b03      	ldr	r3, [pc, #12]	; (1a001168 <Board_UART_Init+0x10>)
1a00115a:	2212      	movs	r2, #18
1a00115c:	f8c3 2310 	str.w	r2, [r3, #784]	; 0x310
1a001160:	22d1      	movs	r2, #209	; 0xd1
1a001162:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
1a001166:	4770      	bx	lr
1a001168:	40086000 	.word	0x40086000

1a00116c <Board_Debug_Init>:
{
1a00116c:	b510      	push	{r4, lr}
   Board_UART_Init(DEBUG_UART);
1a00116e:	4c08      	ldr	r4, [pc, #32]	; (1a001190 <Board_Debug_Init+0x24>)
1a001170:	4620      	mov	r0, r4
1a001172:	f7ff fff1 	bl	1a001158 <Board_UART_Init>
   Chip_UART_Init(DEBUG_UART);
1a001176:	4620      	mov	r0, r4
1a001178:	f7ff faf0 	bl	1a00075c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, 115200);
1a00117c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a001180:	4620      	mov	r0, r4
1a001182:	f7ff fb3b 	bl	1a0007fc <Chip_UART_SetBaudFDR>
   pUART->LCR = config;
1a001186:	2303      	movs	r3, #3
1a001188:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00118a:	2301      	movs	r3, #1
1a00118c:	65e3      	str	r3, [r4, #92]	; 0x5c
}
1a00118e:	bd10      	pop	{r4, pc}
1a001190:	400c1000 	.word	0x400c1000

1a001194 <Board_LED_Set>:

void Board_LED_Set(uint8_t LEDNumber, bool On)
{
   if (LEDNumber < (sizeof(gpioLEDBits) / sizeof(io_port_t)))
1a001194:	2805      	cmp	r0, #5
1a001196:	d80d      	bhi.n	1a0011b4 <Board_LED_Set+0x20>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[LEDNumber].port, gpioLEDBits[LEDNumber].pin, (bool) !On);
1a001198:	4a07      	ldr	r2, [pc, #28]	; (1a0011b8 <Board_LED_Set+0x24>)
1a00119a:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a00119e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
1a0011a2:	7842      	ldrb	r2, [r0, #1]
1a0011a4:	f081 0101 	eor.w	r1, r1, #1
1a0011a8:	015b      	lsls	r3, r3, #5
1a0011aa:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0011ae:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0011b2:	5499      	strb	r1, [r3, r2]
}
1a0011b4:	4770      	bx	lr
1a0011b6:	bf00      	nop
1a0011b8:	1a0029cc 	.word	0x1a0029cc

1a0011bc <Board_LED_Test>:

bool Board_LED_Test(uint8_t LEDNumber)
{
   if (LEDNumber < (sizeof(gpioLEDBits) / sizeof(io_port_t)))
1a0011bc:	2805      	cmp	r0, #5
1a0011be:	d901      	bls.n	1a0011c4 <Board_LED_Test+0x8>
       return (bool) !Chip_GPIO_GetPinState(LPC_GPIO_PORT, gpioLEDBits[LEDNumber].port, gpioLEDBits[LEDNumber].pin);

   return false;
1a0011c0:	2000      	movs	r0, #0
}
1a0011c2:	4770      	bx	lr
       return (bool) !Chip_GPIO_GetPinState(LPC_GPIO_PORT, gpioLEDBits[LEDNumber].port, gpioLEDBits[LEDNumber].pin);
1a0011c4:	4a07      	ldr	r2, [pc, #28]	; (1a0011e4 <Board_LED_Test+0x28>)
1a0011c6:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a0011ca:	eb02 0040 	add.w	r0, r2, r0, lsl #1
1a0011ce:	7842      	ldrb	r2, [r0, #1]
   return (bool) pGPIO->B[port][pin];
1a0011d0:	015b      	lsls	r3, r3, #5
1a0011d2:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0011d6:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0011da:	5c98      	ldrb	r0, [r3, r2]
1a0011dc:	fab0 f080 	clz	r0, r0
1a0011e0:	0940      	lsrs	r0, r0, #5
1a0011e2:	4770      	bx	lr
1a0011e4:	1a0029cc 	.word	0x1a0029cc

1a0011e8 <Board_LED_Toggle>:

void Board_LED_Toggle(uint8_t LEDNumber)
{
1a0011e8:	b510      	push	{r4, lr}
1a0011ea:	4604      	mov	r4, r0
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
1a0011ec:	f7ff ffe6 	bl	1a0011bc <Board_LED_Test>
1a0011f0:	f080 0101 	eor.w	r1, r0, #1
1a0011f4:	b2c9      	uxtb	r1, r1
1a0011f6:	4620      	mov	r0, r4
1a0011f8:	f7ff ffcc 	bl	1a001194 <Board_LED_Set>
}
1a0011fc:	bd10      	pop	{r4, pc}
1a0011fe:	Address 0x000000001a0011fe is out of bounds.


1a001200 <Board_Init>:
}

/* Set up and initialize all required blocks and functions related to the
   board hardware */
void Board_Init(void)
{
1a001200:	b508      	push	{r3, lr}
   /* Sets up DEBUG UART */
   DEBUGINIT();
1a001202:	f7ff ffb3 	bl	1a00116c <Board_Debug_Init>

   /* Initializes GPIO */
   Chip_GPIO_Init(LPC_GPIO_PORT);
1a001206:	4806      	ldr	r0, [pc, #24]	; (1a001220 <Board_Init+0x20>)
1a001208:	f7ff fe0c 	bl	1a000e24 <Chip_GPIO_Init>

   /* Initialize LEDs */
   Board_LED_Init();
1a00120c:	f7ff ff82 	bl	1a001114 <Board_LED_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
   LPC_CREG->CREG6 |= 0x4;
1a001210:	4a04      	ldr	r2, [pc, #16]	; (1a001224 <Board_Init+0x24>)
1a001212:	f8d2 312c 	ldr.w	r3, [r2, #300]	; 0x12c
1a001216:	f043 0304 	orr.w	r3, r3, #4
1a00121a:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
}
1a00121e:	bd08      	pop	{r3, pc}
1a001220:	400f4000 	.word	0x400f4000
1a001224:	40043000 	.word	0x40043000

1a001228 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a001228:	b508      	push	{r3, lr}

   *pSCB_VTOR = (unsigned int) &__Vectors;
#endif

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a00122a:	f7ff feb3 	bl	1a000f94 <fpuInit>
#if defined(NO_BOARD_LIB)
   /* Chip specific SystemInit */
   Chip_SystemInit();
#else
   /* Board specific SystemInit */
   Board_SystemInit();
1a00122e:	f7ff ff6b 	bl	1a001108 <Board_SystemInit>
#endif

#endif /* defined(CORE_M3) || defined(CORE_M4) */
}
1a001232:	bd08      	pop	{r3, pc}

1a001234 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a001234:	4b05      	ldr	r3, [pc, #20]	; (1a00124c <_sbrk_r+0x18>)
1a001236:	681b      	ldr	r3, [r3, #0]
1a001238:	b123      	cbz	r3, 1a001244 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a00123a:	4b04      	ldr	r3, [pc, #16]	; (1a00124c <_sbrk_r+0x18>)
1a00123c:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a00123e:	4401      	add	r1, r0
1a001240:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a001242:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a001244:	4b01      	ldr	r3, [pc, #4]	; (1a00124c <_sbrk_r+0x18>)
1a001246:	4a02      	ldr	r2, [pc, #8]	; (1a001250 <_sbrk_r+0x1c>)
1a001248:	601a      	str	r2, [r3, #0]
1a00124a:	e7f6      	b.n	1a00123a <_sbrk_r+0x6>
1a00124c:	10000108 	.word	0x10000108
1a001250:	10000124 	.word	0x10000124

1a001254 <__aeabi_uldivmod>:
1a001254:	b953      	cbnz	r3, 1a00126c <__aeabi_uldivmod+0x18>
1a001256:	b94a      	cbnz	r2, 1a00126c <__aeabi_uldivmod+0x18>
1a001258:	2900      	cmp	r1, #0
1a00125a:	bf08      	it	eq
1a00125c:	2800      	cmpeq	r0, #0
1a00125e:	bf1c      	itt	ne
1a001260:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a001264:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a001268:	f000 b974 	b.w	1a001554 <__aeabi_idiv0>
1a00126c:	f1ad 0c08 	sub.w	ip, sp, #8
1a001270:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a001274:	f000 f806 	bl	1a001284 <__udivmoddi4>
1a001278:	f8dd e004 	ldr.w	lr, [sp, #4]
1a00127c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a001280:	b004      	add	sp, #16
1a001282:	4770      	bx	lr

1a001284 <__udivmoddi4>:
1a001284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001288:	9e08      	ldr	r6, [sp, #32]
1a00128a:	4604      	mov	r4, r0
1a00128c:	4688      	mov	r8, r1
1a00128e:	2b00      	cmp	r3, #0
1a001290:	f040 8085 	bne.w	1a00139e <__udivmoddi4+0x11a>
1a001294:	428a      	cmp	r2, r1
1a001296:	4615      	mov	r5, r2
1a001298:	d948      	bls.n	1a00132c <__udivmoddi4+0xa8>
1a00129a:	fab2 f282 	clz	r2, r2
1a00129e:	b14a      	cbz	r2, 1a0012b4 <__udivmoddi4+0x30>
1a0012a0:	f1c2 0720 	rsb	r7, r2, #32
1a0012a4:	fa01 f302 	lsl.w	r3, r1, r2
1a0012a8:	fa20 f707 	lsr.w	r7, r0, r7
1a0012ac:	4095      	lsls	r5, r2
1a0012ae:	ea47 0803 	orr.w	r8, r7, r3
1a0012b2:	4094      	lsls	r4, r2
1a0012b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0012b8:	0c23      	lsrs	r3, r4, #16
1a0012ba:	fbb8 f7fe 	udiv	r7, r8, lr
1a0012be:	fa1f fc85 	uxth.w	ip, r5
1a0012c2:	fb0e 8817 	mls	r8, lr, r7, r8
1a0012c6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0012ca:	fb07 f10c 	mul.w	r1, r7, ip
1a0012ce:	4299      	cmp	r1, r3
1a0012d0:	d909      	bls.n	1a0012e6 <__udivmoddi4+0x62>
1a0012d2:	18eb      	adds	r3, r5, r3
1a0012d4:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0012d8:	f080 80e3 	bcs.w	1a0014a2 <__udivmoddi4+0x21e>
1a0012dc:	4299      	cmp	r1, r3
1a0012de:	f240 80e0 	bls.w	1a0014a2 <__udivmoddi4+0x21e>
1a0012e2:	3f02      	subs	r7, #2
1a0012e4:	442b      	add	r3, r5
1a0012e6:	1a5b      	subs	r3, r3, r1
1a0012e8:	b2a4      	uxth	r4, r4
1a0012ea:	fbb3 f0fe 	udiv	r0, r3, lr
1a0012ee:	fb0e 3310 	mls	r3, lr, r0, r3
1a0012f2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a0012f6:	fb00 fc0c 	mul.w	ip, r0, ip
1a0012fa:	45a4      	cmp	ip, r4
1a0012fc:	d909      	bls.n	1a001312 <__udivmoddi4+0x8e>
1a0012fe:	192c      	adds	r4, r5, r4
1a001300:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001304:	f080 80cb 	bcs.w	1a00149e <__udivmoddi4+0x21a>
1a001308:	45a4      	cmp	ip, r4
1a00130a:	f240 80c8 	bls.w	1a00149e <__udivmoddi4+0x21a>
1a00130e:	3802      	subs	r0, #2
1a001310:	442c      	add	r4, r5
1a001312:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a001316:	eba4 040c 	sub.w	r4, r4, ip
1a00131a:	2700      	movs	r7, #0
1a00131c:	b11e      	cbz	r6, 1a001326 <__udivmoddi4+0xa2>
1a00131e:	40d4      	lsrs	r4, r2
1a001320:	2300      	movs	r3, #0
1a001322:	e9c6 4300 	strd	r4, r3, [r6]
1a001326:	4639      	mov	r1, r7
1a001328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00132c:	2a00      	cmp	r2, #0
1a00132e:	d053      	beq.n	1a0013d8 <__udivmoddi4+0x154>
1a001330:	fab2 f282 	clz	r2, r2
1a001334:	2a00      	cmp	r2, #0
1a001336:	f040 80b6 	bne.w	1a0014a6 <__udivmoddi4+0x222>
1a00133a:	1b49      	subs	r1, r1, r5
1a00133c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001340:	fa1f f885 	uxth.w	r8, r5
1a001344:	2701      	movs	r7, #1
1a001346:	fbb1 fcfe 	udiv	ip, r1, lr
1a00134a:	0c23      	lsrs	r3, r4, #16
1a00134c:	fb0e 111c 	mls	r1, lr, ip, r1
1a001350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a001354:	fb08 f10c 	mul.w	r1, r8, ip
1a001358:	4299      	cmp	r1, r3
1a00135a:	d907      	bls.n	1a00136c <__udivmoddi4+0xe8>
1a00135c:	18eb      	adds	r3, r5, r3
1a00135e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a001362:	d202      	bcs.n	1a00136a <__udivmoddi4+0xe6>
1a001364:	4299      	cmp	r1, r3
1a001366:	f200 80ec 	bhi.w	1a001542 <__udivmoddi4+0x2be>
1a00136a:	4684      	mov	ip, r0
1a00136c:	1a59      	subs	r1, r3, r1
1a00136e:	b2a3      	uxth	r3, r4
1a001370:	fbb1 f0fe 	udiv	r0, r1, lr
1a001374:	fb0e 1410 	mls	r4, lr, r0, r1
1a001378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a00137c:	fb08 f800 	mul.w	r8, r8, r0
1a001380:	45a0      	cmp	r8, r4
1a001382:	d907      	bls.n	1a001394 <__udivmoddi4+0x110>
1a001384:	192c      	adds	r4, r5, r4
1a001386:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a00138a:	d202      	bcs.n	1a001392 <__udivmoddi4+0x10e>
1a00138c:	45a0      	cmp	r8, r4
1a00138e:	f200 80dc 	bhi.w	1a00154a <__udivmoddi4+0x2c6>
1a001392:	4618      	mov	r0, r3
1a001394:	eba4 0408 	sub.w	r4, r4, r8
1a001398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a00139c:	e7be      	b.n	1a00131c <__udivmoddi4+0x98>
1a00139e:	428b      	cmp	r3, r1
1a0013a0:	d908      	bls.n	1a0013b4 <__udivmoddi4+0x130>
1a0013a2:	2e00      	cmp	r6, #0
1a0013a4:	d078      	beq.n	1a001498 <__udivmoddi4+0x214>
1a0013a6:	2700      	movs	r7, #0
1a0013a8:	e9c6 0100 	strd	r0, r1, [r6]
1a0013ac:	4638      	mov	r0, r7
1a0013ae:	4639      	mov	r1, r7
1a0013b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0013b4:	fab3 f783 	clz	r7, r3
1a0013b8:	b97f      	cbnz	r7, 1a0013da <__udivmoddi4+0x156>
1a0013ba:	428b      	cmp	r3, r1
1a0013bc:	d302      	bcc.n	1a0013c4 <__udivmoddi4+0x140>
1a0013be:	4282      	cmp	r2, r0
1a0013c0:	f200 80bd 	bhi.w	1a00153e <__udivmoddi4+0x2ba>
1a0013c4:	1a84      	subs	r4, r0, r2
1a0013c6:	eb61 0303 	sbc.w	r3, r1, r3
1a0013ca:	2001      	movs	r0, #1
1a0013cc:	4698      	mov	r8, r3
1a0013ce:	2e00      	cmp	r6, #0
1a0013d0:	d0a9      	beq.n	1a001326 <__udivmoddi4+0xa2>
1a0013d2:	e9c6 4800 	strd	r4, r8, [r6]
1a0013d6:	e7a6      	b.n	1a001326 <__udivmoddi4+0xa2>
1a0013d8:	deff      	udf	#255	; 0xff
1a0013da:	f1c7 0520 	rsb	r5, r7, #32
1a0013de:	40bb      	lsls	r3, r7
1a0013e0:	fa22 fc05 	lsr.w	ip, r2, r5
1a0013e4:	ea4c 0c03 	orr.w	ip, ip, r3
1a0013e8:	fa01 f407 	lsl.w	r4, r1, r7
1a0013ec:	fa20 f805 	lsr.w	r8, r0, r5
1a0013f0:	fa21 f305 	lsr.w	r3, r1, r5
1a0013f4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a0013f8:	ea48 0404 	orr.w	r4, r8, r4
1a0013fc:	fbb3 f9fe 	udiv	r9, r3, lr
1a001400:	0c21      	lsrs	r1, r4, #16
1a001402:	fb0e 3319 	mls	r3, lr, r9, r3
1a001406:	fa1f f88c 	uxth.w	r8, ip
1a00140a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a00140e:	fb09 fa08 	mul.w	sl, r9, r8
1a001412:	459a      	cmp	sl, r3
1a001414:	fa02 f207 	lsl.w	r2, r2, r7
1a001418:	fa00 f107 	lsl.w	r1, r0, r7
1a00141c:	d90b      	bls.n	1a001436 <__udivmoddi4+0x1b2>
1a00141e:	eb1c 0303 	adds.w	r3, ip, r3
1a001422:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a001426:	f080 8088 	bcs.w	1a00153a <__udivmoddi4+0x2b6>
1a00142a:	459a      	cmp	sl, r3
1a00142c:	f240 8085 	bls.w	1a00153a <__udivmoddi4+0x2b6>
1a001430:	f1a9 0902 	sub.w	r9, r9, #2
1a001434:	4463      	add	r3, ip
1a001436:	eba3 030a 	sub.w	r3, r3, sl
1a00143a:	b2a4      	uxth	r4, r4
1a00143c:	fbb3 f0fe 	udiv	r0, r3, lr
1a001440:	fb0e 3310 	mls	r3, lr, r0, r3
1a001444:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001448:	fb00 f808 	mul.w	r8, r0, r8
1a00144c:	45a0      	cmp	r8, r4
1a00144e:	d908      	bls.n	1a001462 <__udivmoddi4+0x1de>
1a001450:	eb1c 0404 	adds.w	r4, ip, r4
1a001454:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001458:	d26b      	bcs.n	1a001532 <__udivmoddi4+0x2ae>
1a00145a:	45a0      	cmp	r8, r4
1a00145c:	d969      	bls.n	1a001532 <__udivmoddi4+0x2ae>
1a00145e:	3802      	subs	r0, #2
1a001460:	4464      	add	r4, ip
1a001462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a001466:	eba4 0408 	sub.w	r4, r4, r8
1a00146a:	fba0 8902 	umull	r8, r9, r0, r2
1a00146e:	454c      	cmp	r4, r9
1a001470:	46c6      	mov	lr, r8
1a001472:	464b      	mov	r3, r9
1a001474:	d354      	bcc.n	1a001520 <__udivmoddi4+0x29c>
1a001476:	d051      	beq.n	1a00151c <__udivmoddi4+0x298>
1a001478:	2e00      	cmp	r6, #0
1a00147a:	d069      	beq.n	1a001550 <__udivmoddi4+0x2cc>
1a00147c:	ebb1 020e 	subs.w	r2, r1, lr
1a001480:	eb64 0403 	sbc.w	r4, r4, r3
1a001484:	fa04 f505 	lsl.w	r5, r4, r5
1a001488:	fa22 f307 	lsr.w	r3, r2, r7
1a00148c:	40fc      	lsrs	r4, r7
1a00148e:	431d      	orrs	r5, r3
1a001490:	e9c6 5400 	strd	r5, r4, [r6]
1a001494:	2700      	movs	r7, #0
1a001496:	e746      	b.n	1a001326 <__udivmoddi4+0xa2>
1a001498:	4637      	mov	r7, r6
1a00149a:	4630      	mov	r0, r6
1a00149c:	e743      	b.n	1a001326 <__udivmoddi4+0xa2>
1a00149e:	4618      	mov	r0, r3
1a0014a0:	e737      	b.n	1a001312 <__udivmoddi4+0x8e>
1a0014a2:	4607      	mov	r7, r0
1a0014a4:	e71f      	b.n	1a0012e6 <__udivmoddi4+0x62>
1a0014a6:	f1c2 0320 	rsb	r3, r2, #32
1a0014aa:	fa20 f703 	lsr.w	r7, r0, r3
1a0014ae:	4095      	lsls	r5, r2
1a0014b0:	fa01 f002 	lsl.w	r0, r1, r2
1a0014b4:	fa21 f303 	lsr.w	r3, r1, r3
1a0014b8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0014bc:	4338      	orrs	r0, r7
1a0014be:	0c01      	lsrs	r1, r0, #16
1a0014c0:	fbb3 f7fe 	udiv	r7, r3, lr
1a0014c4:	fa1f f885 	uxth.w	r8, r5
1a0014c8:	fb0e 3317 	mls	r3, lr, r7, r3
1a0014cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0014d0:	fb07 f308 	mul.w	r3, r7, r8
1a0014d4:	428b      	cmp	r3, r1
1a0014d6:	fa04 f402 	lsl.w	r4, r4, r2
1a0014da:	d907      	bls.n	1a0014ec <__udivmoddi4+0x268>
1a0014dc:	1869      	adds	r1, r5, r1
1a0014de:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a0014e2:	d228      	bcs.n	1a001536 <__udivmoddi4+0x2b2>
1a0014e4:	428b      	cmp	r3, r1
1a0014e6:	d926      	bls.n	1a001536 <__udivmoddi4+0x2b2>
1a0014e8:	3f02      	subs	r7, #2
1a0014ea:	4429      	add	r1, r5
1a0014ec:	1acb      	subs	r3, r1, r3
1a0014ee:	b281      	uxth	r1, r0
1a0014f0:	fbb3 f0fe 	udiv	r0, r3, lr
1a0014f4:	fb0e 3310 	mls	r3, lr, r0, r3
1a0014f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a0014fc:	fb00 f308 	mul.w	r3, r0, r8
1a001500:	428b      	cmp	r3, r1
1a001502:	d907      	bls.n	1a001514 <__udivmoddi4+0x290>
1a001504:	1869      	adds	r1, r5, r1
1a001506:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a00150a:	d210      	bcs.n	1a00152e <__udivmoddi4+0x2aa>
1a00150c:	428b      	cmp	r3, r1
1a00150e:	d90e      	bls.n	1a00152e <__udivmoddi4+0x2aa>
1a001510:	3802      	subs	r0, #2
1a001512:	4429      	add	r1, r5
1a001514:	1ac9      	subs	r1, r1, r3
1a001516:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a00151a:	e714      	b.n	1a001346 <__udivmoddi4+0xc2>
1a00151c:	4541      	cmp	r1, r8
1a00151e:	d2ab      	bcs.n	1a001478 <__udivmoddi4+0x1f4>
1a001520:	ebb8 0e02 	subs.w	lr, r8, r2
1a001524:	eb69 020c 	sbc.w	r2, r9, ip
1a001528:	3801      	subs	r0, #1
1a00152a:	4613      	mov	r3, r2
1a00152c:	e7a4      	b.n	1a001478 <__udivmoddi4+0x1f4>
1a00152e:	4660      	mov	r0, ip
1a001530:	e7f0      	b.n	1a001514 <__udivmoddi4+0x290>
1a001532:	4618      	mov	r0, r3
1a001534:	e795      	b.n	1a001462 <__udivmoddi4+0x1de>
1a001536:	4667      	mov	r7, ip
1a001538:	e7d8      	b.n	1a0014ec <__udivmoddi4+0x268>
1a00153a:	4681      	mov	r9, r0
1a00153c:	e77b      	b.n	1a001436 <__udivmoddi4+0x1b2>
1a00153e:	4638      	mov	r0, r7
1a001540:	e745      	b.n	1a0013ce <__udivmoddi4+0x14a>
1a001542:	f1ac 0c02 	sub.w	ip, ip, #2
1a001546:	442b      	add	r3, r5
1a001548:	e710      	b.n	1a00136c <__udivmoddi4+0xe8>
1a00154a:	3802      	subs	r0, #2
1a00154c:	442c      	add	r4, r5
1a00154e:	e721      	b.n	1a001394 <__udivmoddi4+0x110>
1a001550:	4637      	mov	r7, r6
1a001552:	e6e8      	b.n	1a001326 <__udivmoddi4+0xa2>

1a001554 <__aeabi_idiv0>:
1a001554:	4770      	bx	lr
1a001556:	bf00      	nop

1a001558 <atoi>:
1a001558:	220a      	movs	r2, #10
1a00155a:	2100      	movs	r1, #0
1a00155c:	f000 b918 	b.w	1a001790 <strtol>

1a001560 <memcpy>:
1a001560:	440a      	add	r2, r1
1a001562:	4291      	cmp	r1, r2
1a001564:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a001568:	d100      	bne.n	1a00156c <memcpy+0xc>
1a00156a:	4770      	bx	lr
1a00156c:	b510      	push	{r4, lr}
1a00156e:	f811 4b01 	ldrb.w	r4, [r1], #1
1a001572:	f803 4f01 	strb.w	r4, [r3, #1]!
1a001576:	4291      	cmp	r1, r2
1a001578:	d1f9      	bne.n	1a00156e <memcpy+0xe>
1a00157a:	bd10      	pop	{r4, pc}

1a00157c <memset>:
1a00157c:	4402      	add	r2, r0
1a00157e:	4603      	mov	r3, r0
1a001580:	4293      	cmp	r3, r2
1a001582:	d100      	bne.n	1a001586 <memset+0xa>
1a001584:	4770      	bx	lr
1a001586:	f803 1b01 	strb.w	r1, [r3], #1
1a00158a:	e7f9      	b.n	1a001580 <memset+0x4>

1a00158c <siprintf>:
1a00158c:	b40e      	push	{r1, r2, r3}
1a00158e:	b500      	push	{lr}
1a001590:	b09c      	sub	sp, #112	; 0x70
1a001592:	ab1d      	add	r3, sp, #116	; 0x74
1a001594:	9002      	str	r0, [sp, #8]
1a001596:	9006      	str	r0, [sp, #24]
1a001598:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
1a00159c:	4809      	ldr	r0, [pc, #36]	; (1a0015c4 <siprintf+0x38>)
1a00159e:	9107      	str	r1, [sp, #28]
1a0015a0:	9104      	str	r1, [sp, #16]
1a0015a2:	4909      	ldr	r1, [pc, #36]	; (1a0015c8 <siprintf+0x3c>)
1a0015a4:	f853 2b04 	ldr.w	r2, [r3], #4
1a0015a8:	9105      	str	r1, [sp, #20]
1a0015aa:	6800      	ldr	r0, [r0, #0]
1a0015ac:	9301      	str	r3, [sp, #4]
1a0015ae:	a902      	add	r1, sp, #8
1a0015b0:	f000 f954 	bl	1a00185c <_svfiprintf_r>
1a0015b4:	9b02      	ldr	r3, [sp, #8]
1a0015b6:	2200      	movs	r2, #0
1a0015b8:	701a      	strb	r2, [r3, #0]
1a0015ba:	b01c      	add	sp, #112	; 0x70
1a0015bc:	f85d eb04 	ldr.w	lr, [sp], #4
1a0015c0:	b003      	add	sp, #12
1a0015c2:	4770      	bx	lr
1a0015c4:	10000000 	.word	0x10000000
1a0015c8:	ffff0208 	.word	0xffff0208

1a0015cc <siscanf>:
1a0015cc:	b40e      	push	{r1, r2, r3}
1a0015ce:	b530      	push	{r4, r5, lr}
1a0015d0:	b09c      	sub	sp, #112	; 0x70
1a0015d2:	ac1f      	add	r4, sp, #124	; 0x7c
1a0015d4:	f44f 7201 	mov.w	r2, #516	; 0x204
1a0015d8:	f854 5b04 	ldr.w	r5, [r4], #4
1a0015dc:	f8ad 2014 	strh.w	r2, [sp, #20]
1a0015e0:	9002      	str	r0, [sp, #8]
1a0015e2:	9006      	str	r0, [sp, #24]
1a0015e4:	f000 f828 	bl	1a001638 <strlen>
1a0015e8:	4b0b      	ldr	r3, [pc, #44]	; (1a001618 <siscanf+0x4c>)
1a0015ea:	9003      	str	r0, [sp, #12]
1a0015ec:	9007      	str	r0, [sp, #28]
1a0015ee:	930b      	str	r3, [sp, #44]	; 0x2c
1a0015f0:	480a      	ldr	r0, [pc, #40]	; (1a00161c <siscanf+0x50>)
1a0015f2:	9401      	str	r4, [sp, #4]
1a0015f4:	2300      	movs	r3, #0
1a0015f6:	930f      	str	r3, [sp, #60]	; 0x3c
1a0015f8:	9314      	str	r3, [sp, #80]	; 0x50
1a0015fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a0015fe:	f8ad 3016 	strh.w	r3, [sp, #22]
1a001602:	462a      	mov	r2, r5
1a001604:	4623      	mov	r3, r4
1a001606:	a902      	add	r1, sp, #8
1a001608:	6800      	ldr	r0, [r0, #0]
1a00160a:	f000 fa79 	bl	1a001b00 <__ssvfiscanf_r>
1a00160e:	b01c      	add	sp, #112	; 0x70
1a001610:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1a001614:	b003      	add	sp, #12
1a001616:	4770      	bx	lr
1a001618:	1a001621 	.word	0x1a001621
1a00161c:	10000000 	.word	0x10000000

1a001620 <__seofread>:
1a001620:	2000      	movs	r0, #0
1a001622:	4770      	bx	lr

1a001624 <strcmp>:
1a001624:	f810 2b01 	ldrb.w	r2, [r0], #1
1a001628:	f811 3b01 	ldrb.w	r3, [r1], #1
1a00162c:	2a01      	cmp	r2, #1
1a00162e:	bf28      	it	cs
1a001630:	429a      	cmpcs	r2, r3
1a001632:	d0f7      	beq.n	1a001624 <strcmp>
1a001634:	1ad0      	subs	r0, r2, r3
1a001636:	4770      	bx	lr

1a001638 <strlen>:
1a001638:	4603      	mov	r3, r0
1a00163a:	f813 2b01 	ldrb.w	r2, [r3], #1
1a00163e:	2a00      	cmp	r2, #0
1a001640:	d1fb      	bne.n	1a00163a <strlen+0x2>
1a001642:	1a18      	subs	r0, r3, r0
1a001644:	3801      	subs	r0, #1
1a001646:	4770      	bx	lr

1a001648 <strncpy>:
1a001648:	b510      	push	{r4, lr}
1a00164a:	3901      	subs	r1, #1
1a00164c:	4603      	mov	r3, r0
1a00164e:	b132      	cbz	r2, 1a00165e <strncpy+0x16>
1a001650:	f811 4f01 	ldrb.w	r4, [r1, #1]!
1a001654:	f803 4b01 	strb.w	r4, [r3], #1
1a001658:	3a01      	subs	r2, #1
1a00165a:	2c00      	cmp	r4, #0
1a00165c:	d1f7      	bne.n	1a00164e <strncpy+0x6>
1a00165e:	441a      	add	r2, r3
1a001660:	2100      	movs	r1, #0
1a001662:	4293      	cmp	r3, r2
1a001664:	d100      	bne.n	1a001668 <strncpy+0x20>
1a001666:	bd10      	pop	{r4, pc}
1a001668:	f803 1b01 	strb.w	r1, [r3], #1
1a00166c:	e7f9      	b.n	1a001662 <strncpy+0x1a>

1a00166e <strstr>:
1a00166e:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001670:	780c      	ldrb	r4, [r1, #0]
1a001672:	b164      	cbz	r4, 1a00168e <strstr+0x20>
1a001674:	4603      	mov	r3, r0
1a001676:	781a      	ldrb	r2, [r3, #0]
1a001678:	4618      	mov	r0, r3
1a00167a:	1c5e      	adds	r6, r3, #1
1a00167c:	b90a      	cbnz	r2, 1a001682 <strstr+0x14>
1a00167e:	4610      	mov	r0, r2
1a001680:	e005      	b.n	1a00168e <strstr+0x20>
1a001682:	4294      	cmp	r4, r2
1a001684:	d108      	bne.n	1a001698 <strstr+0x2a>
1a001686:	460d      	mov	r5, r1
1a001688:	f815 2f01 	ldrb.w	r2, [r5, #1]!
1a00168c:	b902      	cbnz	r2, 1a001690 <strstr+0x22>
1a00168e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001690:	f813 7f01 	ldrb.w	r7, [r3, #1]!
1a001694:	4297      	cmp	r7, r2
1a001696:	d0f7      	beq.n	1a001688 <strstr+0x1a>
1a001698:	4633      	mov	r3, r6
1a00169a:	e7ec      	b.n	1a001676 <strstr+0x8>

1a00169c <_strtol_l.isra.0>:
1a00169c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0016a0:	4f39      	ldr	r7, [pc, #228]	; (1a001788 <_strtol_l.isra.0+0xec>)
1a0016a2:	4686      	mov	lr, r0
1a0016a4:	4608      	mov	r0, r1
1a0016a6:	4605      	mov	r5, r0
1a0016a8:	f815 4b01 	ldrb.w	r4, [r5], #1
1a0016ac:	5de6      	ldrb	r6, [r4, r7]
1a0016ae:	f016 0608 	ands.w	r6, r6, #8
1a0016b2:	d134      	bne.n	1a00171e <_strtol_l.isra.0+0x82>
1a0016b4:	2c2d      	cmp	r4, #45	; 0x2d
1a0016b6:	d134      	bne.n	1a001722 <_strtol_l.isra.0+0x86>
1a0016b8:	782c      	ldrb	r4, [r5, #0]
1a0016ba:	f04f 0801 	mov.w	r8, #1
1a0016be:	1c85      	adds	r5, r0, #2
1a0016c0:	2b00      	cmp	r3, #0
1a0016c2:	d05c      	beq.n	1a00177e <_strtol_l.isra.0+0xe2>
1a0016c4:	2b10      	cmp	r3, #16
1a0016c6:	d109      	bne.n	1a0016dc <_strtol_l.isra.0+0x40>
1a0016c8:	2c30      	cmp	r4, #48	; 0x30
1a0016ca:	d107      	bne.n	1a0016dc <_strtol_l.isra.0+0x40>
1a0016cc:	7828      	ldrb	r0, [r5, #0]
1a0016ce:	f000 00df 	and.w	r0, r0, #223	; 0xdf
1a0016d2:	2858      	cmp	r0, #88	; 0x58
1a0016d4:	d14e      	bne.n	1a001774 <_strtol_l.isra.0+0xd8>
1a0016d6:	786c      	ldrb	r4, [r5, #1]
1a0016d8:	2310      	movs	r3, #16
1a0016da:	3502      	adds	r5, #2
1a0016dc:	f1b8 0f00 	cmp.w	r8, #0
1a0016e0:	bf14      	ite	ne
1a0016e2:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
1a0016e6:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
1a0016ea:	2700      	movs	r7, #0
1a0016ec:	fbbc f9f3 	udiv	r9, ip, r3
1a0016f0:	4638      	mov	r0, r7
1a0016f2:	fb03 ca19 	mls	sl, r3, r9, ip
1a0016f6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
1a0016fa:	2e09      	cmp	r6, #9
1a0016fc:	d818      	bhi.n	1a001730 <_strtol_l.isra.0+0x94>
1a0016fe:	4634      	mov	r4, r6
1a001700:	42a3      	cmp	r3, r4
1a001702:	dd24      	ble.n	1a00174e <_strtol_l.isra.0+0xb2>
1a001704:	1c7e      	adds	r6, r7, #1
1a001706:	d007      	beq.n	1a001718 <_strtol_l.isra.0+0x7c>
1a001708:	4581      	cmp	r9, r0
1a00170a:	d31d      	bcc.n	1a001748 <_strtol_l.isra.0+0xac>
1a00170c:	d101      	bne.n	1a001712 <_strtol_l.isra.0+0x76>
1a00170e:	45a2      	cmp	sl, r4
1a001710:	db1a      	blt.n	1a001748 <_strtol_l.isra.0+0xac>
1a001712:	fb00 4003 	mla	r0, r0, r3, r4
1a001716:	2701      	movs	r7, #1
1a001718:	f815 4b01 	ldrb.w	r4, [r5], #1
1a00171c:	e7eb      	b.n	1a0016f6 <_strtol_l.isra.0+0x5a>
1a00171e:	4628      	mov	r0, r5
1a001720:	e7c1      	b.n	1a0016a6 <_strtol_l.isra.0+0xa>
1a001722:	2c2b      	cmp	r4, #43	; 0x2b
1a001724:	bf08      	it	eq
1a001726:	782c      	ldrbeq	r4, [r5, #0]
1a001728:	46b0      	mov	r8, r6
1a00172a:	bf08      	it	eq
1a00172c:	1c85      	addeq	r5, r0, #2
1a00172e:	e7c7      	b.n	1a0016c0 <_strtol_l.isra.0+0x24>
1a001730:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
1a001734:	2e19      	cmp	r6, #25
1a001736:	d801      	bhi.n	1a00173c <_strtol_l.isra.0+0xa0>
1a001738:	3c37      	subs	r4, #55	; 0x37
1a00173a:	e7e1      	b.n	1a001700 <_strtol_l.isra.0+0x64>
1a00173c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
1a001740:	2e19      	cmp	r6, #25
1a001742:	d804      	bhi.n	1a00174e <_strtol_l.isra.0+0xb2>
1a001744:	3c57      	subs	r4, #87	; 0x57
1a001746:	e7db      	b.n	1a001700 <_strtol_l.isra.0+0x64>
1a001748:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a00174c:	e7e4      	b.n	1a001718 <_strtol_l.isra.0+0x7c>
1a00174e:	1c7b      	adds	r3, r7, #1
1a001750:	d106      	bne.n	1a001760 <_strtol_l.isra.0+0xc4>
1a001752:	2322      	movs	r3, #34	; 0x22
1a001754:	f8ce 3000 	str.w	r3, [lr]
1a001758:	4660      	mov	r0, ip
1a00175a:	b942      	cbnz	r2, 1a00176e <_strtol_l.isra.0+0xd2>
1a00175c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001760:	f1b8 0f00 	cmp.w	r8, #0
1a001764:	d000      	beq.n	1a001768 <_strtol_l.isra.0+0xcc>
1a001766:	4240      	negs	r0, r0
1a001768:	2a00      	cmp	r2, #0
1a00176a:	d0f7      	beq.n	1a00175c <_strtol_l.isra.0+0xc0>
1a00176c:	b107      	cbz	r7, 1a001770 <_strtol_l.isra.0+0xd4>
1a00176e:	1e69      	subs	r1, r5, #1
1a001770:	6011      	str	r1, [r2, #0]
1a001772:	e7f3      	b.n	1a00175c <_strtol_l.isra.0+0xc0>
1a001774:	2430      	movs	r4, #48	; 0x30
1a001776:	2b00      	cmp	r3, #0
1a001778:	d1b0      	bne.n	1a0016dc <_strtol_l.isra.0+0x40>
1a00177a:	2308      	movs	r3, #8
1a00177c:	e7ae      	b.n	1a0016dc <_strtol_l.isra.0+0x40>
1a00177e:	2c30      	cmp	r4, #48	; 0x30
1a001780:	d0a4      	beq.n	1a0016cc <_strtol_l.isra.0+0x30>
1a001782:	230a      	movs	r3, #10
1a001784:	e7aa      	b.n	1a0016dc <_strtol_l.isra.0+0x40>
1a001786:	bf00      	nop
1a001788:	1a0029d9 	.word	0x1a0029d9

1a00178c <_strtol_r>:
1a00178c:	f7ff bf86 	b.w	1a00169c <_strtol_l.isra.0>

1a001790 <strtol>:
1a001790:	4613      	mov	r3, r2
1a001792:	460a      	mov	r2, r1
1a001794:	4601      	mov	r1, r0
1a001796:	4802      	ldr	r0, [pc, #8]	; (1a0017a0 <strtol+0x10>)
1a001798:	6800      	ldr	r0, [r0, #0]
1a00179a:	f7ff bf7f 	b.w	1a00169c <_strtol_l.isra.0>
1a00179e:	bf00      	nop
1a0017a0:	10000000 	.word	0x10000000

1a0017a4 <__ssputs_r>:
1a0017a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0017a8:	688e      	ldr	r6, [r1, #8]
1a0017aa:	429e      	cmp	r6, r3
1a0017ac:	4682      	mov	sl, r0
1a0017ae:	460c      	mov	r4, r1
1a0017b0:	4691      	mov	r9, r2
1a0017b2:	4698      	mov	r8, r3
1a0017b4:	d838      	bhi.n	1a001828 <__ssputs_r+0x84>
1a0017b6:	f8b1 c00c 	ldrh.w	ip, [r1, #12]
1a0017ba:	f41c 6f90 	tst.w	ip, #1152	; 0x480
1a0017be:	d031      	beq.n	1a001824 <__ssputs_r+0x80>
1a0017c0:	6962      	ldr	r2, [r4, #20]
1a0017c2:	6825      	ldr	r5, [r4, #0]
1a0017c4:	6909      	ldr	r1, [r1, #16]
1a0017c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a0017ca:	1a6f      	subs	r7, r5, r1
1a0017cc:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
1a0017d0:	3301      	adds	r3, #1
1a0017d2:	1055      	asrs	r5, r2, #1
1a0017d4:	443b      	add	r3, r7
1a0017d6:	429d      	cmp	r5, r3
1a0017d8:	bf38      	it	cc
1a0017da:	461d      	movcc	r5, r3
1a0017dc:	f41c 6f80 	tst.w	ip, #1024	; 0x400
1a0017e0:	d030      	beq.n	1a001844 <__ssputs_r+0xa0>
1a0017e2:	4629      	mov	r1, r5
1a0017e4:	f000 ff4c 	bl	1a002680 <_malloc_r>
1a0017e8:	4606      	mov	r6, r0
1a0017ea:	b950      	cbnz	r0, 1a001802 <__ssputs_r+0x5e>
1a0017ec:	230c      	movs	r3, #12
1a0017ee:	f8ca 3000 	str.w	r3, [sl]
1a0017f2:	89a3      	ldrh	r3, [r4, #12]
1a0017f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a0017f8:	81a3      	strh	r3, [r4, #12]
1a0017fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0017fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001802:	463a      	mov	r2, r7
1a001804:	6921      	ldr	r1, [r4, #16]
1a001806:	f7ff feab 	bl	1a001560 <memcpy>
1a00180a:	89a3      	ldrh	r3, [r4, #12]
1a00180c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
1a001810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001814:	81a3      	strh	r3, [r4, #12]
1a001816:	6126      	str	r6, [r4, #16]
1a001818:	6165      	str	r5, [r4, #20]
1a00181a:	443e      	add	r6, r7
1a00181c:	1bed      	subs	r5, r5, r7
1a00181e:	6026      	str	r6, [r4, #0]
1a001820:	60a5      	str	r5, [r4, #8]
1a001822:	4646      	mov	r6, r8
1a001824:	4546      	cmp	r6, r8
1a001826:	d900      	bls.n	1a00182a <__ssputs_r+0x86>
1a001828:	4646      	mov	r6, r8
1a00182a:	4632      	mov	r2, r6
1a00182c:	4649      	mov	r1, r9
1a00182e:	6820      	ldr	r0, [r4, #0]
1a001830:	f000 febe 	bl	1a0025b0 <memmove>
1a001834:	68a3      	ldr	r3, [r4, #8]
1a001836:	1b9b      	subs	r3, r3, r6
1a001838:	60a3      	str	r3, [r4, #8]
1a00183a:	6823      	ldr	r3, [r4, #0]
1a00183c:	441e      	add	r6, r3
1a00183e:	6026      	str	r6, [r4, #0]
1a001840:	2000      	movs	r0, #0
1a001842:	e7dc      	b.n	1a0017fe <__ssputs_r+0x5a>
1a001844:	462a      	mov	r2, r5
1a001846:	f000 ff75 	bl	1a002734 <_realloc_r>
1a00184a:	4606      	mov	r6, r0
1a00184c:	2800      	cmp	r0, #0
1a00184e:	d1e2      	bne.n	1a001816 <__ssputs_r+0x72>
1a001850:	6921      	ldr	r1, [r4, #16]
1a001852:	4650      	mov	r0, sl
1a001854:	f000 fec6 	bl	1a0025e4 <_free_r>
1a001858:	e7c8      	b.n	1a0017ec <__ssputs_r+0x48>
1a00185a:	Address 0x000000001a00185a is out of bounds.


1a00185c <_svfiprintf_r>:
1a00185c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001860:	461e      	mov	r6, r3
1a001862:	898b      	ldrh	r3, [r1, #12]
1a001864:	061b      	lsls	r3, r3, #24
1a001866:	b09d      	sub	sp, #116	; 0x74
1a001868:	4607      	mov	r7, r0
1a00186a:	460d      	mov	r5, r1
1a00186c:	4614      	mov	r4, r2
1a00186e:	d50e      	bpl.n	1a00188e <_svfiprintf_r+0x32>
1a001870:	690b      	ldr	r3, [r1, #16]
1a001872:	b963      	cbnz	r3, 1a00188e <_svfiprintf_r+0x32>
1a001874:	2140      	movs	r1, #64	; 0x40
1a001876:	f000 ff03 	bl	1a002680 <_malloc_r>
1a00187a:	6028      	str	r0, [r5, #0]
1a00187c:	6128      	str	r0, [r5, #16]
1a00187e:	b920      	cbnz	r0, 1a00188a <_svfiprintf_r+0x2e>
1a001880:	230c      	movs	r3, #12
1a001882:	603b      	str	r3, [r7, #0]
1a001884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001888:	e0c9      	b.n	1a001a1e <_svfiprintf_r+0x1c2>
1a00188a:	2340      	movs	r3, #64	; 0x40
1a00188c:	616b      	str	r3, [r5, #20]
1a00188e:	2300      	movs	r3, #0
1a001890:	9309      	str	r3, [sp, #36]	; 0x24
1a001892:	2320      	movs	r3, #32
1a001894:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a001898:	f8df 919c 	ldr.w	r9, [pc, #412]	; 1a001a38 <_svfiprintf_r+0x1dc>
1a00189c:	9603      	str	r6, [sp, #12]
1a00189e:	2330      	movs	r3, #48	; 0x30
1a0018a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a0018a4:	f04f 0a01 	mov.w	sl, #1
1a0018a8:	4623      	mov	r3, r4
1a0018aa:	461e      	mov	r6, r3
1a0018ac:	f813 2b01 	ldrb.w	r2, [r3], #1
1a0018b0:	b10a      	cbz	r2, 1a0018b6 <_svfiprintf_r+0x5a>
1a0018b2:	2a25      	cmp	r2, #37	; 0x25
1a0018b4:	d1f9      	bne.n	1a0018aa <_svfiprintf_r+0x4e>
1a0018b6:	ebb6 0b04 	subs.w	fp, r6, r4
1a0018ba:	d00b      	beq.n	1a0018d4 <_svfiprintf_r+0x78>
1a0018bc:	465b      	mov	r3, fp
1a0018be:	4622      	mov	r2, r4
1a0018c0:	4629      	mov	r1, r5
1a0018c2:	4638      	mov	r0, r7
1a0018c4:	f7ff ff6e 	bl	1a0017a4 <__ssputs_r>
1a0018c8:	3001      	adds	r0, #1
1a0018ca:	f000 80a3 	beq.w	1a001a14 <_svfiprintf_r+0x1b8>
1a0018ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0018d0:	445b      	add	r3, fp
1a0018d2:	9309      	str	r3, [sp, #36]	; 0x24
1a0018d4:	7833      	ldrb	r3, [r6, #0]
1a0018d6:	2b00      	cmp	r3, #0
1a0018d8:	f000 809c 	beq.w	1a001a14 <_svfiprintf_r+0x1b8>
1a0018dc:	2300      	movs	r3, #0
1a0018de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0018e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a0018e6:	3601      	adds	r6, #1
1a0018e8:	9304      	str	r3, [sp, #16]
1a0018ea:	9307      	str	r3, [sp, #28]
1a0018ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a0018f0:	931a      	str	r3, [sp, #104]	; 0x68
1a0018f2:	4634      	mov	r4, r6
1a0018f4:	2205      	movs	r2, #5
1a0018f6:	f814 1b01 	ldrb.w	r1, [r4], #1
1a0018fa:	484f      	ldr	r0, [pc, #316]	; (1a001a38 <_svfiprintf_r+0x1dc>)
1a0018fc:	f000 fe08 	bl	1a002510 <memchr>
1a001900:	9b04      	ldr	r3, [sp, #16]
1a001902:	b9c0      	cbnz	r0, 1a001936 <_svfiprintf_r+0xda>
1a001904:	06d9      	lsls	r1, r3, #27
1a001906:	bf44      	itt	mi
1a001908:	2220      	movmi	r2, #32
1a00190a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a00190e:	071a      	lsls	r2, r3, #28
1a001910:	bf44      	itt	mi
1a001912:	222b      	movmi	r2, #43	; 0x2b
1a001914:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a001918:	7832      	ldrb	r2, [r6, #0]
1a00191a:	2a2a      	cmp	r2, #42	; 0x2a
1a00191c:	d013      	beq.n	1a001946 <_svfiprintf_r+0xea>
1a00191e:	9a07      	ldr	r2, [sp, #28]
1a001920:	4634      	mov	r4, r6
1a001922:	2000      	movs	r0, #0
1a001924:	260a      	movs	r6, #10
1a001926:	4621      	mov	r1, r4
1a001928:	f811 3b01 	ldrb.w	r3, [r1], #1
1a00192c:	3b30      	subs	r3, #48	; 0x30
1a00192e:	2b09      	cmp	r3, #9
1a001930:	d94b      	bls.n	1a0019ca <_svfiprintf_r+0x16e>
1a001932:	b970      	cbnz	r0, 1a001952 <_svfiprintf_r+0xf6>
1a001934:	e014      	b.n	1a001960 <_svfiprintf_r+0x104>
1a001936:	eba0 0009 	sub.w	r0, r0, r9
1a00193a:	fa0a f000 	lsl.w	r0, sl, r0
1a00193e:	4318      	orrs	r0, r3
1a001940:	9004      	str	r0, [sp, #16]
1a001942:	4626      	mov	r6, r4
1a001944:	e7d5      	b.n	1a0018f2 <_svfiprintf_r+0x96>
1a001946:	9a03      	ldr	r2, [sp, #12]
1a001948:	1d11      	adds	r1, r2, #4
1a00194a:	6812      	ldr	r2, [r2, #0]
1a00194c:	9103      	str	r1, [sp, #12]
1a00194e:	2a00      	cmp	r2, #0
1a001950:	db01      	blt.n	1a001956 <_svfiprintf_r+0xfa>
1a001952:	9207      	str	r2, [sp, #28]
1a001954:	e004      	b.n	1a001960 <_svfiprintf_r+0x104>
1a001956:	4252      	negs	r2, r2
1a001958:	f043 0302 	orr.w	r3, r3, #2
1a00195c:	9207      	str	r2, [sp, #28]
1a00195e:	9304      	str	r3, [sp, #16]
1a001960:	7823      	ldrb	r3, [r4, #0]
1a001962:	2b2e      	cmp	r3, #46	; 0x2e
1a001964:	d10c      	bne.n	1a001980 <_svfiprintf_r+0x124>
1a001966:	7863      	ldrb	r3, [r4, #1]
1a001968:	2b2a      	cmp	r3, #42	; 0x2a
1a00196a:	d133      	bne.n	1a0019d4 <_svfiprintf_r+0x178>
1a00196c:	9b03      	ldr	r3, [sp, #12]
1a00196e:	1d1a      	adds	r2, r3, #4
1a001970:	681b      	ldr	r3, [r3, #0]
1a001972:	9203      	str	r2, [sp, #12]
1a001974:	2b00      	cmp	r3, #0
1a001976:	bfb8      	it	lt
1a001978:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a00197c:	3402      	adds	r4, #2
1a00197e:	9305      	str	r3, [sp, #20]
1a001980:	4e2e      	ldr	r6, [pc, #184]	; (1a001a3c <_svfiprintf_r+0x1e0>)
1a001982:	7821      	ldrb	r1, [r4, #0]
1a001984:	2203      	movs	r2, #3
1a001986:	4630      	mov	r0, r6
1a001988:	f000 fdc2 	bl	1a002510 <memchr>
1a00198c:	b138      	cbz	r0, 1a00199e <_svfiprintf_r+0x142>
1a00198e:	2340      	movs	r3, #64	; 0x40
1a001990:	1b80      	subs	r0, r0, r6
1a001992:	fa03 f000 	lsl.w	r0, r3, r0
1a001996:	9b04      	ldr	r3, [sp, #16]
1a001998:	4303      	orrs	r3, r0
1a00199a:	3401      	adds	r4, #1
1a00199c:	9304      	str	r3, [sp, #16]
1a00199e:	f814 1b01 	ldrb.w	r1, [r4], #1
1a0019a2:	4827      	ldr	r0, [pc, #156]	; (1a001a40 <_svfiprintf_r+0x1e4>)
1a0019a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a0019a8:	2206      	movs	r2, #6
1a0019aa:	f000 fdb1 	bl	1a002510 <memchr>
1a0019ae:	2800      	cmp	r0, #0
1a0019b0:	d038      	beq.n	1a001a24 <_svfiprintf_r+0x1c8>
1a0019b2:	4b24      	ldr	r3, [pc, #144]	; (1a001a44 <_svfiprintf_r+0x1e8>)
1a0019b4:	bb13      	cbnz	r3, 1a0019fc <_svfiprintf_r+0x1a0>
1a0019b6:	9b03      	ldr	r3, [sp, #12]
1a0019b8:	3307      	adds	r3, #7
1a0019ba:	f023 0307 	bic.w	r3, r3, #7
1a0019be:	3308      	adds	r3, #8
1a0019c0:	9303      	str	r3, [sp, #12]
1a0019c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0019c4:	4443      	add	r3, r8
1a0019c6:	9309      	str	r3, [sp, #36]	; 0x24
1a0019c8:	e76e      	b.n	1a0018a8 <_svfiprintf_r+0x4c>
1a0019ca:	fb06 3202 	mla	r2, r6, r2, r3
1a0019ce:	2001      	movs	r0, #1
1a0019d0:	460c      	mov	r4, r1
1a0019d2:	e7a8      	b.n	1a001926 <_svfiprintf_r+0xca>
1a0019d4:	2300      	movs	r3, #0
1a0019d6:	3401      	adds	r4, #1
1a0019d8:	9305      	str	r3, [sp, #20]
1a0019da:	4619      	mov	r1, r3
1a0019dc:	260a      	movs	r6, #10
1a0019de:	4620      	mov	r0, r4
1a0019e0:	f810 2b01 	ldrb.w	r2, [r0], #1
1a0019e4:	3a30      	subs	r2, #48	; 0x30
1a0019e6:	2a09      	cmp	r2, #9
1a0019e8:	d903      	bls.n	1a0019f2 <_svfiprintf_r+0x196>
1a0019ea:	2b00      	cmp	r3, #0
1a0019ec:	d0c8      	beq.n	1a001980 <_svfiprintf_r+0x124>
1a0019ee:	9105      	str	r1, [sp, #20]
1a0019f0:	e7c6      	b.n	1a001980 <_svfiprintf_r+0x124>
1a0019f2:	fb06 2101 	mla	r1, r6, r1, r2
1a0019f6:	2301      	movs	r3, #1
1a0019f8:	4604      	mov	r4, r0
1a0019fa:	e7f0      	b.n	1a0019de <_svfiprintf_r+0x182>
1a0019fc:	ab03      	add	r3, sp, #12
1a0019fe:	9300      	str	r3, [sp, #0]
1a001a00:	462a      	mov	r2, r5
1a001a02:	4b11      	ldr	r3, [pc, #68]	; (1a001a48 <_svfiprintf_r+0x1ec>)
1a001a04:	a904      	add	r1, sp, #16
1a001a06:	4638      	mov	r0, r7
1a001a08:	f3af 8000 	nop.w
1a001a0c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001a10:	4680      	mov	r8, r0
1a001a12:	d1d6      	bne.n	1a0019c2 <_svfiprintf_r+0x166>
1a001a14:	89ab      	ldrh	r3, [r5, #12]
1a001a16:	065b      	lsls	r3, r3, #25
1a001a18:	f53f af34 	bmi.w	1a001884 <_svfiprintf_r+0x28>
1a001a1c:	9809      	ldr	r0, [sp, #36]	; 0x24
1a001a1e:	b01d      	add	sp, #116	; 0x74
1a001a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001a24:	ab03      	add	r3, sp, #12
1a001a26:	9300      	str	r3, [sp, #0]
1a001a28:	462a      	mov	r2, r5
1a001a2a:	4b07      	ldr	r3, [pc, #28]	; (1a001a48 <_svfiprintf_r+0x1ec>)
1a001a2c:	a904      	add	r1, sp, #16
1a001a2e:	4638      	mov	r0, r7
1a001a30:	f000 fa24 	bl	1a001e7c <_printf_i>
1a001a34:	e7ea      	b.n	1a001a0c <_svfiprintf_r+0x1b0>
1a001a36:	bf00      	nop
1a001a38:	1a002ad9 	.word	0x1a002ad9
1a001a3c:	1a002adf 	.word	0x1a002adf
1a001a40:	1a002ae3 	.word	0x1a002ae3
1a001a44:	00000000 	.word	0x00000000
1a001a48:	1a0017a5 	.word	0x1a0017a5

1a001a4c <_sungetc_r>:
1a001a4c:	b538      	push	{r3, r4, r5, lr}
1a001a4e:	1c4b      	adds	r3, r1, #1
1a001a50:	4614      	mov	r4, r2
1a001a52:	d103      	bne.n	1a001a5c <_sungetc_r+0x10>
1a001a54:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
1a001a58:	4628      	mov	r0, r5
1a001a5a:	bd38      	pop	{r3, r4, r5, pc}
1a001a5c:	8993      	ldrh	r3, [r2, #12]
1a001a5e:	f023 0320 	bic.w	r3, r3, #32
1a001a62:	8193      	strh	r3, [r2, #12]
1a001a64:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a001a66:	6852      	ldr	r2, [r2, #4]
1a001a68:	b2cd      	uxtb	r5, r1
1a001a6a:	b18b      	cbz	r3, 1a001a90 <_sungetc_r+0x44>
1a001a6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a001a6e:	4293      	cmp	r3, r2
1a001a70:	dd08      	ble.n	1a001a84 <_sungetc_r+0x38>
1a001a72:	6823      	ldr	r3, [r4, #0]
1a001a74:	1e5a      	subs	r2, r3, #1
1a001a76:	6022      	str	r2, [r4, #0]
1a001a78:	f803 5c01 	strb.w	r5, [r3, #-1]
1a001a7c:	6863      	ldr	r3, [r4, #4]
1a001a7e:	3301      	adds	r3, #1
1a001a80:	6063      	str	r3, [r4, #4]
1a001a82:	e7e9      	b.n	1a001a58 <_sungetc_r+0xc>
1a001a84:	4621      	mov	r1, r4
1a001a86:	f000 fd03 	bl	1a002490 <__submore>
1a001a8a:	2800      	cmp	r0, #0
1a001a8c:	d0f1      	beq.n	1a001a72 <_sungetc_r+0x26>
1a001a8e:	e7e1      	b.n	1a001a54 <_sungetc_r+0x8>
1a001a90:	6921      	ldr	r1, [r4, #16]
1a001a92:	6823      	ldr	r3, [r4, #0]
1a001a94:	b151      	cbz	r1, 1a001aac <_sungetc_r+0x60>
1a001a96:	4299      	cmp	r1, r3
1a001a98:	d208      	bcs.n	1a001aac <_sungetc_r+0x60>
1a001a9a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
1a001a9e:	42a9      	cmp	r1, r5
1a001aa0:	d104      	bne.n	1a001aac <_sungetc_r+0x60>
1a001aa2:	3b01      	subs	r3, #1
1a001aa4:	3201      	adds	r2, #1
1a001aa6:	6023      	str	r3, [r4, #0]
1a001aa8:	6062      	str	r2, [r4, #4]
1a001aaa:	e7d5      	b.n	1a001a58 <_sungetc_r+0xc>
1a001aac:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
1a001ab0:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a001ab4:	6363      	str	r3, [r4, #52]	; 0x34
1a001ab6:	2303      	movs	r3, #3
1a001ab8:	63a3      	str	r3, [r4, #56]	; 0x38
1a001aba:	4623      	mov	r3, r4
1a001abc:	f803 5f46 	strb.w	r5, [r3, #70]!
1a001ac0:	6023      	str	r3, [r4, #0]
1a001ac2:	2301      	movs	r3, #1
1a001ac4:	e7dc      	b.n	1a001a80 <_sungetc_r+0x34>

1a001ac6 <__ssrefill_r>:
1a001ac6:	b510      	push	{r4, lr}
1a001ac8:	460c      	mov	r4, r1
1a001aca:	6b49      	ldr	r1, [r1, #52]	; 0x34
1a001acc:	b169      	cbz	r1, 1a001aea <__ssrefill_r+0x24>
1a001ace:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a001ad2:	4299      	cmp	r1, r3
1a001ad4:	d001      	beq.n	1a001ada <__ssrefill_r+0x14>
1a001ad6:	f000 fd85 	bl	1a0025e4 <_free_r>
1a001ada:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a001adc:	6063      	str	r3, [r4, #4]
1a001ade:	2000      	movs	r0, #0
1a001ae0:	6360      	str	r0, [r4, #52]	; 0x34
1a001ae2:	b113      	cbz	r3, 1a001aea <__ssrefill_r+0x24>
1a001ae4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001ae6:	6023      	str	r3, [r4, #0]
1a001ae8:	bd10      	pop	{r4, pc}
1a001aea:	6923      	ldr	r3, [r4, #16]
1a001aec:	6023      	str	r3, [r4, #0]
1a001aee:	2300      	movs	r3, #0
1a001af0:	6063      	str	r3, [r4, #4]
1a001af2:	89a3      	ldrh	r3, [r4, #12]
1a001af4:	f043 0320 	orr.w	r3, r3, #32
1a001af8:	81a3      	strh	r3, [r4, #12]
1a001afa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001afe:	e7f3      	b.n	1a001ae8 <__ssrefill_r+0x22>

1a001b00 <__ssvfiscanf_r>:
1a001b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001b04:	460c      	mov	r4, r1
1a001b06:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
1a001b0a:	2100      	movs	r1, #0
1a001b0c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
1a001b10:	499a      	ldr	r1, [pc, #616]	; (1a001d7c <__ssvfiscanf_r+0x27c>)
1a001b12:	91a0      	str	r1, [sp, #640]	; 0x280
1a001b14:	f10d 0804 	add.w	r8, sp, #4
1a001b18:	4999      	ldr	r1, [pc, #612]	; (1a001d80 <__ssvfiscanf_r+0x280>)
1a001b1a:	4f9a      	ldr	r7, [pc, #616]	; (1a001d84 <__ssvfiscanf_r+0x284>)
1a001b1c:	f8df 9268 	ldr.w	r9, [pc, #616]	; 1a001d88 <__ssvfiscanf_r+0x288>
1a001b20:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
1a001b24:	4606      	mov	r6, r0
1a001b26:	91a1      	str	r1, [sp, #644]	; 0x284
1a001b28:	9300      	str	r3, [sp, #0]
1a001b2a:	f892 a000 	ldrb.w	sl, [r2]
1a001b2e:	f1ba 0f00 	cmp.w	sl, #0
1a001b32:	f000 8120 	beq.w	1a001d76 <__ssvfiscanf_r+0x276>
1a001b36:	f81a 3007 	ldrb.w	r3, [sl, r7]
1a001b3a:	f013 0308 	ands.w	r3, r3, #8
1a001b3e:	f102 0501 	add.w	r5, r2, #1
1a001b42:	d019      	beq.n	1a001b78 <__ssvfiscanf_r+0x78>
1a001b44:	6863      	ldr	r3, [r4, #4]
1a001b46:	2b00      	cmp	r3, #0
1a001b48:	dd0f      	ble.n	1a001b6a <__ssvfiscanf_r+0x6a>
1a001b4a:	6823      	ldr	r3, [r4, #0]
1a001b4c:	781a      	ldrb	r2, [r3, #0]
1a001b4e:	5cba      	ldrb	r2, [r7, r2]
1a001b50:	0712      	lsls	r2, r2, #28
1a001b52:	d401      	bmi.n	1a001b58 <__ssvfiscanf_r+0x58>
1a001b54:	462a      	mov	r2, r5
1a001b56:	e7e8      	b.n	1a001b2a <__ssvfiscanf_r+0x2a>
1a001b58:	9a45      	ldr	r2, [sp, #276]	; 0x114
1a001b5a:	3201      	adds	r2, #1
1a001b5c:	9245      	str	r2, [sp, #276]	; 0x114
1a001b5e:	6862      	ldr	r2, [r4, #4]
1a001b60:	3301      	adds	r3, #1
1a001b62:	3a01      	subs	r2, #1
1a001b64:	6062      	str	r2, [r4, #4]
1a001b66:	6023      	str	r3, [r4, #0]
1a001b68:	e7ec      	b.n	1a001b44 <__ssvfiscanf_r+0x44>
1a001b6a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
1a001b6c:	4621      	mov	r1, r4
1a001b6e:	4630      	mov	r0, r6
1a001b70:	4798      	blx	r3
1a001b72:	2800      	cmp	r0, #0
1a001b74:	d0e9      	beq.n	1a001b4a <__ssvfiscanf_r+0x4a>
1a001b76:	e7ed      	b.n	1a001b54 <__ssvfiscanf_r+0x54>
1a001b78:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
1a001b7c:	d17d      	bne.n	1a001c7a <__ssvfiscanf_r+0x17a>
1a001b7e:	9341      	str	r3, [sp, #260]	; 0x104
1a001b80:	9343      	str	r3, [sp, #268]	; 0x10c
1a001b82:	7853      	ldrb	r3, [r2, #1]
1a001b84:	2b2a      	cmp	r3, #42	; 0x2a
1a001b86:	bf02      	ittt	eq
1a001b88:	2310      	moveq	r3, #16
1a001b8a:	1c95      	addeq	r5, r2, #2
1a001b8c:	9341      	streq	r3, [sp, #260]	; 0x104
1a001b8e:	220a      	movs	r2, #10
1a001b90:	46ab      	mov	fp, r5
1a001b92:	f81b 1b01 	ldrb.w	r1, [fp], #1
1a001b96:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
1a001b9a:	2b09      	cmp	r3, #9
1a001b9c:	d921      	bls.n	1a001be2 <__ssvfiscanf_r+0xe2>
1a001b9e:	2203      	movs	r2, #3
1a001ba0:	4879      	ldr	r0, [pc, #484]	; (1a001d88 <__ssvfiscanf_r+0x288>)
1a001ba2:	f000 fcb5 	bl	1a002510 <memchr>
1a001ba6:	b138      	cbz	r0, 1a001bb8 <__ssvfiscanf_r+0xb8>
1a001ba8:	eba0 0309 	sub.w	r3, r0, r9
1a001bac:	2001      	movs	r0, #1
1a001bae:	4098      	lsls	r0, r3
1a001bb0:	9b41      	ldr	r3, [sp, #260]	; 0x104
1a001bb2:	4318      	orrs	r0, r3
1a001bb4:	9041      	str	r0, [sp, #260]	; 0x104
1a001bb6:	465d      	mov	r5, fp
1a001bb8:	f815 3b01 	ldrb.w	r3, [r5], #1
1a001bbc:	2b67      	cmp	r3, #103	; 0x67
1a001bbe:	d848      	bhi.n	1a001c52 <__ssvfiscanf_r+0x152>
1a001bc0:	2b65      	cmp	r3, #101	; 0x65
1a001bc2:	f080 809e 	bcs.w	1a001d02 <__ssvfiscanf_r+0x202>
1a001bc6:	2b47      	cmp	r3, #71	; 0x47
1a001bc8:	d812      	bhi.n	1a001bf0 <__ssvfiscanf_r+0xf0>
1a001bca:	2b45      	cmp	r3, #69	; 0x45
1a001bcc:	f080 8099 	bcs.w	1a001d02 <__ssvfiscanf_r+0x202>
1a001bd0:	2b00      	cmp	r3, #0
1a001bd2:	d06b      	beq.n	1a001cac <__ssvfiscanf_r+0x1ac>
1a001bd4:	2b25      	cmp	r3, #37	; 0x25
1a001bd6:	d050      	beq.n	1a001c7a <__ssvfiscanf_r+0x17a>
1a001bd8:	2303      	movs	r3, #3
1a001bda:	9347      	str	r3, [sp, #284]	; 0x11c
1a001bdc:	230a      	movs	r3, #10
1a001bde:	9342      	str	r3, [sp, #264]	; 0x108
1a001be0:	e016      	b.n	1a001c10 <__ssvfiscanf_r+0x110>
1a001be2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
1a001be4:	fb02 1303 	mla	r3, r2, r3, r1
1a001be8:	3b30      	subs	r3, #48	; 0x30
1a001bea:	9343      	str	r3, [sp, #268]	; 0x10c
1a001bec:	465d      	mov	r5, fp
1a001bee:	e7cf      	b.n	1a001b90 <__ssvfiscanf_r+0x90>
1a001bf0:	2b5b      	cmp	r3, #91	; 0x5b
1a001bf2:	d067      	beq.n	1a001cc4 <__ssvfiscanf_r+0x1c4>
1a001bf4:	d827      	bhi.n	1a001c46 <__ssvfiscanf_r+0x146>
1a001bf6:	2b58      	cmp	r3, #88	; 0x58
1a001bf8:	d1ee      	bne.n	1a001bd8 <__ssvfiscanf_r+0xd8>
1a001bfa:	9a41      	ldr	r2, [sp, #260]	; 0x104
1a001bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
1a001c00:	9241      	str	r2, [sp, #260]	; 0x104
1a001c02:	2210      	movs	r2, #16
1a001c04:	2b6f      	cmp	r3, #111	; 0x6f
1a001c06:	9242      	str	r2, [sp, #264]	; 0x108
1a001c08:	bf34      	ite	cc
1a001c0a:	2303      	movcc	r3, #3
1a001c0c:	2304      	movcs	r3, #4
1a001c0e:	9347      	str	r3, [sp, #284]	; 0x11c
1a001c10:	6863      	ldr	r3, [r4, #4]
1a001c12:	2b00      	cmp	r3, #0
1a001c14:	dd77      	ble.n	1a001d06 <__ssvfiscanf_r+0x206>
1a001c16:	9b41      	ldr	r3, [sp, #260]	; 0x104
1a001c18:	0659      	lsls	r1, r3, #25
1a001c1a:	d404      	bmi.n	1a001c26 <__ssvfiscanf_r+0x126>
1a001c1c:	6823      	ldr	r3, [r4, #0]
1a001c1e:	781a      	ldrb	r2, [r3, #0]
1a001c20:	5cba      	ldrb	r2, [r7, r2]
1a001c22:	0712      	lsls	r2, r2, #28
1a001c24:	d476      	bmi.n	1a001d14 <__ssvfiscanf_r+0x214>
1a001c26:	9b47      	ldr	r3, [sp, #284]	; 0x11c
1a001c28:	2b02      	cmp	r3, #2
1a001c2a:	f300 8086 	bgt.w	1a001d3a <__ssvfiscanf_r+0x23a>
1a001c2e:	466b      	mov	r3, sp
1a001c30:	4622      	mov	r2, r4
1a001c32:	a941      	add	r1, sp, #260	; 0x104
1a001c34:	4630      	mov	r0, r6
1a001c36:	f000 fa35 	bl	1a0020a4 <_scanf_chars>
1a001c3a:	2801      	cmp	r0, #1
1a001c3c:	f000 809b 	beq.w	1a001d76 <__ssvfiscanf_r+0x276>
1a001c40:	2802      	cmp	r0, #2
1a001c42:	d187      	bne.n	1a001b54 <__ssvfiscanf_r+0x54>
1a001c44:	e02f      	b.n	1a001ca6 <__ssvfiscanf_r+0x1a6>
1a001c46:	2b63      	cmp	r3, #99	; 0x63
1a001c48:	d047      	beq.n	1a001cda <__ssvfiscanf_r+0x1da>
1a001c4a:	2b64      	cmp	r3, #100	; 0x64
1a001c4c:	d1c4      	bne.n	1a001bd8 <__ssvfiscanf_r+0xd8>
1a001c4e:	220a      	movs	r2, #10
1a001c50:	e7d8      	b.n	1a001c04 <__ssvfiscanf_r+0x104>
1a001c52:	2b70      	cmp	r3, #112	; 0x70
1a001c54:	d02d      	beq.n	1a001cb2 <__ssvfiscanf_r+0x1b2>
1a001c56:	d808      	bhi.n	1a001c6a <__ssvfiscanf_r+0x16a>
1a001c58:	2b6e      	cmp	r3, #110	; 0x6e
1a001c5a:	d044      	beq.n	1a001ce6 <__ssvfiscanf_r+0x1e6>
1a001c5c:	d82e      	bhi.n	1a001cbc <__ssvfiscanf_r+0x1bc>
1a001c5e:	2b69      	cmp	r3, #105	; 0x69
1a001c60:	d1ba      	bne.n	1a001bd8 <__ssvfiscanf_r+0xd8>
1a001c62:	2300      	movs	r3, #0
1a001c64:	9342      	str	r3, [sp, #264]	; 0x108
1a001c66:	2303      	movs	r3, #3
1a001c68:	e7d1      	b.n	1a001c0e <__ssvfiscanf_r+0x10e>
1a001c6a:	2b75      	cmp	r3, #117	; 0x75
1a001c6c:	d0ef      	beq.n	1a001c4e <__ssvfiscanf_r+0x14e>
1a001c6e:	2b78      	cmp	r3, #120	; 0x78
1a001c70:	d0c3      	beq.n	1a001bfa <__ssvfiscanf_r+0xfa>
1a001c72:	2b73      	cmp	r3, #115	; 0x73
1a001c74:	d1b0      	bne.n	1a001bd8 <__ssvfiscanf_r+0xd8>
1a001c76:	2302      	movs	r3, #2
1a001c78:	e7c9      	b.n	1a001c0e <__ssvfiscanf_r+0x10e>
1a001c7a:	6863      	ldr	r3, [r4, #4]
1a001c7c:	2b00      	cmp	r3, #0
1a001c7e:	dd0c      	ble.n	1a001c9a <__ssvfiscanf_r+0x19a>
1a001c80:	6823      	ldr	r3, [r4, #0]
1a001c82:	781a      	ldrb	r2, [r3, #0]
1a001c84:	4552      	cmp	r2, sl
1a001c86:	d176      	bne.n	1a001d76 <__ssvfiscanf_r+0x276>
1a001c88:	3301      	adds	r3, #1
1a001c8a:	6862      	ldr	r2, [r4, #4]
1a001c8c:	6023      	str	r3, [r4, #0]
1a001c8e:	9b45      	ldr	r3, [sp, #276]	; 0x114
1a001c90:	3a01      	subs	r2, #1
1a001c92:	3301      	adds	r3, #1
1a001c94:	6062      	str	r2, [r4, #4]
1a001c96:	9345      	str	r3, [sp, #276]	; 0x114
1a001c98:	e75c      	b.n	1a001b54 <__ssvfiscanf_r+0x54>
1a001c9a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
1a001c9c:	4621      	mov	r1, r4
1a001c9e:	4630      	mov	r0, r6
1a001ca0:	4798      	blx	r3
1a001ca2:	2800      	cmp	r0, #0
1a001ca4:	d0ec      	beq.n	1a001c80 <__ssvfiscanf_r+0x180>
1a001ca6:	9844      	ldr	r0, [sp, #272]	; 0x110
1a001ca8:	2800      	cmp	r0, #0
1a001caa:	d15a      	bne.n	1a001d62 <__ssvfiscanf_r+0x262>
1a001cac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001cb0:	e05d      	b.n	1a001d6e <__ssvfiscanf_r+0x26e>
1a001cb2:	9a41      	ldr	r2, [sp, #260]	; 0x104
1a001cb4:	f042 0220 	orr.w	r2, r2, #32
1a001cb8:	9241      	str	r2, [sp, #260]	; 0x104
1a001cba:	e79e      	b.n	1a001bfa <__ssvfiscanf_r+0xfa>
1a001cbc:	2308      	movs	r3, #8
1a001cbe:	9342      	str	r3, [sp, #264]	; 0x108
1a001cc0:	2304      	movs	r3, #4
1a001cc2:	e7a4      	b.n	1a001c0e <__ssvfiscanf_r+0x10e>
1a001cc4:	4629      	mov	r1, r5
1a001cc6:	4640      	mov	r0, r8
1a001cc8:	f000 fb38 	bl	1a00233c <__sccl>
1a001ccc:	9b41      	ldr	r3, [sp, #260]	; 0x104
1a001cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a001cd2:	9341      	str	r3, [sp, #260]	; 0x104
1a001cd4:	4605      	mov	r5, r0
1a001cd6:	2301      	movs	r3, #1
1a001cd8:	e799      	b.n	1a001c0e <__ssvfiscanf_r+0x10e>
1a001cda:	9b41      	ldr	r3, [sp, #260]	; 0x104
1a001cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a001ce0:	9341      	str	r3, [sp, #260]	; 0x104
1a001ce2:	2300      	movs	r3, #0
1a001ce4:	e793      	b.n	1a001c0e <__ssvfiscanf_r+0x10e>
1a001ce6:	9841      	ldr	r0, [sp, #260]	; 0x104
1a001ce8:	06c3      	lsls	r3, r0, #27
1a001cea:	f53f af33 	bmi.w	1a001b54 <__ssvfiscanf_r+0x54>
1a001cee:	9b00      	ldr	r3, [sp, #0]
1a001cf0:	9a45      	ldr	r2, [sp, #276]	; 0x114
1a001cf2:	1d19      	adds	r1, r3, #4
1a001cf4:	9100      	str	r1, [sp, #0]
1a001cf6:	681b      	ldr	r3, [r3, #0]
1a001cf8:	07c0      	lsls	r0, r0, #31
1a001cfa:	bf4c      	ite	mi
1a001cfc:	801a      	strhmi	r2, [r3, #0]
1a001cfe:	601a      	strpl	r2, [r3, #0]
1a001d00:	e728      	b.n	1a001b54 <__ssvfiscanf_r+0x54>
1a001d02:	2305      	movs	r3, #5
1a001d04:	e783      	b.n	1a001c0e <__ssvfiscanf_r+0x10e>
1a001d06:	9ba1      	ldr	r3, [sp, #644]	; 0x284
1a001d08:	4621      	mov	r1, r4
1a001d0a:	4630      	mov	r0, r6
1a001d0c:	4798      	blx	r3
1a001d0e:	2800      	cmp	r0, #0
1a001d10:	d081      	beq.n	1a001c16 <__ssvfiscanf_r+0x116>
1a001d12:	e7c8      	b.n	1a001ca6 <__ssvfiscanf_r+0x1a6>
1a001d14:	9a45      	ldr	r2, [sp, #276]	; 0x114
1a001d16:	3201      	adds	r2, #1
1a001d18:	9245      	str	r2, [sp, #276]	; 0x114
1a001d1a:	6862      	ldr	r2, [r4, #4]
1a001d1c:	3a01      	subs	r2, #1
1a001d1e:	2a00      	cmp	r2, #0
1a001d20:	6062      	str	r2, [r4, #4]
1a001d22:	dd02      	ble.n	1a001d2a <__ssvfiscanf_r+0x22a>
1a001d24:	3301      	adds	r3, #1
1a001d26:	6023      	str	r3, [r4, #0]
1a001d28:	e778      	b.n	1a001c1c <__ssvfiscanf_r+0x11c>
1a001d2a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
1a001d2c:	4621      	mov	r1, r4
1a001d2e:	4630      	mov	r0, r6
1a001d30:	4798      	blx	r3
1a001d32:	2800      	cmp	r0, #0
1a001d34:	f43f af72 	beq.w	1a001c1c <__ssvfiscanf_r+0x11c>
1a001d38:	e7b5      	b.n	1a001ca6 <__ssvfiscanf_r+0x1a6>
1a001d3a:	2b04      	cmp	r3, #4
1a001d3c:	dc06      	bgt.n	1a001d4c <__ssvfiscanf_r+0x24c>
1a001d3e:	466b      	mov	r3, sp
1a001d40:	4622      	mov	r2, r4
1a001d42:	a941      	add	r1, sp, #260	; 0x104
1a001d44:	4630      	mov	r0, r6
1a001d46:	f000 fa05 	bl	1a002154 <_scanf_i>
1a001d4a:	e776      	b.n	1a001c3a <__ssvfiscanf_r+0x13a>
1a001d4c:	4b0f      	ldr	r3, [pc, #60]	; (1a001d8c <__ssvfiscanf_r+0x28c>)
1a001d4e:	2b00      	cmp	r3, #0
1a001d50:	f43f af00 	beq.w	1a001b54 <__ssvfiscanf_r+0x54>
1a001d54:	466b      	mov	r3, sp
1a001d56:	4622      	mov	r2, r4
1a001d58:	a941      	add	r1, sp, #260	; 0x104
1a001d5a:	4630      	mov	r0, r6
1a001d5c:	f3af 8000 	nop.w
1a001d60:	e76b      	b.n	1a001c3a <__ssvfiscanf_r+0x13a>
1a001d62:	89a3      	ldrh	r3, [r4, #12]
1a001d64:	f013 0f40 	tst.w	r3, #64	; 0x40
1a001d68:	bf18      	it	ne
1a001d6a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a001d6e:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
1a001d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001d76:	9844      	ldr	r0, [sp, #272]	; 0x110
1a001d78:	e7f9      	b.n	1a001d6e <__ssvfiscanf_r+0x26e>
1a001d7a:	bf00      	nop
1a001d7c:	1a001a4d 	.word	0x1a001a4d
1a001d80:	1a001ac7 	.word	0x1a001ac7
1a001d84:	1a0029d9 	.word	0x1a0029d9
1a001d88:	1a002adf 	.word	0x1a002adf
1a001d8c:	00000000 	.word	0x00000000

1a001d90 <_printf_common>:
1a001d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001d94:	4691      	mov	r9, r2
1a001d96:	461f      	mov	r7, r3
1a001d98:	688a      	ldr	r2, [r1, #8]
1a001d9a:	690b      	ldr	r3, [r1, #16]
1a001d9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a001da0:	4293      	cmp	r3, r2
1a001da2:	bfb8      	it	lt
1a001da4:	4613      	movlt	r3, r2
1a001da6:	f8c9 3000 	str.w	r3, [r9]
1a001daa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a001dae:	4606      	mov	r6, r0
1a001db0:	460c      	mov	r4, r1
1a001db2:	b112      	cbz	r2, 1a001dba <_printf_common+0x2a>
1a001db4:	3301      	adds	r3, #1
1a001db6:	f8c9 3000 	str.w	r3, [r9]
1a001dba:	6823      	ldr	r3, [r4, #0]
1a001dbc:	0699      	lsls	r1, r3, #26
1a001dbe:	bf42      	ittt	mi
1a001dc0:	f8d9 3000 	ldrmi.w	r3, [r9]
1a001dc4:	3302      	addmi	r3, #2
1a001dc6:	f8c9 3000 	strmi.w	r3, [r9]
1a001dca:	6825      	ldr	r5, [r4, #0]
1a001dcc:	f015 0506 	ands.w	r5, r5, #6
1a001dd0:	d107      	bne.n	1a001de2 <_printf_common+0x52>
1a001dd2:	f104 0a19 	add.w	sl, r4, #25
1a001dd6:	68e3      	ldr	r3, [r4, #12]
1a001dd8:	f8d9 2000 	ldr.w	r2, [r9]
1a001ddc:	1a9b      	subs	r3, r3, r2
1a001dde:	42ab      	cmp	r3, r5
1a001de0:	dc28      	bgt.n	1a001e34 <_printf_common+0xa4>
1a001de2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a001de6:	6822      	ldr	r2, [r4, #0]
1a001de8:	3300      	adds	r3, #0
1a001dea:	bf18      	it	ne
1a001dec:	2301      	movne	r3, #1
1a001dee:	0692      	lsls	r2, r2, #26
1a001df0:	d42d      	bmi.n	1a001e4e <_printf_common+0xbe>
1a001df2:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a001df6:	4639      	mov	r1, r7
1a001df8:	4630      	mov	r0, r6
1a001dfa:	47c0      	blx	r8
1a001dfc:	3001      	adds	r0, #1
1a001dfe:	d020      	beq.n	1a001e42 <_printf_common+0xb2>
1a001e00:	6823      	ldr	r3, [r4, #0]
1a001e02:	68e5      	ldr	r5, [r4, #12]
1a001e04:	f8d9 2000 	ldr.w	r2, [r9]
1a001e08:	f003 0306 	and.w	r3, r3, #6
1a001e0c:	2b04      	cmp	r3, #4
1a001e0e:	bf08      	it	eq
1a001e10:	1aad      	subeq	r5, r5, r2
1a001e12:	68a3      	ldr	r3, [r4, #8]
1a001e14:	6922      	ldr	r2, [r4, #16]
1a001e16:	bf0c      	ite	eq
1a001e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a001e1c:	2500      	movne	r5, #0
1a001e1e:	4293      	cmp	r3, r2
1a001e20:	bfc4      	itt	gt
1a001e22:	1a9b      	subgt	r3, r3, r2
1a001e24:	18ed      	addgt	r5, r5, r3
1a001e26:	f04f 0900 	mov.w	r9, #0
1a001e2a:	341a      	adds	r4, #26
1a001e2c:	454d      	cmp	r5, r9
1a001e2e:	d11a      	bne.n	1a001e66 <_printf_common+0xd6>
1a001e30:	2000      	movs	r0, #0
1a001e32:	e008      	b.n	1a001e46 <_printf_common+0xb6>
1a001e34:	2301      	movs	r3, #1
1a001e36:	4652      	mov	r2, sl
1a001e38:	4639      	mov	r1, r7
1a001e3a:	4630      	mov	r0, r6
1a001e3c:	47c0      	blx	r8
1a001e3e:	3001      	adds	r0, #1
1a001e40:	d103      	bne.n	1a001e4a <_printf_common+0xba>
1a001e42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001e4a:	3501      	adds	r5, #1
1a001e4c:	e7c3      	b.n	1a001dd6 <_printf_common+0x46>
1a001e4e:	18e1      	adds	r1, r4, r3
1a001e50:	1c5a      	adds	r2, r3, #1
1a001e52:	2030      	movs	r0, #48	; 0x30
1a001e54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a001e58:	4422      	add	r2, r4
1a001e5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a001e5e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a001e62:	3302      	adds	r3, #2
1a001e64:	e7c5      	b.n	1a001df2 <_printf_common+0x62>
1a001e66:	2301      	movs	r3, #1
1a001e68:	4622      	mov	r2, r4
1a001e6a:	4639      	mov	r1, r7
1a001e6c:	4630      	mov	r0, r6
1a001e6e:	47c0      	blx	r8
1a001e70:	3001      	adds	r0, #1
1a001e72:	d0e6      	beq.n	1a001e42 <_printf_common+0xb2>
1a001e74:	f109 0901 	add.w	r9, r9, #1
1a001e78:	e7d8      	b.n	1a001e2c <_printf_common+0x9c>
1a001e7a:	Address 0x000000001a001e7a is out of bounds.


1a001e7c <_printf_i>:
1a001e7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001e80:	4606      	mov	r6, r0
1a001e82:	460c      	mov	r4, r1
1a001e84:	f101 0043 	add.w	r0, r1, #67	; 0x43
1a001e88:	7e09      	ldrb	r1, [r1, #24]
1a001e8a:	b085      	sub	sp, #20
1a001e8c:	296e      	cmp	r1, #110	; 0x6e
1a001e8e:	4698      	mov	r8, r3
1a001e90:	4617      	mov	r7, r2
1a001e92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001e94:	f000 80ba 	beq.w	1a00200c <_printf_i+0x190>
1a001e98:	d824      	bhi.n	1a001ee4 <_printf_i+0x68>
1a001e9a:	2963      	cmp	r1, #99	; 0x63
1a001e9c:	d039      	beq.n	1a001f12 <_printf_i+0x96>
1a001e9e:	d80a      	bhi.n	1a001eb6 <_printf_i+0x3a>
1a001ea0:	2900      	cmp	r1, #0
1a001ea2:	f000 80c3 	beq.w	1a00202c <_printf_i+0x1b0>
1a001ea6:	2958      	cmp	r1, #88	; 0x58
1a001ea8:	f000 8091 	beq.w	1a001fce <_printf_i+0x152>
1a001eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a001eb0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a001eb4:	e035      	b.n	1a001f22 <_printf_i+0xa6>
1a001eb6:	2964      	cmp	r1, #100	; 0x64
1a001eb8:	d001      	beq.n	1a001ebe <_printf_i+0x42>
1a001eba:	2969      	cmp	r1, #105	; 0x69
1a001ebc:	d1f6      	bne.n	1a001eac <_printf_i+0x30>
1a001ebe:	6825      	ldr	r5, [r4, #0]
1a001ec0:	681a      	ldr	r2, [r3, #0]
1a001ec2:	f015 0f80 	tst.w	r5, #128	; 0x80
1a001ec6:	f102 0104 	add.w	r1, r2, #4
1a001eca:	d02c      	beq.n	1a001f26 <_printf_i+0xaa>
1a001ecc:	6812      	ldr	r2, [r2, #0]
1a001ece:	6019      	str	r1, [r3, #0]
1a001ed0:	2a00      	cmp	r2, #0
1a001ed2:	da03      	bge.n	1a001edc <_printf_i+0x60>
1a001ed4:	232d      	movs	r3, #45	; 0x2d
1a001ed6:	4252      	negs	r2, r2
1a001ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a001edc:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 1a00209c <_printf_i+0x220>
1a001ee0:	230a      	movs	r3, #10
1a001ee2:	e03f      	b.n	1a001f64 <_printf_i+0xe8>
1a001ee4:	2973      	cmp	r1, #115	; 0x73
1a001ee6:	f000 80a5 	beq.w	1a002034 <_printf_i+0x1b8>
1a001eea:	d808      	bhi.n	1a001efe <_printf_i+0x82>
1a001eec:	296f      	cmp	r1, #111	; 0x6f
1a001eee:	d021      	beq.n	1a001f34 <_printf_i+0xb8>
1a001ef0:	2970      	cmp	r1, #112	; 0x70
1a001ef2:	d1db      	bne.n	1a001eac <_printf_i+0x30>
1a001ef4:	6822      	ldr	r2, [r4, #0]
1a001ef6:	f042 0220 	orr.w	r2, r2, #32
1a001efa:	6022      	str	r2, [r4, #0]
1a001efc:	e003      	b.n	1a001f06 <_printf_i+0x8a>
1a001efe:	2975      	cmp	r1, #117	; 0x75
1a001f00:	d018      	beq.n	1a001f34 <_printf_i+0xb8>
1a001f02:	2978      	cmp	r1, #120	; 0x78
1a001f04:	d1d2      	bne.n	1a001eac <_printf_i+0x30>
1a001f06:	2278      	movs	r2, #120	; 0x78
1a001f08:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
1a001f0c:	f8df c190 	ldr.w	ip, [pc, #400]	; 1a0020a0 <_printf_i+0x224>
1a001f10:	e061      	b.n	1a001fd6 <_printf_i+0x15a>
1a001f12:	681a      	ldr	r2, [r3, #0]
1a001f14:	1d11      	adds	r1, r2, #4
1a001f16:	6019      	str	r1, [r3, #0]
1a001f18:	6813      	ldr	r3, [r2, #0]
1a001f1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a001f1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a001f22:	2301      	movs	r3, #1
1a001f24:	e093      	b.n	1a00204e <_printf_i+0x1d2>
1a001f26:	6812      	ldr	r2, [r2, #0]
1a001f28:	6019      	str	r1, [r3, #0]
1a001f2a:	f015 0f40 	tst.w	r5, #64	; 0x40
1a001f2e:	bf18      	it	ne
1a001f30:	b212      	sxthne	r2, r2
1a001f32:	e7cd      	b.n	1a001ed0 <_printf_i+0x54>
1a001f34:	f8d4 c000 	ldr.w	ip, [r4]
1a001f38:	681a      	ldr	r2, [r3, #0]
1a001f3a:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a001f3e:	f102 0504 	add.w	r5, r2, #4
1a001f42:	601d      	str	r5, [r3, #0]
1a001f44:	d001      	beq.n	1a001f4a <_printf_i+0xce>
1a001f46:	6812      	ldr	r2, [r2, #0]
1a001f48:	e003      	b.n	1a001f52 <_printf_i+0xd6>
1a001f4a:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a001f4e:	d0fa      	beq.n	1a001f46 <_printf_i+0xca>
1a001f50:	8812      	ldrh	r2, [r2, #0]
1a001f52:	f8df c148 	ldr.w	ip, [pc, #328]	; 1a00209c <_printf_i+0x220>
1a001f56:	296f      	cmp	r1, #111	; 0x6f
1a001f58:	bf0c      	ite	eq
1a001f5a:	2308      	moveq	r3, #8
1a001f5c:	230a      	movne	r3, #10
1a001f5e:	2100      	movs	r1, #0
1a001f60:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a001f64:	6865      	ldr	r5, [r4, #4]
1a001f66:	60a5      	str	r5, [r4, #8]
1a001f68:	2d00      	cmp	r5, #0
1a001f6a:	bfa2      	ittt	ge
1a001f6c:	6821      	ldrge	r1, [r4, #0]
1a001f6e:	f021 0104 	bicge.w	r1, r1, #4
1a001f72:	6021      	strge	r1, [r4, #0]
1a001f74:	b90a      	cbnz	r2, 1a001f7a <_printf_i+0xfe>
1a001f76:	2d00      	cmp	r5, #0
1a001f78:	d046      	beq.n	1a002008 <_printf_i+0x18c>
1a001f7a:	4605      	mov	r5, r0
1a001f7c:	fbb2 f1f3 	udiv	r1, r2, r3
1a001f80:	fb03 2e11 	mls	lr, r3, r1, r2
1a001f84:	4293      	cmp	r3, r2
1a001f86:	f81c e00e 	ldrb.w	lr, [ip, lr]
1a001f8a:	f805 ed01 	strb.w	lr, [r5, #-1]!
1a001f8e:	d939      	bls.n	1a002004 <_printf_i+0x188>
1a001f90:	2b08      	cmp	r3, #8
1a001f92:	d10b      	bne.n	1a001fac <_printf_i+0x130>
1a001f94:	6823      	ldr	r3, [r4, #0]
1a001f96:	07da      	lsls	r2, r3, #31
1a001f98:	d508      	bpl.n	1a001fac <_printf_i+0x130>
1a001f9a:	6923      	ldr	r3, [r4, #16]
1a001f9c:	6862      	ldr	r2, [r4, #4]
1a001f9e:	429a      	cmp	r2, r3
1a001fa0:	bfde      	ittt	le
1a001fa2:	2330      	movle	r3, #48	; 0x30
1a001fa4:	f805 3c01 	strble.w	r3, [r5, #-1]
1a001fa8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a001fac:	1b40      	subs	r0, r0, r5
1a001fae:	6120      	str	r0, [r4, #16]
1a001fb0:	f8cd 8000 	str.w	r8, [sp]
1a001fb4:	463b      	mov	r3, r7
1a001fb6:	aa03      	add	r2, sp, #12
1a001fb8:	4621      	mov	r1, r4
1a001fba:	4630      	mov	r0, r6
1a001fbc:	f7ff fee8 	bl	1a001d90 <_printf_common>
1a001fc0:	3001      	adds	r0, #1
1a001fc2:	d149      	bne.n	1a002058 <_printf_i+0x1dc>
1a001fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001fc8:	b005      	add	sp, #20
1a001fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a001fce:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 1a00209c <_printf_i+0x220>
1a001fd2:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a001fd6:	681d      	ldr	r5, [r3, #0]
1a001fd8:	6821      	ldr	r1, [r4, #0]
1a001fda:	f855 2b04 	ldr.w	r2, [r5], #4
1a001fde:	601d      	str	r5, [r3, #0]
1a001fe0:	060d      	lsls	r5, r1, #24
1a001fe2:	d50b      	bpl.n	1a001ffc <_printf_i+0x180>
1a001fe4:	07cd      	lsls	r5, r1, #31
1a001fe6:	bf44      	itt	mi
1a001fe8:	f041 0120 	orrmi.w	r1, r1, #32
1a001fec:	6021      	strmi	r1, [r4, #0]
1a001fee:	b91a      	cbnz	r2, 1a001ff8 <_printf_i+0x17c>
1a001ff0:	6823      	ldr	r3, [r4, #0]
1a001ff2:	f023 0320 	bic.w	r3, r3, #32
1a001ff6:	6023      	str	r3, [r4, #0]
1a001ff8:	2310      	movs	r3, #16
1a001ffa:	e7b0      	b.n	1a001f5e <_printf_i+0xe2>
1a001ffc:	064b      	lsls	r3, r1, #25
1a001ffe:	bf48      	it	mi
1a002000:	b292      	uxthmi	r2, r2
1a002002:	e7ef      	b.n	1a001fe4 <_printf_i+0x168>
1a002004:	460a      	mov	r2, r1
1a002006:	e7b9      	b.n	1a001f7c <_printf_i+0x100>
1a002008:	4605      	mov	r5, r0
1a00200a:	e7c1      	b.n	1a001f90 <_printf_i+0x114>
1a00200c:	681a      	ldr	r2, [r3, #0]
1a00200e:	f8d4 c000 	ldr.w	ip, [r4]
1a002012:	6961      	ldr	r1, [r4, #20]
1a002014:	1d15      	adds	r5, r2, #4
1a002016:	601d      	str	r5, [r3, #0]
1a002018:	f01c 0f80 	tst.w	ip, #128	; 0x80
1a00201c:	6813      	ldr	r3, [r2, #0]
1a00201e:	d001      	beq.n	1a002024 <_printf_i+0x1a8>
1a002020:	6019      	str	r1, [r3, #0]
1a002022:	e003      	b.n	1a00202c <_printf_i+0x1b0>
1a002024:	f01c 0f40 	tst.w	ip, #64	; 0x40
1a002028:	d0fa      	beq.n	1a002020 <_printf_i+0x1a4>
1a00202a:	8019      	strh	r1, [r3, #0]
1a00202c:	2300      	movs	r3, #0
1a00202e:	6123      	str	r3, [r4, #16]
1a002030:	4605      	mov	r5, r0
1a002032:	e7bd      	b.n	1a001fb0 <_printf_i+0x134>
1a002034:	681a      	ldr	r2, [r3, #0]
1a002036:	1d11      	adds	r1, r2, #4
1a002038:	6019      	str	r1, [r3, #0]
1a00203a:	6815      	ldr	r5, [r2, #0]
1a00203c:	6862      	ldr	r2, [r4, #4]
1a00203e:	2100      	movs	r1, #0
1a002040:	4628      	mov	r0, r5
1a002042:	f000 fa65 	bl	1a002510 <memchr>
1a002046:	b108      	cbz	r0, 1a00204c <_printf_i+0x1d0>
1a002048:	1b40      	subs	r0, r0, r5
1a00204a:	6060      	str	r0, [r4, #4]
1a00204c:	6863      	ldr	r3, [r4, #4]
1a00204e:	6123      	str	r3, [r4, #16]
1a002050:	2300      	movs	r3, #0
1a002052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a002056:	e7ab      	b.n	1a001fb0 <_printf_i+0x134>
1a002058:	6923      	ldr	r3, [r4, #16]
1a00205a:	462a      	mov	r2, r5
1a00205c:	4639      	mov	r1, r7
1a00205e:	4630      	mov	r0, r6
1a002060:	47c0      	blx	r8
1a002062:	3001      	adds	r0, #1
1a002064:	d0ae      	beq.n	1a001fc4 <_printf_i+0x148>
1a002066:	6823      	ldr	r3, [r4, #0]
1a002068:	079b      	lsls	r3, r3, #30
1a00206a:	d413      	bmi.n	1a002094 <_printf_i+0x218>
1a00206c:	68e0      	ldr	r0, [r4, #12]
1a00206e:	9b03      	ldr	r3, [sp, #12]
1a002070:	4298      	cmp	r0, r3
1a002072:	bfb8      	it	lt
1a002074:	4618      	movlt	r0, r3
1a002076:	e7a7      	b.n	1a001fc8 <_printf_i+0x14c>
1a002078:	2301      	movs	r3, #1
1a00207a:	464a      	mov	r2, r9
1a00207c:	4639      	mov	r1, r7
1a00207e:	4630      	mov	r0, r6
1a002080:	47c0      	blx	r8
1a002082:	3001      	adds	r0, #1
1a002084:	d09e      	beq.n	1a001fc4 <_printf_i+0x148>
1a002086:	3501      	adds	r5, #1
1a002088:	68e3      	ldr	r3, [r4, #12]
1a00208a:	9a03      	ldr	r2, [sp, #12]
1a00208c:	1a9b      	subs	r3, r3, r2
1a00208e:	42ab      	cmp	r3, r5
1a002090:	dcf2      	bgt.n	1a002078 <_printf_i+0x1fc>
1a002092:	e7eb      	b.n	1a00206c <_printf_i+0x1f0>
1a002094:	2500      	movs	r5, #0
1a002096:	f104 0919 	add.w	r9, r4, #25
1a00209a:	e7f5      	b.n	1a002088 <_printf_i+0x20c>
1a00209c:	1a002aea 	.word	0x1a002aea
1a0020a0:	1a002afb 	.word	0x1a002afb

1a0020a4 <_scanf_chars>:
1a0020a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0020a8:	4615      	mov	r5, r2
1a0020aa:	688a      	ldr	r2, [r1, #8]
1a0020ac:	4680      	mov	r8, r0
1a0020ae:	460c      	mov	r4, r1
1a0020b0:	b932      	cbnz	r2, 1a0020c0 <_scanf_chars+0x1c>
1a0020b2:	698a      	ldr	r2, [r1, #24]
1a0020b4:	2a00      	cmp	r2, #0
1a0020b6:	bf0c      	ite	eq
1a0020b8:	2201      	moveq	r2, #1
1a0020ba:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
1a0020be:	608a      	str	r2, [r1, #8]
1a0020c0:	6822      	ldr	r2, [r4, #0]
1a0020c2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1a002150 <_scanf_chars+0xac>
1a0020c6:	06d1      	lsls	r1, r2, #27
1a0020c8:	bf5f      	itttt	pl
1a0020ca:	681a      	ldrpl	r2, [r3, #0]
1a0020cc:	1d11      	addpl	r1, r2, #4
1a0020ce:	6019      	strpl	r1, [r3, #0]
1a0020d0:	6816      	ldrpl	r6, [r2, #0]
1a0020d2:	2700      	movs	r7, #0
1a0020d4:	69a0      	ldr	r0, [r4, #24]
1a0020d6:	b188      	cbz	r0, 1a0020fc <_scanf_chars+0x58>
1a0020d8:	2801      	cmp	r0, #1
1a0020da:	d107      	bne.n	1a0020ec <_scanf_chars+0x48>
1a0020dc:	682b      	ldr	r3, [r5, #0]
1a0020de:	781a      	ldrb	r2, [r3, #0]
1a0020e0:	6963      	ldr	r3, [r4, #20]
1a0020e2:	5c9b      	ldrb	r3, [r3, r2]
1a0020e4:	b953      	cbnz	r3, 1a0020fc <_scanf_chars+0x58>
1a0020e6:	bb27      	cbnz	r7, 1a002132 <_scanf_chars+0x8e>
1a0020e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0020ec:	2802      	cmp	r0, #2
1a0020ee:	d120      	bne.n	1a002132 <_scanf_chars+0x8e>
1a0020f0:	682b      	ldr	r3, [r5, #0]
1a0020f2:	781b      	ldrb	r3, [r3, #0]
1a0020f4:	f813 3009 	ldrb.w	r3, [r3, r9]
1a0020f8:	071b      	lsls	r3, r3, #28
1a0020fa:	d41a      	bmi.n	1a002132 <_scanf_chars+0x8e>
1a0020fc:	6823      	ldr	r3, [r4, #0]
1a0020fe:	06da      	lsls	r2, r3, #27
1a002100:	bf5e      	ittt	pl
1a002102:	682b      	ldrpl	r3, [r5, #0]
1a002104:	781b      	ldrbpl	r3, [r3, #0]
1a002106:	f806 3b01 	strbpl.w	r3, [r6], #1
1a00210a:	682a      	ldr	r2, [r5, #0]
1a00210c:	686b      	ldr	r3, [r5, #4]
1a00210e:	3201      	adds	r2, #1
1a002110:	602a      	str	r2, [r5, #0]
1a002112:	68a2      	ldr	r2, [r4, #8]
1a002114:	3b01      	subs	r3, #1
1a002116:	3a01      	subs	r2, #1
1a002118:	606b      	str	r3, [r5, #4]
1a00211a:	3701      	adds	r7, #1
1a00211c:	60a2      	str	r2, [r4, #8]
1a00211e:	b142      	cbz	r2, 1a002132 <_scanf_chars+0x8e>
1a002120:	2b00      	cmp	r3, #0
1a002122:	dcd7      	bgt.n	1a0020d4 <_scanf_chars+0x30>
1a002124:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
1a002128:	4629      	mov	r1, r5
1a00212a:	4640      	mov	r0, r8
1a00212c:	4798      	blx	r3
1a00212e:	2800      	cmp	r0, #0
1a002130:	d0d0      	beq.n	1a0020d4 <_scanf_chars+0x30>
1a002132:	6823      	ldr	r3, [r4, #0]
1a002134:	f013 0310 	ands.w	r3, r3, #16
1a002138:	d105      	bne.n	1a002146 <_scanf_chars+0xa2>
1a00213a:	68e2      	ldr	r2, [r4, #12]
1a00213c:	3201      	adds	r2, #1
1a00213e:	60e2      	str	r2, [r4, #12]
1a002140:	69a2      	ldr	r2, [r4, #24]
1a002142:	b102      	cbz	r2, 1a002146 <_scanf_chars+0xa2>
1a002144:	7033      	strb	r3, [r6, #0]
1a002146:	6923      	ldr	r3, [r4, #16]
1a002148:	441f      	add	r7, r3
1a00214a:	6127      	str	r7, [r4, #16]
1a00214c:	2000      	movs	r0, #0
1a00214e:	e7cb      	b.n	1a0020e8 <_scanf_chars+0x44>
1a002150:	1a0029d9 	.word	0x1a0029d9

1a002154 <_scanf_i>:
1a002154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002158:	4699      	mov	r9, r3
1a00215a:	4b74      	ldr	r3, [pc, #464]	; (1a00232c <_scanf_i+0x1d8>)
1a00215c:	460c      	mov	r4, r1
1a00215e:	4682      	mov	sl, r0
1a002160:	4616      	mov	r6, r2
1a002162:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
1a002166:	b087      	sub	sp, #28
1a002168:	ab03      	add	r3, sp, #12
1a00216a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
1a00216e:	4b70      	ldr	r3, [pc, #448]	; (1a002330 <_scanf_i+0x1dc>)
1a002170:	69a1      	ldr	r1, [r4, #24]
1a002172:	4a70      	ldr	r2, [pc, #448]	; (1a002334 <_scanf_i+0x1e0>)
1a002174:	2903      	cmp	r1, #3
1a002176:	bf18      	it	ne
1a002178:	461a      	movne	r2, r3
1a00217a:	68a3      	ldr	r3, [r4, #8]
1a00217c:	9201      	str	r2, [sp, #4]
1a00217e:	1e5a      	subs	r2, r3, #1
1a002180:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
1a002184:	bf88      	it	hi
1a002186:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
1a00218a:	4627      	mov	r7, r4
1a00218c:	bf82      	ittt	hi
1a00218e:	eb03 0805 	addhi.w	r8, r3, r5
1a002192:	f240 135d 	movwhi	r3, #349	; 0x15d
1a002196:	60a3      	strhi	r3, [r4, #8]
1a002198:	f857 3b1c 	ldr.w	r3, [r7], #28
1a00219c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
1a0021a0:	bf98      	it	ls
1a0021a2:	f04f 0800 	movls.w	r8, #0
1a0021a6:	6023      	str	r3, [r4, #0]
1a0021a8:	463d      	mov	r5, r7
1a0021aa:	f04f 0b00 	mov.w	fp, #0
1a0021ae:	6831      	ldr	r1, [r6, #0]
1a0021b0:	ab03      	add	r3, sp, #12
1a0021b2:	2202      	movs	r2, #2
1a0021b4:	7809      	ldrb	r1, [r1, #0]
1a0021b6:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
1a0021ba:	f000 f9a9 	bl	1a002510 <memchr>
1a0021be:	b328      	cbz	r0, 1a00220c <_scanf_i+0xb8>
1a0021c0:	f1bb 0f01 	cmp.w	fp, #1
1a0021c4:	d159      	bne.n	1a00227a <_scanf_i+0x126>
1a0021c6:	6862      	ldr	r2, [r4, #4]
1a0021c8:	b92a      	cbnz	r2, 1a0021d6 <_scanf_i+0x82>
1a0021ca:	6822      	ldr	r2, [r4, #0]
1a0021cc:	2308      	movs	r3, #8
1a0021ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
1a0021d2:	6063      	str	r3, [r4, #4]
1a0021d4:	6022      	str	r2, [r4, #0]
1a0021d6:	6822      	ldr	r2, [r4, #0]
1a0021d8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
1a0021dc:	6022      	str	r2, [r4, #0]
1a0021de:	68a2      	ldr	r2, [r4, #8]
1a0021e0:	1e51      	subs	r1, r2, #1
1a0021e2:	60a1      	str	r1, [r4, #8]
1a0021e4:	b192      	cbz	r2, 1a00220c <_scanf_i+0xb8>
1a0021e6:	6832      	ldr	r2, [r6, #0]
1a0021e8:	1c51      	adds	r1, r2, #1
1a0021ea:	6031      	str	r1, [r6, #0]
1a0021ec:	7812      	ldrb	r2, [r2, #0]
1a0021ee:	f805 2b01 	strb.w	r2, [r5], #1
1a0021f2:	6872      	ldr	r2, [r6, #4]
1a0021f4:	3a01      	subs	r2, #1
1a0021f6:	2a00      	cmp	r2, #0
1a0021f8:	6072      	str	r2, [r6, #4]
1a0021fa:	dc07      	bgt.n	1a00220c <_scanf_i+0xb8>
1a0021fc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
1a002200:	4631      	mov	r1, r6
1a002202:	4650      	mov	r0, sl
1a002204:	4790      	blx	r2
1a002206:	2800      	cmp	r0, #0
1a002208:	f040 8085 	bne.w	1a002316 <_scanf_i+0x1c2>
1a00220c:	f10b 0b01 	add.w	fp, fp, #1
1a002210:	f1bb 0f03 	cmp.w	fp, #3
1a002214:	d1cb      	bne.n	1a0021ae <_scanf_i+0x5a>
1a002216:	6863      	ldr	r3, [r4, #4]
1a002218:	b90b      	cbnz	r3, 1a00221e <_scanf_i+0xca>
1a00221a:	230a      	movs	r3, #10
1a00221c:	6063      	str	r3, [r4, #4]
1a00221e:	6863      	ldr	r3, [r4, #4]
1a002220:	4945      	ldr	r1, [pc, #276]	; (1a002338 <_scanf_i+0x1e4>)
1a002222:	6960      	ldr	r0, [r4, #20]
1a002224:	1ac9      	subs	r1, r1, r3
1a002226:	f000 f889 	bl	1a00233c <__sccl>
1a00222a:	f04f 0b00 	mov.w	fp, #0
1a00222e:	68a3      	ldr	r3, [r4, #8]
1a002230:	6822      	ldr	r2, [r4, #0]
1a002232:	2b00      	cmp	r3, #0
1a002234:	d03d      	beq.n	1a0022b2 <_scanf_i+0x15e>
1a002236:	6831      	ldr	r1, [r6, #0]
1a002238:	6960      	ldr	r0, [r4, #20]
1a00223a:	f891 c000 	ldrb.w	ip, [r1]
1a00223e:	f810 000c 	ldrb.w	r0, [r0, ip]
1a002242:	2800      	cmp	r0, #0
1a002244:	d035      	beq.n	1a0022b2 <_scanf_i+0x15e>
1a002246:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
1a00224a:	d124      	bne.n	1a002296 <_scanf_i+0x142>
1a00224c:	0510      	lsls	r0, r2, #20
1a00224e:	d522      	bpl.n	1a002296 <_scanf_i+0x142>
1a002250:	f10b 0b01 	add.w	fp, fp, #1
1a002254:	f1b8 0f00 	cmp.w	r8, #0
1a002258:	d003      	beq.n	1a002262 <_scanf_i+0x10e>
1a00225a:	3301      	adds	r3, #1
1a00225c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
1a002260:	60a3      	str	r3, [r4, #8]
1a002262:	6873      	ldr	r3, [r6, #4]
1a002264:	3b01      	subs	r3, #1
1a002266:	2b00      	cmp	r3, #0
1a002268:	6073      	str	r3, [r6, #4]
1a00226a:	dd1b      	ble.n	1a0022a4 <_scanf_i+0x150>
1a00226c:	6833      	ldr	r3, [r6, #0]
1a00226e:	3301      	adds	r3, #1
1a002270:	6033      	str	r3, [r6, #0]
1a002272:	68a3      	ldr	r3, [r4, #8]
1a002274:	3b01      	subs	r3, #1
1a002276:	60a3      	str	r3, [r4, #8]
1a002278:	e7d9      	b.n	1a00222e <_scanf_i+0xda>
1a00227a:	f1bb 0f02 	cmp.w	fp, #2
1a00227e:	d1ae      	bne.n	1a0021de <_scanf_i+0x8a>
1a002280:	6822      	ldr	r2, [r4, #0]
1a002282:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
1a002286:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
1a00228a:	d1bf      	bne.n	1a00220c <_scanf_i+0xb8>
1a00228c:	2310      	movs	r3, #16
1a00228e:	6063      	str	r3, [r4, #4]
1a002290:	f442 7280 	orr.w	r2, r2, #256	; 0x100
1a002294:	e7a2      	b.n	1a0021dc <_scanf_i+0x88>
1a002296:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
1a00229a:	6022      	str	r2, [r4, #0]
1a00229c:	780b      	ldrb	r3, [r1, #0]
1a00229e:	f805 3b01 	strb.w	r3, [r5], #1
1a0022a2:	e7de      	b.n	1a002262 <_scanf_i+0x10e>
1a0022a4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
1a0022a8:	4631      	mov	r1, r6
1a0022aa:	4650      	mov	r0, sl
1a0022ac:	4798      	blx	r3
1a0022ae:	2800      	cmp	r0, #0
1a0022b0:	d0df      	beq.n	1a002272 <_scanf_i+0x11e>
1a0022b2:	6823      	ldr	r3, [r4, #0]
1a0022b4:	05d9      	lsls	r1, r3, #23
1a0022b6:	d50d      	bpl.n	1a0022d4 <_scanf_i+0x180>
1a0022b8:	42bd      	cmp	r5, r7
1a0022ba:	d909      	bls.n	1a0022d0 <_scanf_i+0x17c>
1a0022bc:	f815 1c01 	ldrb.w	r1, [r5, #-1]
1a0022c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
1a0022c4:	4632      	mov	r2, r6
1a0022c6:	4650      	mov	r0, sl
1a0022c8:	4798      	blx	r3
1a0022ca:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
1a0022ce:	4645      	mov	r5, r8
1a0022d0:	42bd      	cmp	r5, r7
1a0022d2:	d028      	beq.n	1a002326 <_scanf_i+0x1d2>
1a0022d4:	6822      	ldr	r2, [r4, #0]
1a0022d6:	f012 0210 	ands.w	r2, r2, #16
1a0022da:	d113      	bne.n	1a002304 <_scanf_i+0x1b0>
1a0022dc:	702a      	strb	r2, [r5, #0]
1a0022de:	6863      	ldr	r3, [r4, #4]
1a0022e0:	9e01      	ldr	r6, [sp, #4]
1a0022e2:	4639      	mov	r1, r7
1a0022e4:	4650      	mov	r0, sl
1a0022e6:	47b0      	blx	r6
1a0022e8:	f8d9 3000 	ldr.w	r3, [r9]
1a0022ec:	6821      	ldr	r1, [r4, #0]
1a0022ee:	1d1a      	adds	r2, r3, #4
1a0022f0:	f8c9 2000 	str.w	r2, [r9]
1a0022f4:	f011 0f20 	tst.w	r1, #32
1a0022f8:	681b      	ldr	r3, [r3, #0]
1a0022fa:	d00f      	beq.n	1a00231c <_scanf_i+0x1c8>
1a0022fc:	6018      	str	r0, [r3, #0]
1a0022fe:	68e3      	ldr	r3, [r4, #12]
1a002300:	3301      	adds	r3, #1
1a002302:	60e3      	str	r3, [r4, #12]
1a002304:	1bed      	subs	r5, r5, r7
1a002306:	44ab      	add	fp, r5
1a002308:	6925      	ldr	r5, [r4, #16]
1a00230a:	445d      	add	r5, fp
1a00230c:	6125      	str	r5, [r4, #16]
1a00230e:	2000      	movs	r0, #0
1a002310:	b007      	add	sp, #28
1a002312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002316:	f04f 0b00 	mov.w	fp, #0
1a00231a:	e7ca      	b.n	1a0022b2 <_scanf_i+0x15e>
1a00231c:	07ca      	lsls	r2, r1, #31
1a00231e:	bf4c      	ite	mi
1a002320:	8018      	strhmi	r0, [r3, #0]
1a002322:	6018      	strpl	r0, [r3, #0]
1a002324:	e7eb      	b.n	1a0022fe <_scanf_i+0x1aa>
1a002326:	2001      	movs	r0, #1
1a002328:	e7f2      	b.n	1a002310 <_scanf_i+0x1bc>
1a00232a:	bf00      	nop
1a00232c:	1a002b0c 	.word	0x1a002b0c
1a002330:	1a00248d 	.word	0x1a00248d
1a002334:	1a00178d 	.word	0x1a00178d
1a002338:	1a002b28 	.word	0x1a002b28

1a00233c <__sccl>:
1a00233c:	b570      	push	{r4, r5, r6, lr}
1a00233e:	780b      	ldrb	r3, [r1, #0]
1a002340:	2b5e      	cmp	r3, #94	; 0x5e
1a002342:	bf13      	iteet	ne
1a002344:	1c4a      	addne	r2, r1, #1
1a002346:	1c8a      	addeq	r2, r1, #2
1a002348:	784b      	ldrbeq	r3, [r1, #1]
1a00234a:	2100      	movne	r1, #0
1a00234c:	bf08      	it	eq
1a00234e:	2101      	moveq	r1, #1
1a002350:	1e44      	subs	r4, r0, #1
1a002352:	f100 05ff 	add.w	r5, r0, #255	; 0xff
1a002356:	f804 1f01 	strb.w	r1, [r4, #1]!
1a00235a:	42ac      	cmp	r4, r5
1a00235c:	d1fb      	bne.n	1a002356 <__sccl+0x1a>
1a00235e:	b913      	cbnz	r3, 1a002366 <__sccl+0x2a>
1a002360:	3a01      	subs	r2, #1
1a002362:	4610      	mov	r0, r2
1a002364:	bd70      	pop	{r4, r5, r6, pc}
1a002366:	f081 0401 	eor.w	r4, r1, #1
1a00236a:	54c4      	strb	r4, [r0, r3]
1a00236c:	1c51      	adds	r1, r2, #1
1a00236e:	f811 5c01 	ldrb.w	r5, [r1, #-1]
1a002372:	2d2d      	cmp	r5, #45	; 0x2d
1a002374:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
1a002378:	460a      	mov	r2, r1
1a00237a:	d006      	beq.n	1a00238a <__sccl+0x4e>
1a00237c:	2d5d      	cmp	r5, #93	; 0x5d
1a00237e:	d0f0      	beq.n	1a002362 <__sccl+0x26>
1a002380:	b90d      	cbnz	r5, 1a002386 <__sccl+0x4a>
1a002382:	4632      	mov	r2, r6
1a002384:	e7ed      	b.n	1a002362 <__sccl+0x26>
1a002386:	462b      	mov	r3, r5
1a002388:	e7ef      	b.n	1a00236a <__sccl+0x2e>
1a00238a:	780e      	ldrb	r6, [r1, #0]
1a00238c:	2e5d      	cmp	r6, #93	; 0x5d
1a00238e:	d0fa      	beq.n	1a002386 <__sccl+0x4a>
1a002390:	42b3      	cmp	r3, r6
1a002392:	dcf8      	bgt.n	1a002386 <__sccl+0x4a>
1a002394:	3301      	adds	r3, #1
1a002396:	429e      	cmp	r6, r3
1a002398:	54c4      	strb	r4, [r0, r3]
1a00239a:	dcfb      	bgt.n	1a002394 <__sccl+0x58>
1a00239c:	3102      	adds	r1, #2
1a00239e:	e7e6      	b.n	1a00236e <__sccl+0x32>

1a0023a0 <_strtoul_l.isra.0>:
1a0023a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0023a4:	4f38      	ldr	r7, [pc, #224]	; (1a002488 <_strtoul_l.isra.0+0xe8>)
1a0023a6:	4686      	mov	lr, r0
1a0023a8:	4608      	mov	r0, r1
1a0023aa:	4605      	mov	r5, r0
1a0023ac:	f815 4b01 	ldrb.w	r4, [r5], #1
1a0023b0:	5de6      	ldrb	r6, [r4, r7]
1a0023b2:	f016 0608 	ands.w	r6, r6, #8
1a0023b6:	d131      	bne.n	1a00241c <_strtoul_l.isra.0+0x7c>
1a0023b8:	2c2d      	cmp	r4, #45	; 0x2d
1a0023ba:	d131      	bne.n	1a002420 <_strtoul_l.isra.0+0x80>
1a0023bc:	782c      	ldrb	r4, [r5, #0]
1a0023be:	f04f 0801 	mov.w	r8, #1
1a0023c2:	1c85      	adds	r5, r0, #2
1a0023c4:	2b00      	cmp	r3, #0
1a0023c6:	d05a      	beq.n	1a00247e <_strtoul_l.isra.0+0xde>
1a0023c8:	2b10      	cmp	r3, #16
1a0023ca:	d109      	bne.n	1a0023e0 <_strtoul_l.isra.0+0x40>
1a0023cc:	2c30      	cmp	r4, #48	; 0x30
1a0023ce:	d107      	bne.n	1a0023e0 <_strtoul_l.isra.0+0x40>
1a0023d0:	7828      	ldrb	r0, [r5, #0]
1a0023d2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
1a0023d6:	2858      	cmp	r0, #88	; 0x58
1a0023d8:	d14c      	bne.n	1a002474 <_strtoul_l.isra.0+0xd4>
1a0023da:	786c      	ldrb	r4, [r5, #1]
1a0023dc:	2310      	movs	r3, #16
1a0023de:	3502      	adds	r5, #2
1a0023e0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a0023e4:	2600      	movs	r6, #0
1a0023e6:	fbbc fcf3 	udiv	ip, ip, r3
1a0023ea:	fb03 f90c 	mul.w	r9, r3, ip
1a0023ee:	ea6f 0909 	mvn.w	r9, r9
1a0023f2:	4630      	mov	r0, r6
1a0023f4:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
1a0023f8:	2f09      	cmp	r7, #9
1a0023fa:	d818      	bhi.n	1a00242e <_strtoul_l.isra.0+0x8e>
1a0023fc:	463c      	mov	r4, r7
1a0023fe:	42a3      	cmp	r3, r4
1a002400:	dd24      	ble.n	1a00244c <_strtoul_l.isra.0+0xac>
1a002402:	2e00      	cmp	r6, #0
1a002404:	db1f      	blt.n	1a002446 <_strtoul_l.isra.0+0xa6>
1a002406:	4584      	cmp	ip, r0
1a002408:	d31d      	bcc.n	1a002446 <_strtoul_l.isra.0+0xa6>
1a00240a:	d101      	bne.n	1a002410 <_strtoul_l.isra.0+0x70>
1a00240c:	45a1      	cmp	r9, r4
1a00240e:	db1a      	blt.n	1a002446 <_strtoul_l.isra.0+0xa6>
1a002410:	fb00 4003 	mla	r0, r0, r3, r4
1a002414:	2601      	movs	r6, #1
1a002416:	f815 4b01 	ldrb.w	r4, [r5], #1
1a00241a:	e7eb      	b.n	1a0023f4 <_strtoul_l.isra.0+0x54>
1a00241c:	4628      	mov	r0, r5
1a00241e:	e7c4      	b.n	1a0023aa <_strtoul_l.isra.0+0xa>
1a002420:	2c2b      	cmp	r4, #43	; 0x2b
1a002422:	bf08      	it	eq
1a002424:	782c      	ldrbeq	r4, [r5, #0]
1a002426:	46b0      	mov	r8, r6
1a002428:	bf08      	it	eq
1a00242a:	1c85      	addeq	r5, r0, #2
1a00242c:	e7ca      	b.n	1a0023c4 <_strtoul_l.isra.0+0x24>
1a00242e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
1a002432:	2f19      	cmp	r7, #25
1a002434:	d801      	bhi.n	1a00243a <_strtoul_l.isra.0+0x9a>
1a002436:	3c37      	subs	r4, #55	; 0x37
1a002438:	e7e1      	b.n	1a0023fe <_strtoul_l.isra.0+0x5e>
1a00243a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
1a00243e:	2f19      	cmp	r7, #25
1a002440:	d804      	bhi.n	1a00244c <_strtoul_l.isra.0+0xac>
1a002442:	3c57      	subs	r4, #87	; 0x57
1a002444:	e7db      	b.n	1a0023fe <_strtoul_l.isra.0+0x5e>
1a002446:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
1a00244a:	e7e4      	b.n	1a002416 <_strtoul_l.isra.0+0x76>
1a00244c:	2e00      	cmp	r6, #0
1a00244e:	da07      	bge.n	1a002460 <_strtoul_l.isra.0+0xc0>
1a002450:	2322      	movs	r3, #34	; 0x22
1a002452:	f8ce 3000 	str.w	r3, [lr]
1a002456:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00245a:	b942      	cbnz	r2, 1a00246e <_strtoul_l.isra.0+0xce>
1a00245c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a002460:	f1b8 0f00 	cmp.w	r8, #0
1a002464:	d000      	beq.n	1a002468 <_strtoul_l.isra.0+0xc8>
1a002466:	4240      	negs	r0, r0
1a002468:	2a00      	cmp	r2, #0
1a00246a:	d0f7      	beq.n	1a00245c <_strtoul_l.isra.0+0xbc>
1a00246c:	b106      	cbz	r6, 1a002470 <_strtoul_l.isra.0+0xd0>
1a00246e:	1e69      	subs	r1, r5, #1
1a002470:	6011      	str	r1, [r2, #0]
1a002472:	e7f3      	b.n	1a00245c <_strtoul_l.isra.0+0xbc>
1a002474:	2430      	movs	r4, #48	; 0x30
1a002476:	2b00      	cmp	r3, #0
1a002478:	d1b2      	bne.n	1a0023e0 <_strtoul_l.isra.0+0x40>
1a00247a:	2308      	movs	r3, #8
1a00247c:	e7b0      	b.n	1a0023e0 <_strtoul_l.isra.0+0x40>
1a00247e:	2c30      	cmp	r4, #48	; 0x30
1a002480:	d0a6      	beq.n	1a0023d0 <_strtoul_l.isra.0+0x30>
1a002482:	230a      	movs	r3, #10
1a002484:	e7ac      	b.n	1a0023e0 <_strtoul_l.isra.0+0x40>
1a002486:	bf00      	nop
1a002488:	1a0029d9 	.word	0x1a0029d9

1a00248c <_strtoul_r>:
1a00248c:	f7ff bf88 	b.w	1a0023a0 <_strtoul_l.isra.0>

1a002490 <__submore>:
1a002490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002494:	460c      	mov	r4, r1
1a002496:	6b49      	ldr	r1, [r1, #52]	; 0x34
1a002498:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a00249c:	4299      	cmp	r1, r3
1a00249e:	d11d      	bne.n	1a0024dc <__submore+0x4c>
1a0024a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
1a0024a4:	f000 f8ec 	bl	1a002680 <_malloc_r>
1a0024a8:	b918      	cbnz	r0, 1a0024b2 <__submore+0x22>
1a0024aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0024ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0024b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a0024b6:	63a3      	str	r3, [r4, #56]	; 0x38
1a0024b8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
1a0024bc:	6360      	str	r0, [r4, #52]	; 0x34
1a0024be:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
1a0024c2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0024c6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
1a0024ca:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0024ce:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
1a0024d2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
1a0024d6:	6020      	str	r0, [r4, #0]
1a0024d8:	2000      	movs	r0, #0
1a0024da:	e7e8      	b.n	1a0024ae <__submore+0x1e>
1a0024dc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
1a0024de:	0077      	lsls	r7, r6, #1
1a0024e0:	463a      	mov	r2, r7
1a0024e2:	f000 f927 	bl	1a002734 <_realloc_r>
1a0024e6:	4605      	mov	r5, r0
1a0024e8:	2800      	cmp	r0, #0
1a0024ea:	d0de      	beq.n	1a0024aa <__submore+0x1a>
1a0024ec:	eb00 0806 	add.w	r8, r0, r6
1a0024f0:	4601      	mov	r1, r0
1a0024f2:	4632      	mov	r2, r6
1a0024f4:	4640      	mov	r0, r8
1a0024f6:	f7ff f833 	bl	1a001560 <memcpy>
1a0024fa:	f8c4 8000 	str.w	r8, [r4]
1a0024fe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
1a002502:	e7e9      	b.n	1a0024d8 <__submore+0x48>

1a002504 <__retarget_lock_acquire_recursive>:
1a002504:	4770      	bx	lr

1a002506 <__retarget_lock_release_recursive>:
1a002506:	4770      	bx	lr
1a002508:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00250c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a002510 <memchr>:
1a002510:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a002514:	2a10      	cmp	r2, #16
1a002516:	db2b      	blt.n	1a002570 <memchr+0x60>
1a002518:	f010 0f07 	tst.w	r0, #7
1a00251c:	d008      	beq.n	1a002530 <memchr+0x20>
1a00251e:	f810 3b01 	ldrb.w	r3, [r0], #1
1a002522:	3a01      	subs	r2, #1
1a002524:	428b      	cmp	r3, r1
1a002526:	d02d      	beq.n	1a002584 <memchr+0x74>
1a002528:	f010 0f07 	tst.w	r0, #7
1a00252c:	b342      	cbz	r2, 1a002580 <memchr+0x70>
1a00252e:	d1f6      	bne.n	1a00251e <memchr+0xe>
1a002530:	b4f0      	push	{r4, r5, r6, r7}
1a002532:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a002536:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00253a:	f022 0407 	bic.w	r4, r2, #7
1a00253e:	f07f 0700 	mvns.w	r7, #0
1a002542:	2300      	movs	r3, #0
1a002544:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a002548:	3c08      	subs	r4, #8
1a00254a:	ea85 0501 	eor.w	r5, r5, r1
1a00254e:	ea86 0601 	eor.w	r6, r6, r1
1a002552:	fa85 f547 	uadd8	r5, r5, r7
1a002556:	faa3 f587 	sel	r5, r3, r7
1a00255a:	fa86 f647 	uadd8	r6, r6, r7
1a00255e:	faa5 f687 	sel	r6, r5, r7
1a002562:	b98e      	cbnz	r6, 1a002588 <memchr+0x78>
1a002564:	d1ee      	bne.n	1a002544 <memchr+0x34>
1a002566:	bcf0      	pop	{r4, r5, r6, r7}
1a002568:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00256c:	f002 0207 	and.w	r2, r2, #7
1a002570:	b132      	cbz	r2, 1a002580 <memchr+0x70>
1a002572:	f810 3b01 	ldrb.w	r3, [r0], #1
1a002576:	3a01      	subs	r2, #1
1a002578:	ea83 0301 	eor.w	r3, r3, r1
1a00257c:	b113      	cbz	r3, 1a002584 <memchr+0x74>
1a00257e:	d1f8      	bne.n	1a002572 <memchr+0x62>
1a002580:	2000      	movs	r0, #0
1a002582:	4770      	bx	lr
1a002584:	3801      	subs	r0, #1
1a002586:	4770      	bx	lr
1a002588:	2d00      	cmp	r5, #0
1a00258a:	bf06      	itte	eq
1a00258c:	4635      	moveq	r5, r6
1a00258e:	3803      	subeq	r0, #3
1a002590:	3807      	subne	r0, #7
1a002592:	f015 0f01 	tst.w	r5, #1
1a002596:	d107      	bne.n	1a0025a8 <memchr+0x98>
1a002598:	3001      	adds	r0, #1
1a00259a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00259e:	bf02      	ittt	eq
1a0025a0:	3001      	addeq	r0, #1
1a0025a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a0025a6:	3001      	addeq	r0, #1
1a0025a8:	bcf0      	pop	{r4, r5, r6, r7}
1a0025aa:	3801      	subs	r0, #1
1a0025ac:	4770      	bx	lr
1a0025ae:	bf00      	nop

1a0025b0 <memmove>:
1a0025b0:	4288      	cmp	r0, r1
1a0025b2:	b510      	push	{r4, lr}
1a0025b4:	eb01 0302 	add.w	r3, r1, r2
1a0025b8:	d902      	bls.n	1a0025c0 <memmove+0x10>
1a0025ba:	4283      	cmp	r3, r0
1a0025bc:	461c      	mov	r4, r3
1a0025be:	d807      	bhi.n	1a0025d0 <memmove+0x20>
1a0025c0:	1e42      	subs	r2, r0, #1
1a0025c2:	4299      	cmp	r1, r3
1a0025c4:	d008      	beq.n	1a0025d8 <memmove+0x28>
1a0025c6:	f811 4b01 	ldrb.w	r4, [r1], #1
1a0025ca:	f802 4f01 	strb.w	r4, [r2, #1]!
1a0025ce:	e7f8      	b.n	1a0025c2 <memmove+0x12>
1a0025d0:	1883      	adds	r3, r0, r2
1a0025d2:	1a9a      	subs	r2, r3, r2
1a0025d4:	429a      	cmp	r2, r3
1a0025d6:	d100      	bne.n	1a0025da <memmove+0x2a>
1a0025d8:	bd10      	pop	{r4, pc}
1a0025da:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
1a0025de:	f803 1d01 	strb.w	r1, [r3, #-1]!
1a0025e2:	e7f7      	b.n	1a0025d4 <memmove+0x24>

1a0025e4 <_free_r>:
1a0025e4:	b538      	push	{r3, r4, r5, lr}
1a0025e6:	4605      	mov	r5, r0
1a0025e8:	2900      	cmp	r1, #0
1a0025ea:	d045      	beq.n	1a002678 <_free_r+0x94>
1a0025ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a0025f0:	1f0c      	subs	r4, r1, #4
1a0025f2:	2b00      	cmp	r3, #0
1a0025f4:	bfb8      	it	lt
1a0025f6:	18e4      	addlt	r4, r4, r3
1a0025f8:	f000 f8c2 	bl	1a002780 <__malloc_lock>
1a0025fc:	4a1f      	ldr	r2, [pc, #124]	; (1a00267c <_free_r+0x98>)
1a0025fe:	6813      	ldr	r3, [r2, #0]
1a002600:	4610      	mov	r0, r2
1a002602:	b933      	cbnz	r3, 1a002612 <_free_r+0x2e>
1a002604:	6063      	str	r3, [r4, #4]
1a002606:	6014      	str	r4, [r2, #0]
1a002608:	4628      	mov	r0, r5
1a00260a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a00260e:	f000 b8bd 	b.w	1a00278c <__malloc_unlock>
1a002612:	42a3      	cmp	r3, r4
1a002614:	d90c      	bls.n	1a002630 <_free_r+0x4c>
1a002616:	6821      	ldr	r1, [r4, #0]
1a002618:	1862      	adds	r2, r4, r1
1a00261a:	4293      	cmp	r3, r2
1a00261c:	bf04      	itt	eq
1a00261e:	681a      	ldreq	r2, [r3, #0]
1a002620:	685b      	ldreq	r3, [r3, #4]
1a002622:	6063      	str	r3, [r4, #4]
1a002624:	bf04      	itt	eq
1a002626:	1852      	addeq	r2, r2, r1
1a002628:	6022      	streq	r2, [r4, #0]
1a00262a:	6004      	str	r4, [r0, #0]
1a00262c:	e7ec      	b.n	1a002608 <_free_r+0x24>
1a00262e:	4613      	mov	r3, r2
1a002630:	685a      	ldr	r2, [r3, #4]
1a002632:	b10a      	cbz	r2, 1a002638 <_free_r+0x54>
1a002634:	42a2      	cmp	r2, r4
1a002636:	d9fa      	bls.n	1a00262e <_free_r+0x4a>
1a002638:	6819      	ldr	r1, [r3, #0]
1a00263a:	1858      	adds	r0, r3, r1
1a00263c:	42a0      	cmp	r0, r4
1a00263e:	d10b      	bne.n	1a002658 <_free_r+0x74>
1a002640:	6820      	ldr	r0, [r4, #0]
1a002642:	4401      	add	r1, r0
1a002644:	1858      	adds	r0, r3, r1
1a002646:	4282      	cmp	r2, r0
1a002648:	6019      	str	r1, [r3, #0]
1a00264a:	d1dd      	bne.n	1a002608 <_free_r+0x24>
1a00264c:	6810      	ldr	r0, [r2, #0]
1a00264e:	6852      	ldr	r2, [r2, #4]
1a002650:	605a      	str	r2, [r3, #4]
1a002652:	4401      	add	r1, r0
1a002654:	6019      	str	r1, [r3, #0]
1a002656:	e7d7      	b.n	1a002608 <_free_r+0x24>
1a002658:	d902      	bls.n	1a002660 <_free_r+0x7c>
1a00265a:	230c      	movs	r3, #12
1a00265c:	602b      	str	r3, [r5, #0]
1a00265e:	e7d3      	b.n	1a002608 <_free_r+0x24>
1a002660:	6820      	ldr	r0, [r4, #0]
1a002662:	1821      	adds	r1, r4, r0
1a002664:	428a      	cmp	r2, r1
1a002666:	bf04      	itt	eq
1a002668:	6811      	ldreq	r1, [r2, #0]
1a00266a:	6852      	ldreq	r2, [r2, #4]
1a00266c:	6062      	str	r2, [r4, #4]
1a00266e:	bf04      	itt	eq
1a002670:	1809      	addeq	r1, r1, r0
1a002672:	6021      	streq	r1, [r4, #0]
1a002674:	605c      	str	r4, [r3, #4]
1a002676:	e7c7      	b.n	1a002608 <_free_r+0x24>
1a002678:	bd38      	pop	{r3, r4, r5, pc}
1a00267a:	bf00      	nop
1a00267c:	1000010c 	.word	0x1000010c

1a002680 <_malloc_r>:
1a002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002682:	1ccd      	adds	r5, r1, #3
1a002684:	f025 0503 	bic.w	r5, r5, #3
1a002688:	3508      	adds	r5, #8
1a00268a:	2d0c      	cmp	r5, #12
1a00268c:	bf38      	it	cc
1a00268e:	250c      	movcc	r5, #12
1a002690:	2d00      	cmp	r5, #0
1a002692:	4606      	mov	r6, r0
1a002694:	db01      	blt.n	1a00269a <_malloc_r+0x1a>
1a002696:	42a9      	cmp	r1, r5
1a002698:	d903      	bls.n	1a0026a2 <_malloc_r+0x22>
1a00269a:	230c      	movs	r3, #12
1a00269c:	6033      	str	r3, [r6, #0]
1a00269e:	2000      	movs	r0, #0
1a0026a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a0026a2:	f000 f86d 	bl	1a002780 <__malloc_lock>
1a0026a6:	4921      	ldr	r1, [pc, #132]	; (1a00272c <_malloc_r+0xac>)
1a0026a8:	680a      	ldr	r2, [r1, #0]
1a0026aa:	4614      	mov	r4, r2
1a0026ac:	b99c      	cbnz	r4, 1a0026d6 <_malloc_r+0x56>
1a0026ae:	4f20      	ldr	r7, [pc, #128]	; (1a002730 <_malloc_r+0xb0>)
1a0026b0:	683b      	ldr	r3, [r7, #0]
1a0026b2:	b923      	cbnz	r3, 1a0026be <_malloc_r+0x3e>
1a0026b4:	4621      	mov	r1, r4
1a0026b6:	4630      	mov	r0, r6
1a0026b8:	f7fe fdbc 	bl	1a001234 <_sbrk_r>
1a0026bc:	6038      	str	r0, [r7, #0]
1a0026be:	4629      	mov	r1, r5
1a0026c0:	4630      	mov	r0, r6
1a0026c2:	f7fe fdb7 	bl	1a001234 <_sbrk_r>
1a0026c6:	1c43      	adds	r3, r0, #1
1a0026c8:	d123      	bne.n	1a002712 <_malloc_r+0x92>
1a0026ca:	230c      	movs	r3, #12
1a0026cc:	6033      	str	r3, [r6, #0]
1a0026ce:	4630      	mov	r0, r6
1a0026d0:	f000 f85c 	bl	1a00278c <__malloc_unlock>
1a0026d4:	e7e3      	b.n	1a00269e <_malloc_r+0x1e>
1a0026d6:	6823      	ldr	r3, [r4, #0]
1a0026d8:	1b5b      	subs	r3, r3, r5
1a0026da:	d417      	bmi.n	1a00270c <_malloc_r+0x8c>
1a0026dc:	2b0b      	cmp	r3, #11
1a0026de:	d903      	bls.n	1a0026e8 <_malloc_r+0x68>
1a0026e0:	6023      	str	r3, [r4, #0]
1a0026e2:	441c      	add	r4, r3
1a0026e4:	6025      	str	r5, [r4, #0]
1a0026e6:	e004      	b.n	1a0026f2 <_malloc_r+0x72>
1a0026e8:	6863      	ldr	r3, [r4, #4]
1a0026ea:	42a2      	cmp	r2, r4
1a0026ec:	bf0c      	ite	eq
1a0026ee:	600b      	streq	r3, [r1, #0]
1a0026f0:	6053      	strne	r3, [r2, #4]
1a0026f2:	4630      	mov	r0, r6
1a0026f4:	f000 f84a 	bl	1a00278c <__malloc_unlock>
1a0026f8:	f104 000b 	add.w	r0, r4, #11
1a0026fc:	1d23      	adds	r3, r4, #4
1a0026fe:	f020 0007 	bic.w	r0, r0, #7
1a002702:	1ac2      	subs	r2, r0, r3
1a002704:	d0cc      	beq.n	1a0026a0 <_malloc_r+0x20>
1a002706:	1a1b      	subs	r3, r3, r0
1a002708:	50a3      	str	r3, [r4, r2]
1a00270a:	e7c9      	b.n	1a0026a0 <_malloc_r+0x20>
1a00270c:	4622      	mov	r2, r4
1a00270e:	6864      	ldr	r4, [r4, #4]
1a002710:	e7cc      	b.n	1a0026ac <_malloc_r+0x2c>
1a002712:	1cc4      	adds	r4, r0, #3
1a002714:	f024 0403 	bic.w	r4, r4, #3
1a002718:	42a0      	cmp	r0, r4
1a00271a:	d0e3      	beq.n	1a0026e4 <_malloc_r+0x64>
1a00271c:	1a21      	subs	r1, r4, r0
1a00271e:	4630      	mov	r0, r6
1a002720:	f7fe fd88 	bl	1a001234 <_sbrk_r>
1a002724:	3001      	adds	r0, #1
1a002726:	d1dd      	bne.n	1a0026e4 <_malloc_r+0x64>
1a002728:	e7cf      	b.n	1a0026ca <_malloc_r+0x4a>
1a00272a:	bf00      	nop
1a00272c:	1000010c 	.word	0x1000010c
1a002730:	10000110 	.word	0x10000110

1a002734 <_realloc_r>:
1a002734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002736:	4607      	mov	r7, r0
1a002738:	4614      	mov	r4, r2
1a00273a:	460e      	mov	r6, r1
1a00273c:	b921      	cbnz	r1, 1a002748 <_realloc_r+0x14>
1a00273e:	4611      	mov	r1, r2
1a002740:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
1a002744:	f7ff bf9c 	b.w	1a002680 <_malloc_r>
1a002748:	b922      	cbnz	r2, 1a002754 <_realloc_r+0x20>
1a00274a:	f7ff ff4b 	bl	1a0025e4 <_free_r>
1a00274e:	4625      	mov	r5, r4
1a002750:	4628      	mov	r0, r5
1a002752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002754:	f000 f820 	bl	1a002798 <_malloc_usable_size_r>
1a002758:	42a0      	cmp	r0, r4
1a00275a:	d20f      	bcs.n	1a00277c <_realloc_r+0x48>
1a00275c:	4621      	mov	r1, r4
1a00275e:	4638      	mov	r0, r7
1a002760:	f7ff ff8e 	bl	1a002680 <_malloc_r>
1a002764:	4605      	mov	r5, r0
1a002766:	2800      	cmp	r0, #0
1a002768:	d0f2      	beq.n	1a002750 <_realloc_r+0x1c>
1a00276a:	4631      	mov	r1, r6
1a00276c:	4622      	mov	r2, r4
1a00276e:	f7fe fef7 	bl	1a001560 <memcpy>
1a002772:	4631      	mov	r1, r6
1a002774:	4638      	mov	r0, r7
1a002776:	f7ff ff35 	bl	1a0025e4 <_free_r>
1a00277a:	e7e9      	b.n	1a002750 <_realloc_r+0x1c>
1a00277c:	4635      	mov	r5, r6
1a00277e:	e7e7      	b.n	1a002750 <_realloc_r+0x1c>

1a002780 <__malloc_lock>:
1a002780:	4801      	ldr	r0, [pc, #4]	; (1a002788 <__malloc_lock+0x8>)
1a002782:	f7ff bebf 	b.w	1a002504 <__retarget_lock_acquire_recursive>
1a002786:	bf00      	nop
1a002788:	1000011c 	.word	0x1000011c

1a00278c <__malloc_unlock>:
1a00278c:	4801      	ldr	r0, [pc, #4]	; (1a002794 <__malloc_unlock+0x8>)
1a00278e:	f7ff beba 	b.w	1a002506 <__retarget_lock_release_recursive>
1a002792:	bf00      	nop
1a002794:	1000011c 	.word	0x1000011c

1a002798 <_malloc_usable_size_r>:
1a002798:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a00279c:	1f18      	subs	r0, r3, #4
1a00279e:	2b00      	cmp	r3, #0
1a0027a0:	bfbc      	itt	lt
1a0027a2:	580b      	ldrlt	r3, [r1, r0]
1a0027a4:	18c0      	addlt	r0, r0, r3
1a0027a6:	4770      	bx	lr
1a0027a8:	444d4322 	.word	0x444d4322
1a0027ac:	00223a22 	.word	0x00223a22
1a0027b0:	22314d22 	.word	0x22314d22
1a0027b4:	0000003a 	.word	0x0000003a
1a0027b8:	22324d22 	.word	0x22324d22
1a0027bc:	0000003a 	.word	0x0000003a
1a0027c0:	444d4322 	.word	0x444d4322
1a0027c4:	25223a22 	.word	0x25223a22
1a0027c8:	225e5b33 	.word	0x225e5b33
1a0027cc:	ff00225d 	.word	0xff00225d
1a0027d0:	6f746f4d 	.word	0x6f746f4d
1a0027d4:	3a736572 	.word	0x3a736572
1a0027d8:	3d314d20 	.word	0x3d314d20
1a0027dc:	202c6425 	.word	0x202c6425
1a0027e0:	253d324d 	.word	0x253d324d
1a0027e4:	ff000a64 	.word	0xff000a64
1a0027e8:	2d554445 	.word	0x2d554445
1a0027ec:	41414943 	.word	0x41414943
1a0027f0:	766f5220 	.word	0x766f5220
1a0027f4:	43207265 	.word	0x43207265
1a0027f8:	72746e6f 	.word	0x72746e6f
1a0027fc:	656c6c6f 	.word	0x656c6c6f
1a002800:	6e492072 	.word	0x6e492072
1a002804:	61696369 	.word	0x61696369
1a002808:	617a696c 	.word	0x617a696c
1a00280c:	0a2e6f64 	.word	0x0a2e6f64
1a002810:	ffffff00 	.word	0xffffff00
1a002814:	6f727245 	.word	0x6f727245
1a002818:	43203a72 	.word	0x43203a72
1a00281c:	6e616d6f 	.word	0x6e616d6f
1a002820:	49206f64 	.word	0x49206f64
1a002824:	6c61766e 	.word	0x6c61766e
1a002828:	0a6f6469 	.word	0x0a6f6469
1a00282c:	00000000 	.word	0x00000000
1a002830:	00005746 	.word	0x00005746
1a002834:	203a4b4f 	.word	0x203a4b4f
1a002838:	000a5746 	.word	0x000a5746
1a00283c:	00005742 	.word	0x00005742
1a002840:	203a4b4f 	.word	0x203a4b4f
1a002844:	000a5742 	.word	0x000a5742
1a002848:	0000544c 	.word	0x0000544c
1a00284c:	203a4b4f 	.word	0x203a4b4f
1a002850:	000a544c 	.word	0x000a544c
1a002854:	00005452 	.word	0x00005452
1a002858:	203a4b4f 	.word	0x203a4b4f
1a00285c:	000a5452 	.word	0x000a5452
1a002860:	00005453 	.word	0x00005453
1a002864:	203a4b4f 	.word	0x203a4b4f
1a002868:	000a5453 	.word	0x000a5453
1a00286c:	6f727245 	.word	0x6f727245
1a002870:	43203a72 	.word	0x43203a72
1a002874:	6e616d6f 	.word	0x6e616d6f
1a002878:	44206f64 	.word	0x44206f64
1a00287c:	6f637365 	.word	0x6f637365
1a002880:	69636f6e 	.word	0x69636f6e
1a002884:	000a6f64 	.word	0x000a6f64

1a002888 <UART_BClock>:
1a002888:	01a201c2 01620182                       ......b.

1a002890 <UART_PClock>:
1a002890:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0028a0:	000000ff                                ....

1a0028a4 <periph_to_base>:
1a0028a4:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0028b4:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0028c4:	000100e0 01000100 01200003 00060120     .......... . ...
1a0028d4:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0028e4:	01820013 00120182 01a201a2 01c20011     ................
1a0028f4:	001001c2 01e201e2 0202000f 000e0202     ................
1a002904:	02220222 0223000d 001c0223              "."...#.#...

1a002910 <InitClkStates>:
1a002910:	00010100 00010909 0001090a 01010701     ................
1a002920:	00010902 00010906 0101090c 0001090d     ................
1a002930:	0001090e 0001090f 00010910 00010911     ................
1a002940:	00010912 00010913 00011114 00011119     ................
1a002950:	0001111a 0001111b                       ........

1a002958 <InitClkStates>:
1a002958:	00010308 00010307 01010f01              ............

1a002964 <pinmuxing>:
1a002964:	00400a02 00400b02 00400c02 00440002     ..@...@...@...D.
1a002974:	00440102 00440202 00520302 00520402     ..D...D...R...R.
1a002984:	00520509 00570609 00570206 00500001     ..R...W...W...P.
1a002994:	00500101 00500201 00500601 00f30f01     ..P...P...P.....
1a0029a4:	00f71001 00f31101 00b31201 00f01301     ................
1a0029b4:	00b31401 00b60707 00f20000 00b60100     ................

1a0029c4 <ExtRateIn>:
1a0029c4:	00000000                                ....

1a0029c8 <OscRateIn>:
1a0029c8:	00b71b00                                ....

1a0029cc <gpioLEDBits>:
1a0029cc:	0b010e00 00050c01 02050105              ............

1a0029d8 <_ctype_>:
1a0029d8:	20202000 20202020 28282020 20282828     .         ((((( 
1a0029e8:	20202020 20202020 20202020 20202020                     
1a0029f8:	10108820 10101010 10101010 10101010      ...............
1a002a08:	04040410 04040404 10040404 10101010     ................
1a002a18:	41411010 41414141 01010101 01010101     ..AAAAAA........
1a002a28:	01010101 01010101 01010101 10101010     ................
1a002a38:	42421010 42424242 02020202 02020202     ..BBBBBB........
1a002a48:	02020202 02020202 02020202 10101010     ................
1a002a58:	00000020 00000000 00000000 00000000      ...............
	...
1a002ad8:	302d2300 6800202b 65004c6c 46456766     .#-0+ .hlL.efgEF
1a002ae8:	31300047 35343332 39383736 44434241     G.0123456789ABCD
1a002af8:	30004645 34333231 38373635 63626139     EF.0123456789abc
1a002b08:	00666564 1a002b2a 1a002b2d 1a002b30     def.*+..-+..0+..
1a002b18:	61462d41 3938662d 33323130 37363534     A-Fa-f8901234567
1a002b28:	2d2b005d 00303000 ff005878              ].+-.00.xX..

1a002b34 <__sf_fake_stderr>:
	...

1a002b54 <__sf_fake_stdin>:
	...

1a002b74 <__sf_fake_stdout>:
	...
