
blinking.elf:     file format elf32-littlearm
blinking.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000de1

Program Header:
0x70000001 off    0x00003abc vaddr 0x1a002abc paddr 0x1a002abc align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x0000005c vaddr 0x1000005c paddr 0x1000005c align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-
    LOAD off    0x00001000 vaddr 0x1a000000 paddr 0x1a000000 align 2**12
         filesz 0x00002ac4 memsz 0x00002ac4 flags r-x
    LOAD off    0x00004000 vaddr 0x10000000 paddr 0x1a002ac4 align 2**12
         filesz 0x0000005c memsz 0x0000005c flags rw-
private flags = 0x5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000300  1a000000  1a000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  10000000  1a002ac4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  0000405c  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  0000405c  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  0000405c  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  0000405c  2**2
                  CONTENTS
  6 .bss          00000158  1000005c  1000005c  0000105c  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  0000405c  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  0000405c  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  0000405c  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  0000405c  2**2
                  CONTENTS
 11 .text         000027bc  1a000300  1a000300  00001300  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .ARM.exidx    00000008  1a002abc  1a002abc  00003abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  0000405c  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  0000405c  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  0000405c  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  0000405c  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  0000405c  2**2
                  CONTENTS
 18 .noinit       00000000  100001b4  100001b4  00000000  2**2
                  ALLOC
 19 .debug_info   0001495a  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00004639  00000000  00000000  000189b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000053aa  00000000  00000000  0001cfef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_aranges 00000820  00000000  00000000  000223a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_rnglists 00000663  00000000  00000000  00022bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_macro  00007991  00000000  00000000  00023223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line   0000a5cf  00000000  00000000  0002abb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_str    0001d3c6  00000000  00000000  00035183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .comment      00000026  00000000  00000000  00052549  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000032  00000000  00000000  0005256f  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00001254  00000000  00000000  000525a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_line_str 00000145  00000000  00000000  000537f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
1000005c l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a000300 l    d  .text	00000000 .text
1a002abc l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100001b4 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 impure.c
00000000 l    df *ABS*	00000000 findfp.c
1a001ad0 l     F .text	00000004 __fp_lock
1a001ad4 l     F .text	00000018 stdio_exit_handler
1a001aec l     F .text	00000040 cleanup_stdio
1a001b2c l     F .text	00000004 __fp_unlock
1a001b30 l     F .text	000000d0 global_stdio_init.part.0
00000000 l    df *ABS*	00000000 main.c
1000005c l     O .bss	00000004 tick_ct
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a00039c l     F .text	000000a8 pll_calc_divs
1a000444 l     F .text	00000106 pll_get_frac
1a00054c l     F .text	00000054 Chip_Clock_FindBaseClock
1a002978 l     O .text	0000006c periph_to_base
1a0007c4 l     F .text	00000022 Chip_Clock_GetDivRate
10000064 l     O .bss	00000008 audio_usb_pll_freq
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a00094c l     F .text	00000024 Chip_Clock_SetupMainPLL
1a0029e4 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000a80 l     F .text	0000002c Chip_UART_GetIndex
1a002a34 l     O .text	00000008 UART_PClock
1a002a2c l     O .text	00000008 UART_BClock
00000000 l    df *ABS*	00000000 board.c
1a000bdc l     F .text	00000048 Board_LED_Init
1a002a3c l     O .text	0000000c gpioLEDBits
00000000 l    df *ABS*	00000000 board_sysinit.c
1a000d24 l     F .text	00000034 Chip_SCU_SetPinMuxing
1a002a50 l     O .text	00000060 pinmuxing
1a002ab0 l     O .text	0000000c InitClkStates
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 system.c
1000006c l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 libc_a-memcpy.o
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a00141c l     F .text	0000003a __sfputc_r
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
1a001e9c l     F .text	00000048 sbrk_aligned
00000000 l    df *ABS*	00000000 freer.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 libc_a-memchr.o
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 reallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 msizer.c
1a002910 g     F .text	00000010 _malloc_usable_size_r
1a0005ec g     F .text	0000001c Chip_Clock_GetDividerSource
1a000e80 g     F .text	00000012 _isatty_r
1a00018a  w    F .text	00000002 TIMER2_IRQHandler
1a000e92 g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a00018a  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00018a  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a00018a  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a00018a  w    F .text	00000002 I2C0_IRQHandler
1a0013f4 g     F .text	00000028 printf
1a0028e4 g     F .text	00000022 __sseek
1a001ca4 g     F .text	00000020 __sinit
1a001730 g     F .text	00000086 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a002764 g     F .text	00000002 __malloc_unlock
1a000300 g     F .text	00000010 SysTick_Handler
1a00018a  w    F .text	00000002 SDIO_IRQHandler
1a000c74 g     F .text	0000001c Board_UARTGetChar
1a00018a  w    F .text	00000002 ATIMER_IRQHandler
1a0020a0 g     F .text	000000fe memmove
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a002ac4 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00018a  w    F .text	00000002 I2C1_IRQHandler
1a00018a  w    F .text	00000002 UART1_IRQHandler
1a00018a  w    F .text	00000002 GPIO5_IRQHandler
1a00018a  w    F .text	00000002 CAN1_IRQHandler
100001a8 g     O .bss	00000004 __stdio_exit_handler
1a000e76 g     F .text	0000000a _fstat_r
1a0028a0 g     F .text	00000004 __seofread
1a002ac4 g       .ARM.exidx	00000000 _etext
1a00018a  w    F .text	00000002 USB1_IRQHandler
1a00018a  w    F .text	00000002 I2S0_IRQHandler
1a00018a  w    F .text	00000002 TIMER3_IRQHandler
1a00086c g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a00018a  w    F .text	00000002 UART0_IRQHandler
1a0001aa g     F .text	00000012 bss_init
1a0012a0 g     F .text	00000134 memcpy
1a00018a  w    F .text	00000002 SGPIO_IRQHandler
1a000f0c g     F .text	00000000 .hidden __aeabi_uldivmod
100001b4 g       .noinit	00000000 _noinit
10000060 g     O .bss	00000004 SystemCoreClock
1a000aac g     F .text	00000054 Chip_UART_Init
1a00018a  w    F .text	00000002 ADC0_IRQHandler
1a0013d4 g     F .text	0000001e _printf_r
1a000180  w    F .text	00000002 UsageFault_Handler
1a0008b4 g     F .text	0000004c Chip_Clock_GetRate
1a00018a  w    F .text	00000002 GPIO6_IRQHandler
1a000d68 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a0017d0 g     F .text	00000300 __sfvwrite_r
1a000f3c g     F .text	000002bc .hidden __udivmoddi4
1a000ec4 g     F .text	00000020 _sbrk_r
1a002a4c g     O .text	00000004 ExtRateIn
1a00018a  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000e9c g     F .text	00000028 _read_r
1a00018a  w    F .text	00000002 GPIO1_IRQHandler
1a001e50 g     F .text	0000004c fflush
1a00018a  w    F .text	00000002 SSP0_IRQHandler
1a002abc g       .text	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a002354 g     F .text	00000064 _realloc_r
1a00018a  w    F .text	00000002 ADC1_IRQHandler
1a001ccc g     F .text	00000014 __fp_lock_all
1a000cfc g     F .text	00000028 Board_Init
1a000114 g       .text	00000000 __data_section_table
1a00018a  w    F .text	00000002 RTC_IRQHandler
100001b4 g       .bss	00000000 _ebss
1a00018a  w    F .text	00000002 TIMER0_IRQHandler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00018a  w    F .text	00000002 SPI_IRQHandler
1a00018a  w    F .text	00000002 LCD_IRQHandler
1a0005a0 g     F .text	0000004c Chip_Clock_EnableCrystal
10000070 g     O .bss	00000138 __sf
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018c g     F .text	0000001e data_init
1a00018a  w    F .text	00000002 TIMER1_IRQHandler
1a00018a  w    F .text	00000002 UART2_IRQHandler
1a00075c g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a001458 g     F .text	0000002e __sfputs_r
1a00018a  w    F .text	00000002 GPIO2_IRQHandler
1a001cc4 g     F .text	00000002 __sfp_lock_acquire
1a0021f0 g     F .text	00000000 memchr
1a001fe4 g     F .text	000000bc _free_r
1a000844 g     F .text	00000028 Chip_Clock_GetBaseClock
1000005c g       .bss	00000000 _bss
1a00018a  w    F .text	00000002 I2S1_IRQHandler
1a000948 g     F .text	00000002 Chip_GPIO_Init
1a002a48 g     O .text	00000004 OscRateIn
100001b4 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0013d4 g     F .text	0000001e _iprintf_r
1a00018a  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a000e6c g     F .text	0000000a _close_r
1a002290 g     F .text	000000c4 __swsetup_r
1a0011f8  w    F .text	00000002 .hidden __aeabi_ldiv0
1a001c00 g     F .text	000000a4 __sfp
1a00287c g     F .text	00000022 __sread
1a00018a  w    F .text	00000002 USB0_IRQHandler
1a00018a  w    F .text	00000002 GPIO3_IRQHandler
1a002760 g     F .text	00000002 __malloc_lock
1a000c60 g     F .text	00000014 Board_UARTPutChar
1a00018a  w    F .text	00000002 SCT_IRQHandler
1a001e18 g     F .text	00000036 _fflush_r
1a000608 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0011fc g     F .text	000000a2 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000328 g     F .text	00000060 main
1a0017b8 g     F .text	00000018 __swbuf
1a00018a  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a002908 g     F .text	00000008 __sclose
1a000ce4 g     F .text	00000016 Board_LED_Toggle
1a001ee4 g     F .text	00000100 _malloc_r
1a00018a  w    F .text	00000002 GPIO7_IRQHandler
1a000878 g     F .text	0000003c Chip_Clock_EnableOpts
1a000624 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000900 g     F .text	00000048 fpuInit
1a000cb8 g     F .text	0000002c Board_LED_Test
1a0006dc g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a001714 g     F .text	0000001c vfiprintf
1a000e60 g     F .text	0000000c SystemInit
1a00018a  w    F .text	00000002 SPIFI_IRQHandler
1a000310 g     F .text	00000018 delay
1a00018a  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0013f4 g     F .text	00000028 iprintf
1a000d58 g     F .text	00000010 Board_SetupMuxing
1a000b00 g     F .text	000000dc Chip_UART_SetBaudFDR
1a000ee4 g     F .text	00000028 _write_r
1a00018a  w    F .text	00000002 ETH_IRQHandler
1a0023b8 g     F .text	00000122 _printf_common
10000000 g     O .data	00000004 _impure_ptr
1a001cf4 g     F .text	00000124 __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a0021a0 g     F .text	00000044 _fwalk_sglue
1a00018a  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a001ce0 g     F .text	00000014 __fp_unlock_all
100001b4 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a00018a  w    F .text	00000002 GINT0_IRQHandler
1a00282c g     F .text	0000004e __swhatbuf_r
1a00018a  w    F .text	00000002 DAC_IRQHandler
1a000c38 g     F .text	00000028 Board_Debug_Init
10000050 g     O .data	0000000c __sglue
1000005c g       .data	00000000 _edata
1a00018a  w    F .text	00000002 M0SUB_IRQHandler
1a000970 g     F .text	00000110 Chip_SetupCoreClock
1a0028a4 g     F .text	0000003e __swrite
1a00018a  w    F .text	00000002 GPIO0_IRQHandler
1a0014a8 g     F .text	0000026c _vfiprintf_r
1a000000 g     O .text	00000114 g_pfnVectors
1a000de0 g     F .text	00000080 ResetISR
1a000388 g     F .text	00000014 SystemCoreClockUpdate
10000004 g     O .data	0000004c _impure_data
1a00018a  w    F .text	00000002 DMA_IRQHandler
1a00018a  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001cc8 g     F .text	00000002 __sfp_lock_release
1a0011f8  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a002768 g     F .text	000000c4 __smakebuf_r
1a0024dc g     F .text	00000284 _printf_i
1a00018a  w    F .text	00000002 UART3_IRQHandler
100001ac g     O .bss	00000004 __malloc_sbrk_start
1a00018a  w    F .text	00000002 MCPWM_IRQHandler
1a001488 g     F .text	0000001e __sprint_r
1a000c90 g     F .text	00000028 Board_LED_Set
1a00018a  w    F .text	00000002 M0APP_IRQHandler
100001b0 g     O .bss	00000004 __malloc_free_list
1a0014a8 g     F .text	0000026c _vfprintf_r
1a00018a  w    F .text	00000002 GINT1_IRQHandler
1a000c24 g     F .text	00000014 Board_UART_Init
1a0007e8 g     F .text	0000005c Chip_Clock_SetBaseClock
1a001714 g     F .text	0000001c vfprintf
1a00018a  w    F .text	00000002 GPIO4_IRQHandler
1a000dd4 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 e1 0d 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 00 00 00 00     }...............
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	01 03 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00004c:	00 00 00 00 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00005c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00006c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00007c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00008c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a00009c:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ac:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000bc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000cc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000dc:	8b 01 00 1a 8b 01 00 1a 8b 01 00 1a 8b 01 00 1a     ................
1a0000ec:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a0000fc:	8b 01 00 1a 00 00 00 00 8b 01 00 1a 8b 01 00 1a     ................
1a00010c:	8b 01 00 1a 8b 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a002ac4 	.word	0x1a002ac4
1a000118:	10000000 	.word	0x10000000
1a00011c:	0000005c 	.word	0x0000005c
1a000120:	1a002ac4 	.word	0x1a002ac4
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002ac4 	.word	0x1a002ac4
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002ac4 	.word	0x1a002ac4
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002ac4 	.word	0x1a002ac4
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	1000005c 	.word	0x1000005c
1a000154:	00000158 	.word	0x00000158
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
// Default exception handlers. Override the ones here by defining your own
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <ADC0_IRQHandler>:
// handler is not present in the application code.
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
1a00018a:	e7fe      	b.n	1a00018a <ADC0_IRQHandler>

1a00018c <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018c:	2300      	movs	r3, #0
1a00018e:	4293      	cmp	r3, r2
1a000190:	d20a      	bcs.n	1a0001a8 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000192:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000194:	f850 4b04 	ldr.w	r4, [r0], #4
1a000198:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	3304      	adds	r3, #4
1a00019e:	4293      	cmp	r3, r2
1a0001a0:	d3f8      	bcc.n	1a000194 <data_init+0x8>
}
1a0001a2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a6:	4770      	bx	lr
1a0001a8:	4770      	bx	lr

1a0001aa <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	2300      	movs	r3, #0
1a0001ac:	e003      	b.n	1a0001b6 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ae:	2200      	movs	r2, #0
1a0001b0:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	3304      	adds	r3, #4
1a0001b6:	428b      	cmp	r3, r1
1a0001b8:	d3f9      	bcc.n	1a0001ae <bss_init+0x4>
}
1a0001ba:	4770      	bx	lr
1a0001bc:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			@ <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

Disassembly of section .text:

1a000300 <SysTick_Handler>:
#define TICKRATE_HZ (1000)

static volatile uint32_t tick_ct = 0;

void SysTick_Handler(void) {
   tick_ct++;
1a000300:	4a02      	ldr	r2, [pc, #8]	@ (1a00030c <SysTick_Handler+0xc>)
1a000302:	6813      	ldr	r3, [r2, #0]
1a000304:	3301      	adds	r3, #1
1a000306:	6013      	str	r3, [r2, #0]
}
1a000308:	4770      	bx	lr
1a00030a:	bf00      	nop
1a00030c:	1000005c 	.word	0x1000005c

1a000310 <delay>:

void delay(uint32_t tk) {
   uint32_t end = tick_ct + tk;
1a000310:	4b04      	ldr	r3, [pc, #16]	@ (1a000324 <delay+0x14>)
1a000312:	681b      	ldr	r3, [r3, #0]
1a000314:	4418      	add	r0, r3
   while(tick_ct < end)
1a000316:	e000      	b.n	1a00031a <delay+0xa>
    Wait For Interrupt is a hint instruction that suspends execution
    until one of a number of events occurs.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
{
  __ASM volatile ("wfi");
1a000318:	bf30      	wfi
1a00031a:	4b02      	ldr	r3, [pc, #8]	@ (1a000324 <delay+0x14>)
1a00031c:	681b      	ldr	r3, [r3, #0]
1a00031e:	4283      	cmp	r3, r0
1a000320:	d3fa      	bcc.n	1a000318 <delay+0x8>
       __WFI();
}
1a000322:	4770      	bx	lr
1a000324:	1000005c 	.word	0x1000005c

1a000328 <main>:

int main(void) {
1a000328:	b508      	push	{r3, lr}
   SystemCoreClockUpdate();
1a00032a:	f000 f82d 	bl	1a000388 <SystemCoreClockUpdate>
   Board_Init();
1a00032e:	f000 fce5 	bl	1a000cfc <Board_Init>
   SysTick_Config(SystemCoreClock / TICKRATE_HZ);
1a000332:	4b10      	ldr	r3, [pc, #64]	@ (1a000374 <main+0x4c>)
1a000334:	681b      	ldr	r3, [r3, #0]
1a000336:	4a10      	ldr	r2, [pc, #64]	@ (1a000378 <main+0x50>)
1a000338:	fba2 2303 	umull	r2, r3, r2, r3
1a00033c:	099b      	lsrs	r3, r3, #6
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a00033e:	3b01      	subs	r3, #1
1a000340:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
1a000344:	d20a      	bcs.n	1a00035c <main+0x34>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a000346:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
1a00034a:	6153      	str	r3, [r2, #20]
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a00034c:	4b0b      	ldr	r3, [pc, #44]	@ (1a00037c <main+0x54>)
1a00034e:	21e0      	movs	r1, #224	@ 0xe0
1a000350:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a000354:	2300      	movs	r3, #0
1a000356:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a000358:	2307      	movs	r3, #7
1a00035a:	6113      	str	r3, [r2, #16]

   while (1) {
       Board_LED_Toggle(LED_3);
1a00035c:	2002      	movs	r0, #2
1a00035e:	f000 fcc1 	bl	1a000ce4 <Board_LED_Toggle>
       delay(100);
1a000362:	2064      	movs	r0, #100	@ 0x64
1a000364:	f7ff ffd4 	bl	1a000310 <delay>
       printf("Hola mundo at %d\r\n", tick_ct);
1a000368:	4b05      	ldr	r3, [pc, #20]	@ (1a000380 <main+0x58>)
1a00036a:	6819      	ldr	r1, [r3, #0]
1a00036c:	4805      	ldr	r0, [pc, #20]	@ (1a000384 <main+0x5c>)
1a00036e:	f001 f841 	bl	1a0013f4 <iprintf>
   while (1) {
1a000372:	e7f3      	b.n	1a00035c <main+0x34>
1a000374:	10000060 	.word	0x10000060
1a000378:	10624dd3 	.word	0x10624dd3
1a00037c:	e000ed00 	.word	0xe000ed00
1a000380:	1000005c 	.word	0x1000005c
1a000384:	1a002920 	.word	0x1a002920

1a000388 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000388:	b508      	push	{r3, lr}
   /* CPU core speed */
   SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00038a:	2069      	movs	r0, #105	@ 0x69
1a00038c:	f000 fa92 	bl	1a0008b4 <Chip_Clock_GetRate>
1a000390:	4b01      	ldr	r3, [pc, #4]	@ (1a000398 <SystemCoreClockUpdate+0x10>)
1a000392:	6018      	str	r0, [r3, #0]
}
1a000394:	bd08      	pop	{r3, pc}
1a000396:	bf00      	nop
1a000398:	10000060 	.word	0x10000060

1a00039c <pll_calc_divs>:
       return -val;
   return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00039c:	b570      	push	{r4, r5, r6, lr}
1a00039e:	4686      	mov	lr, r0

   uint32_t prev = freq;
   int n, m, p;

   /* When direct mode is set FBSEL should be a don't care */
   if (ppll->ctrl & (1 << 7)) {
1a0003a0:	680b      	ldr	r3, [r1, #0]
1a0003a2:	f013 0f80 	tst.w	r3, #128	@ 0x80
1a0003a6:	d002      	beq.n	1a0003ae <pll_calc_divs+0x12>
       ppll->ctrl &= ~(1 << 6);
1a0003a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
1a0003ac:	600b      	str	r3, [r1, #0]
   }
   for (n = 1; n <= 4; n++) {
       for (p = 0; p < 4; p ++) {
1a0003ae:	4675      	mov	r5, lr
1a0003b0:	2401      	movs	r4, #1
1a0003b2:	e03c      	b.n	1a00042e <pll_calc_divs+0x92>
           for (m = 1; m <= 256; m++) {
               uint32_t fcco, fout;
               if (ppll->ctrl & (1 << 6)) {
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
               } else {
                   fcco = (m * ppll->fin) / n;
1a0003b4:	694b      	ldr	r3, [r1, #20]
1a0003b6:	fb02 f303 	mul.w	r3, r2, r3
1a0003ba:	fbb3 f3f4 	udiv	r3, r3, r4
1a0003be:	e01e      	b.n	1a0003fe <pll_calc_divs+0x62>
               }
               if (fcco < PLL_MIN_CCO_FREQ) continue;
               if (fcco > PLL_MAX_CCO_FREQ) break;
               if (ppll->ctrl & (1 << 7)) {
                   fout = fcco;
1a0003c0:	4618      	mov	r0, r3
   if (val < 0)
1a0003c2:	ebbe 0600 	subs.w	r6, lr, r0
1a0003c6:	d428      	bmi.n	1a00041a <pll_calc_divs+0x7e>
               } else {
                   fout = fcco >> (p + 1);
               }

               if (ABS(freq - fout) < prev) {
1a0003c8:	42b5      	cmp	r5, r6
1a0003ca:	d907      	bls.n	1a0003dc <pll_calc_divs+0x40>
                   ppll->nsel = n;
1a0003cc:	608c      	str	r4, [r1, #8]
                   ppll->psel = p + 1;
1a0003ce:	f10c 0501 	add.w	r5, ip, #1
1a0003d2:	60cd      	str	r5, [r1, #12]
                   ppll->msel = m;
1a0003d4:	610a      	str	r2, [r1, #16]
                   ppll->fout = fout;
1a0003d6:	6188      	str	r0, [r1, #24]
                   ppll->fcco = fcco;
1a0003d8:	61cb      	str	r3, [r1, #28]
                   prev = ABS(freq - fout);
1a0003da:	4635      	mov	r5, r6
           for (m = 1; m <= 256; m++) {
1a0003dc:	3201      	adds	r2, #1
1a0003de:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
1a0003e2:	dc1c      	bgt.n	1a00041e <pll_calc_divs+0x82>
               if (ppll->ctrl & (1 << 6)) {
1a0003e4:	680e      	ldr	r6, [r1, #0]
1a0003e6:	f016 0f40 	tst.w	r6, #64	@ 0x40
1a0003ea:	d0e3      	beq.n	1a0003b4 <pll_calc_divs+0x18>
                   fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0003ec:	f10c 0301 	add.w	r3, ip, #1
1a0003f0:	fa02 f303 	lsl.w	r3, r2, r3
1a0003f4:	6948      	ldr	r0, [r1, #20]
1a0003f6:	fb00 f303 	mul.w	r3, r0, r3
1a0003fa:	fbb3 f3f4 	udiv	r3, r3, r4
               if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0003fe:	480f      	ldr	r0, [pc, #60]	@ (1a00043c <pll_calc_divs+0xa0>)
1a000400:	4283      	cmp	r3, r0
1a000402:	d9eb      	bls.n	1a0003dc <pll_calc_divs+0x40>
               if (fcco > PLL_MAX_CCO_FREQ) break;
1a000404:	480e      	ldr	r0, [pc, #56]	@ (1a000440 <pll_calc_divs+0xa4>)
1a000406:	4283      	cmp	r3, r0
1a000408:	d809      	bhi.n	1a00041e <pll_calc_divs+0x82>
               if (ppll->ctrl & (1 << 7)) {
1a00040a:	f016 0f80 	tst.w	r6, #128	@ 0x80
1a00040e:	d1d7      	bne.n	1a0003c0 <pll_calc_divs+0x24>
                   fout = fcco >> (p + 1);
1a000410:	f10c 0001 	add.w	r0, ip, #1
1a000414:	fa23 f000 	lsr.w	r0, r3, r0
1a000418:	e7d3      	b.n	1a0003c2 <pll_calc_divs+0x26>
       return -val;
1a00041a:	4276      	negs	r6, r6
1a00041c:	e7d4      	b.n	1a0003c8 <pll_calc_divs+0x2c>
       for (p = 0; p < 4; p ++) {
1a00041e:	f10c 0c01 	add.w	ip, ip, #1
1a000422:	f1bc 0f03 	cmp.w	ip, #3
1a000426:	dc01      	bgt.n	1a00042c <pll_calc_divs+0x90>
           for (m = 1; m <= 256; m++) {
1a000428:	2201      	movs	r2, #1
1a00042a:	e7d8      	b.n	1a0003de <pll_calc_divs+0x42>
   for (n = 1; n <= 4; n++) {
1a00042c:	3401      	adds	r4, #1
1a00042e:	2c04      	cmp	r4, #4
1a000430:	dc02      	bgt.n	1a000438 <pll_calc_divs+0x9c>
       for (p = 0; p < 4; p ++) {
1a000432:	f04f 0c00 	mov.w	ip, #0
1a000436:	e7f4      	b.n	1a000422 <pll_calc_divs+0x86>
               }
           }
       }
   }
}
1a000438:	bd70      	pop	{r4, r5, r6, pc}
1a00043a:	bf00      	nop
1a00043c:	094c5eff 	.word	0x094c5eff
1a000440:	1312d000 	.word	0x1312d000

1a000444 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000444:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000446:	b09d      	sub	sp, #116	@ 0x74
1a000448:	4605      	mov	r5, r0
1a00044a:	460c      	mov	r4, r1
   int diff[3];
   PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a00044c:	2260      	movs	r2, #96	@ 0x60
1a00044e:	2100      	movs	r1, #0
1a000450:	a801      	add	r0, sp, #4
1a000452:	f000 fed3 	bl	1a0011fc <memset>

   /* Try direct mode */
   pll[0].ctrl |= (1 << 7);
1a000456:	2380      	movs	r3, #128	@ 0x80
1a000458:	9301      	str	r3, [sp, #4]
   pll[0].fin = ppll->fin;
1a00045a:	6963      	ldr	r3, [r4, #20]
1a00045c:	9306      	str	r3, [sp, #24]
   pll[0].srcin = ppll->srcin;
1a00045e:	7923      	ldrb	r3, [r4, #4]
1a000460:	f88d 3008 	strb.w	r3, [sp, #8]
   pll_calc_divs(freq, &pll[0]);
1a000464:	a901      	add	r1, sp, #4
1a000466:	4628      	mov	r0, r5
1a000468:	f7ff ff98 	bl	1a00039c <pll_calc_divs>
   if (pll[0].fout == freq) {
1a00046c:	9b07      	ldr	r3, [sp, #28]
1a00046e:	42ab      	cmp	r3, r5
1a000470:	d032      	beq.n	1a0004d8 <pll_get_frac+0x94>
   if (val < 0)
1a000472:	1aeb      	subs	r3, r5, r3
1a000474:	d439      	bmi.n	1a0004ea <pll_get_frac+0xa6>
       *ppll = pll[0];
       return ;
   }
   diff[0] = ABS(freq - pll[0].fout);
1a000476:	461e      	mov	r6, r3
1a000478:	9319      	str	r3, [sp, #100]	@ 0x64

   /* Try non-Integer mode */
   pll[2].ctrl = (1 << 6);
1a00047a:	2340      	movs	r3, #64	@ 0x40
1a00047c:	9311      	str	r3, [sp, #68]	@ 0x44
   pll[2].fin = ppll->fin;
1a00047e:	6963      	ldr	r3, [r4, #20]
1a000480:	9316      	str	r3, [sp, #88]	@ 0x58
   pll[2].srcin = ppll->srcin;
1a000482:	7923      	ldrb	r3, [r4, #4]
1a000484:	f88d 3048 	strb.w	r3, [sp, #72]	@ 0x48
   pll_calc_divs(freq, &pll[2]);
1a000488:	a911      	add	r1, sp, #68	@ 0x44
1a00048a:	4628      	mov	r0, r5
1a00048c:	f7ff ff86 	bl	1a00039c <pll_calc_divs>
   if (pll[2].fout == freq) {
1a000490:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
1a000492:	42ab      	cmp	r3, r5
1a000494:	d02b      	beq.n	1a0004ee <pll_get_frac+0xaa>
   if (val < 0)
1a000496:	1aeb      	subs	r3, r5, r3
1a000498:	d431      	bmi.n	1a0004fe <pll_get_frac+0xba>
       *ppll = pll[2];
       return ;
   }

   diff[2] = ABS(freq - pll[2].fout);
1a00049a:	461f      	mov	r7, r3
1a00049c:	931b      	str	r3, [sp, #108]	@ 0x6c
   /* Try integer mode */
   pll[1].ctrl = (1 << 6);
1a00049e:	2340      	movs	r3, #64	@ 0x40
1a0004a0:	9309      	str	r3, [sp, #36]	@ 0x24
   pll[1].fin = ppll->fin;
1a0004a2:	6963      	ldr	r3, [r4, #20]
1a0004a4:	930e      	str	r3, [sp, #56]	@ 0x38
   pll[1].srcin = ppll->srcin;
1a0004a6:	7923      	ldrb	r3, [r4, #4]
1a0004a8:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
   pll_calc_divs(freq, &pll[1]);
1a0004ac:	a909      	add	r1, sp, #36	@ 0x24
1a0004ae:	4628      	mov	r0, r5
1a0004b0:	f7ff ff74 	bl	1a00039c <pll_calc_divs>
   if (pll[1].fout == freq) {
1a0004b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
1a0004b6:	42ab      	cmp	r3, r5
1a0004b8:	d023      	beq.n	1a000502 <pll_get_frac+0xbe>
   if (val < 0)
1a0004ba:	1aed      	subs	r5, r5, r3
1a0004bc:	d429      	bmi.n	1a000512 <pll_get_frac+0xce>
       *ppll = pll[1];
       return ;
   }
   diff[1] = ABS(freq - pll[1].fout);
1a0004be:	951a      	str	r5, [sp, #104]	@ 0x68

   /* Find the min of 3 and return */
   if (diff[0] <= diff[1]) {
1a0004c0:	42ae      	cmp	r6, r5
1a0004c2:	dc30      	bgt.n	1a000526 <pll_get_frac+0xe2>
       if (diff[0] <= diff[2]) {
1a0004c4:	42be      	cmp	r6, r7
1a0004c6:	dc26      	bgt.n	1a000516 <pll_get_frac+0xd2>
           *ppll = pll[0];
1a0004c8:	ad01      	add	r5, sp, #4
1a0004ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0004cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0004ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0004d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0004d6:	e006      	b.n	1a0004e6 <pll_get_frac+0xa2>
       *ppll = pll[0];
1a0004d8:	ad01      	add	r5, sp, #4
1a0004da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0004dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0004de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0004e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
           *ppll = pll[1];
       } else {
           *ppll = pll[2];
       }
   }
}
1a0004e6:	b01d      	add	sp, #116	@ 0x74
1a0004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
       return -val;
1a0004ea:	425b      	negs	r3, r3
1a0004ec:	e7c3      	b.n	1a000476 <pll_get_frac+0x32>
       *ppll = pll[2];
1a0004ee:	ad11      	add	r5, sp, #68	@ 0x44
1a0004f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0004f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0004f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0004f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a0004fc:	e7f3      	b.n	1a0004e6 <pll_get_frac+0xa2>
       return -val;
1a0004fe:	425b      	negs	r3, r3
1a000500:	e7cb      	b.n	1a00049a <pll_get_frac+0x56>
       *ppll = pll[1];
1a000502:	ad09      	add	r5, sp, #36	@ 0x24
1a000504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000508:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00050c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
       return ;
1a000510:	e7e9      	b.n	1a0004e6 <pll_get_frac+0xa2>
       return -val;
1a000512:	426d      	negs	r5, r5
1a000514:	e7d3      	b.n	1a0004be <pll_get_frac+0x7a>
           *ppll = pll[2];
1a000516:	ad11      	add	r5, sp, #68	@ 0x44
1a000518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00051a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a00051c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000520:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000524:	e7df      	b.n	1a0004e6 <pll_get_frac+0xa2>
       if (diff[1] <= diff[2]) {
1a000526:	42af      	cmp	r7, r5
1a000528:	db07      	blt.n	1a00053a <pll_get_frac+0xf6>
           *ppll = pll[1];
1a00052a:	ad09      	add	r5, sp, #36	@ 0x24
1a00052c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00052e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000530:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000534:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000538:	e7d5      	b.n	1a0004e6 <pll_get_frac+0xa2>
           *ppll = pll[2];
1a00053a:	ad11      	add	r5, sp, #68	@ 0x44
1a00053c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00053e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000540:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000544:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000548:	e7cd      	b.n	1a0004e6 <pll_get_frac+0xa2>
	...

1a00054c <Chip_Clock_FindBaseClock>:
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a00054c:	4684      	mov	ip, r0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
   int i = 0;
1a00054e:	2300      	movs	r3, #0
   CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000550:	201c      	movs	r0, #28

   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000552:	281c      	cmp	r0, #28
1a000554:	d120      	bne.n	1a000598 <Chip_Clock_FindBaseClock+0x4c>
{
1a000556:	b410      	push	{r4}
1a000558:	e002      	b.n	1a000560 <Chip_Clock_FindBaseClock+0x14>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
           baseclk = periph_to_base[i].clkbase;
       }
       else {
           i++;
1a00055a:	3301      	adds	r3, #1
   while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00055c:	281c      	cmp	r0, #28
1a00055e:	d118      	bne.n	1a000592 <Chip_Clock_FindBaseClock+0x46>
1a000560:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000564:	4a0d      	ldr	r2, [pc, #52]	@ (1a00059c <Chip_Clock_FindBaseClock+0x50>)
1a000566:	eb02 0241 	add.w	r2, r2, r1, lsl #1
1a00056a:	7911      	ldrb	r1, [r2, #4]
1a00056c:	4281      	cmp	r1, r0
1a00056e:	d010      	beq.n	1a000592 <Chip_Clock_FindBaseClock+0x46>
       if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000570:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000574:	4c09      	ldr	r4, [pc, #36]	@ (1a00059c <Chip_Clock_FindBaseClock+0x50>)
1a000576:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
1a00057a:	4562      	cmp	r2, ip
1a00057c:	d8ed      	bhi.n	1a00055a <Chip_Clock_FindBaseClock+0xe>
1a00057e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
1a000582:	4a06      	ldr	r2, [pc, #24]	@ (1a00059c <Chip_Clock_FindBaseClock+0x50>)
1a000584:	eb02 0244 	add.w	r2, r2, r4, lsl #1
1a000588:	8852      	ldrh	r2, [r2, #2]
1a00058a:	4562      	cmp	r2, ip
1a00058c:	d3e5      	bcc.n	1a00055a <Chip_Clock_FindBaseClock+0xe>
           baseclk = periph_to_base[i].clkbase;
1a00058e:	4608      	mov	r0, r1
1a000590:	e7e4      	b.n	1a00055c <Chip_Clock_FindBaseClock+0x10>
       }
   }

   return baseclk;
}
1a000592:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000596:	4770      	bx	lr
1a000598:	4770      	bx	lr
1a00059a:	bf00      	nop
1a00059c:	1a002978 	.word	0x1a002978

1a0005a0 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0005a0:	b082      	sub	sp, #8
   volatile uint32_t delay = 1000;
1a0005a2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
1a0005a6:	9301      	str	r3, [sp, #4]

   uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0005a8:	4a0d      	ldr	r2, [pc, #52]	@ (1a0005e0 <Chip_Clock_EnableCrystal+0x40>)
1a0005aa:	6993      	ldr	r3, [r2, #24]

   /* Clear bypass mode */
   OldCrystalConfig &= (~2);
1a0005ac:	f023 0102 	bic.w	r1, r3, #2
   if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0005b0:	6992      	ldr	r2, [r2, #24]
1a0005b2:	428a      	cmp	r2, r1
1a0005b4:	d001      	beq.n	1a0005ba <Chip_Clock_EnableCrystal+0x1a>
       LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0005b6:	4a0a      	ldr	r2, [pc, #40]	@ (1a0005e0 <Chip_Clock_EnableCrystal+0x40>)
1a0005b8:	6191      	str	r1, [r2, #24]
   }

   /* Enable crystal oscillator */
   OldCrystalConfig &= (~1);
1a0005ba:	f023 0303 	bic.w	r3, r3, #3
   if (OscRateIn >= 20000000) {
1a0005be:	4a09      	ldr	r2, [pc, #36]	@ (1a0005e4 <Chip_Clock_EnableCrystal+0x44>)
1a0005c0:	6811      	ldr	r1, [r2, #0]
1a0005c2:	4a09      	ldr	r2, [pc, #36]	@ (1a0005e8 <Chip_Clock_EnableCrystal+0x48>)
1a0005c4:	4291      	cmp	r1, r2
1a0005c6:	d901      	bls.n	1a0005cc <Chip_Clock_EnableCrystal+0x2c>
       OldCrystalConfig |= 4;  /* Set high frequency mode */
1a0005c8:	f043 0304 	orr.w	r3, r3, #4

   }
   LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0005cc:	4a04      	ldr	r2, [pc, #16]	@ (1a0005e0 <Chip_Clock_EnableCrystal+0x40>)
1a0005ce:	6193      	str	r3, [r2, #24]

   /* Delay for 250uSec */
   while(delay--) {}
1a0005d0:	9b01      	ldr	r3, [sp, #4]
1a0005d2:	1e5a      	subs	r2, r3, #1
1a0005d4:	9201      	str	r2, [sp, #4]
1a0005d6:	2b00      	cmp	r3, #0
1a0005d8:	d1fa      	bne.n	1a0005d0 <Chip_Clock_EnableCrystal+0x30>
}
1a0005da:	b002      	add	sp, #8
1a0005dc:	4770      	bx	lr
1a0005de:	bf00      	nop
1a0005e0:	40050000 	.word	0x40050000
1a0005e4:	1a002a48 	.word	0x1a002a48
1a0005e8:	01312cff 	.word	0x01312cff

1a0005ec <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
   uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0005ec:	3012      	adds	r0, #18
1a0005ee:	4b05      	ldr	r3, [pc, #20]	@ (1a000604 <Chip_Clock_GetDividerSource+0x18>)
1a0005f0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

   if (reg & 1) {  /* divider is powered down */
1a0005f4:	f010 0f01 	tst.w	r0, #1
1a0005f8:	d102      	bne.n	1a000600 <Chip_Clock_GetDividerSource+0x14>
       return CLKINPUT_PD;
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0005fa:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0005fe:	4770      	bx	lr
       return CLKINPUT_PD;
1a000600:	2011      	movs	r0, #17
}
1a000602:	4770      	bx	lr
1a000604:	40050000 	.word	0x40050000

1a000608 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
   return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000608:	f100 0212 	add.w	r2, r0, #18
1a00060c:	4b03      	ldr	r3, [pc, #12]	@ (1a00061c <Chip_Clock_GetDividerDivisor+0x14>)
1a00060e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000612:	4b03      	ldr	r3, [pc, #12]	@ (1a000620 <Chip_Clock_GetDividerDivisor+0x18>)
1a000614:	5c18      	ldrb	r0, [r3, r0]
}
1a000616:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00061a:	4770      	bx	lr
1a00061c:	40050000 	.word	0x40050000
1a000620:	1a002934 	.word	0x1a002934

1a000624 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000624:	b508      	push	{r3, lr}
   uint32_t rate = 0;

   switch (input) {
1a000626:	2810      	cmp	r0, #16
1a000628:	d80a      	bhi.n	1a000640 <Chip_Clock_GetClockInputHz+0x1c>
1a00062a:	e8df f000 	tbb	[pc, r0]
1a00062e:	0b44      	.short	0x0b44
1a000630:	0921180d 	.word	0x0921180d
1a000634:	2d2a2724 	.word	0x2d2a2724
1a000638:	34300909 	.word	0x34300909
1a00063c:	3c38      	.short	0x3c38
1a00063e:	40          	.byte	0x40
1a00063f:	00          	.byte	0x00
1a000640:	2000      	movs	r0, #0
   default:
       break;
   }

   return rate;
}
1a000642:	bd08      	pop	{r3, pc}
       rate = CGU_IRC_FREQ;
1a000644:	481e      	ldr	r0, [pc, #120]	@ (1a0006c0 <Chip_Clock_GetClockInputHz+0x9c>)
       break;
1a000646:	e7fc      	b.n	1a000642 <Chip_Clock_GetClockInputHz+0x1e>
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000648:	4b1e      	ldr	r3, [pc, #120]	@ (1a0006c4 <Chip_Clock_GetClockInputHz+0xa0>)
1a00064a:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
1a00064e:	f003 0307 	and.w	r3, r3, #7
1a000652:	2b04      	cmp	r3, #4
1a000654:	d001      	beq.n	1a00065a <Chip_Clock_GetClockInputHz+0x36>
           rate = 25000000;
1a000656:	481c      	ldr	r0, [pc, #112]	@ (1a0006c8 <Chip_Clock_GetClockInputHz+0xa4>)
1a000658:	e7f3      	b.n	1a000642 <Chip_Clock_GetClockInputHz+0x1e>
   uint32_t rate = 0;
1a00065a:	2000      	movs	r0, #0
1a00065c:	e7f1      	b.n	1a000642 <Chip_Clock_GetClockInputHz+0x1e>
       if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00065e:	4b19      	ldr	r3, [pc, #100]	@ (1a0006c4 <Chip_Clock_GetClockInputHz+0xa0>)
1a000660:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
1a000664:	f003 0307 	and.w	r3, r3, #7
1a000668:	2b04      	cmp	r3, #4
1a00066a:	d027      	beq.n	1a0006bc <Chip_Clock_GetClockInputHz+0x98>
           rate = 25000000; /* MII uses 25 MHz */
1a00066c:	4816      	ldr	r0, [pc, #88]	@ (1a0006c8 <Chip_Clock_GetClockInputHz+0xa4>)
1a00066e:	e7e8      	b.n	1a000642 <Chip_Clock_GetClockInputHz+0x1e>
       rate = ExtRateIn;
1a000670:	4b16      	ldr	r3, [pc, #88]	@ (1a0006cc <Chip_Clock_GetClockInputHz+0xa8>)
1a000672:	6818      	ldr	r0, [r3, #0]
       break;
1a000674:	e7e5      	b.n	1a000642 <Chip_Clock_GetClockInputHz+0x1e>
       rate = OscRateIn;
1a000676:	4b16      	ldr	r3, [pc, #88]	@ (1a0006d0 <Chip_Clock_GetClockInputHz+0xac>)
1a000678:	6818      	ldr	r0, [r3, #0]
       break;
1a00067a:	e7e2      	b.n	1a000642 <Chip_Clock_GetClockInputHz+0x1e>
       rate = audio_usb_pll_freq[CGU_USB_PLL];
1a00067c:	4b15      	ldr	r3, [pc, #84]	@ (1a0006d4 <Chip_Clock_GetClockInputHz+0xb0>)
1a00067e:	6818      	ldr	r0, [r3, #0]
       break;
1a000680:	e7df      	b.n	1a000642 <Chip_Clock_GetClockInputHz+0x1e>
       rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000682:	4b14      	ldr	r3, [pc, #80]	@ (1a0006d4 <Chip_Clock_GetClockInputHz+0xb0>)
1a000684:	6858      	ldr	r0, [r3, #4]
       break;
1a000686:	e7dc      	b.n	1a000642 <Chip_Clock_GetClockInputHz+0x1e>
       rate = Chip_Clock_GetMainPLLHz();
1a000688:	f000 f868 	bl	1a00075c <Chip_Clock_GetMainPLLHz>
       break;
1a00068c:	e7d9      	b.n	1a000642 <Chip_Clock_GetClockInputHz+0x1e>
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00068e:	2100      	movs	r1, #0
1a000690:	f000 f898 	bl	1a0007c4 <Chip_Clock_GetDivRate>
       break;
1a000694:	e7d5      	b.n	1a000642 <Chip_Clock_GetClockInputHz+0x1e>
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000696:	2101      	movs	r1, #1
1a000698:	f000 f894 	bl	1a0007c4 <Chip_Clock_GetDivRate>
       break;
1a00069c:	e7d1      	b.n	1a000642 <Chip_Clock_GetClockInputHz+0x1e>
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00069e:	2102      	movs	r1, #2
1a0006a0:	f000 f890 	bl	1a0007c4 <Chip_Clock_GetDivRate>
       break;
1a0006a4:	e7cd      	b.n	1a000642 <Chip_Clock_GetClockInputHz+0x1e>
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0006a6:	2103      	movs	r1, #3
1a0006a8:	f000 f88c 	bl	1a0007c4 <Chip_Clock_GetDivRate>
       break;
1a0006ac:	e7c9      	b.n	1a000642 <Chip_Clock_GetClockInputHz+0x1e>
       rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0006ae:	2104      	movs	r1, #4
1a0006b0:	f000 f888 	bl	1a0007c4 <Chip_Clock_GetDivRate>
       break;
1a0006b4:	e7c5      	b.n	1a000642 <Chip_Clock_GetClockInputHz+0x1e>
       rate = CRYSTAL_32K_FREQ_IN;
1a0006b6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
1a0006ba:	e7c2      	b.n	1a000642 <Chip_Clock_GetClockInputHz+0x1e>
           rate = 50000000; /* RMII uses 50 MHz */
1a0006bc:	4806      	ldr	r0, [pc, #24]	@ (1a0006d8 <Chip_Clock_GetClockInputHz+0xb4>)
   return rate;
1a0006be:	e7c0      	b.n	1a000642 <Chip_Clock_GetClockInputHz+0x1e>
1a0006c0:	00b71b00 	.word	0x00b71b00
1a0006c4:	40043000 	.word	0x40043000
1a0006c8:	017d7840 	.word	0x017d7840
1a0006cc:	1a002a4c 	.word	0x1a002a4c
1a0006d0:	1a002a48 	.word	0x1a002a48
1a0006d4:	10000064 	.word	0x10000064
1a0006d8:	02faf080 	.word	0x02faf080

1a0006dc <Chip_Clock_CalcMainPLLValue>:
{
1a0006dc:	b538      	push	{r3, r4, r5, lr}
1a0006de:	4605      	mov	r5, r0
1a0006e0:	460c      	mov	r4, r1
   ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0006e2:	7908      	ldrb	r0, [r1, #4]
1a0006e4:	f7ff ff9e 	bl	1a000624 <Chip_Clock_GetClockInputHz>
1a0006e8:	6160      	str	r0, [r4, #20]
   if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0006ea:	4b19      	ldr	r3, [pc, #100]	@ (1a000750 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0006ec:	442b      	add	r3, r5
1a0006ee:	4a19      	ldr	r2, [pc, #100]	@ (1a000754 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0006f0:	4293      	cmp	r3, r2
1a0006f2:	d821      	bhi.n	1a000738 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0006f4:	b318      	cbz	r0, 1a00073e <Chip_Clock_CalcMainPLLValue+0x62>
   ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0006f6:	2380      	movs	r3, #128	@ 0x80
1a0006f8:	6023      	str	r3, [r4, #0]
   ppll->nsel = 0;
1a0006fa:	2300      	movs	r3, #0
1a0006fc:	60a3      	str	r3, [r4, #8]
   ppll->psel = 0;
1a0006fe:	60e3      	str	r3, [r4, #12]
   ppll->msel = freq / ppll->fin;
1a000700:	fbb5 f3f0 	udiv	r3, r5, r0
1a000704:	6123      	str	r3, [r4, #16]
   if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000706:	4a14      	ldr	r2, [pc, #80]	@ (1a000758 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000708:	4295      	cmp	r5, r2
1a00070a:	d903      	bls.n	1a000714 <Chip_Clock_CalcMainPLLValue+0x38>
1a00070c:	fb00 f303 	mul.w	r3, r0, r3
1a000710:	42ab      	cmp	r3, r5
1a000712:	d007      	beq.n	1a000724 <Chip_Clock_CalcMainPLLValue+0x48>
       pll_get_frac(freq, ppll);
1a000714:	4621      	mov	r1, r4
1a000716:	4628      	mov	r0, r5
1a000718:	f7ff fe94 	bl	1a000444 <pll_get_frac>
       if (!ppll->nsel) {
1a00071c:	68a3      	ldr	r3, [r4, #8]
1a00071e:	b18b      	cbz	r3, 1a000744 <Chip_Clock_CalcMainPLLValue+0x68>
       ppll->nsel --;
1a000720:	3b01      	subs	r3, #1
1a000722:	60a3      	str	r3, [r4, #8]
   if (ppll->msel == 0) {
1a000724:	6923      	ldr	r3, [r4, #16]
1a000726:	b183      	cbz	r3, 1a00074a <Chip_Clock_CalcMainPLLValue+0x6e>
   if (ppll->psel) {
1a000728:	68e2      	ldr	r2, [r4, #12]
1a00072a:	b10a      	cbz	r2, 1a000730 <Chip_Clock_CalcMainPLLValue+0x54>
       ppll->psel --;
1a00072c:	3a01      	subs	r2, #1
1a00072e:	60e2      	str	r2, [r4, #12]
   ppll->msel --;
1a000730:	3b01      	subs	r3, #1
1a000732:	6123      	str	r3, [r4, #16]
   return 0;
1a000734:	2000      	movs	r0, #0
}
1a000736:	bd38      	pop	{r3, r4, r5, pc}
       return -1;
1a000738:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a00073c:	e7fb      	b.n	1a000736 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00073e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a000742:	e7f8      	b.n	1a000736 <Chip_Clock_CalcMainPLLValue+0x5a>
           return -1;
1a000744:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a000748:	e7f5      	b.n	1a000736 <Chip_Clock_CalcMainPLLValue+0x5a>
       return - 1;
1a00074a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a00074e:	e7f2      	b.n	1a000736 <Chip_Clock_CalcMainPLLValue+0x5a>
1a000750:	ff6b3a10 	.word	0xff6b3a10
1a000754:	0b940510 	.word	0x0b940510
1a000758:	094c5eff 	.word	0x094c5eff

1a00075c <Chip_Clock_GetMainPLLHz>:
{
1a00075c:	b530      	push	{r4, r5, lr}
1a00075e:	b083      	sub	sp, #12
   uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000760:	4d16      	ldr	r5, [pc, #88]	@ (1a0007bc <Chip_Clock_GetMainPLLHz+0x60>)
1a000762:	6c6c      	ldr	r4, [r5, #68]	@ 0x44
   uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000764:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000768:	f7ff ff5c 	bl	1a000624 <Chip_Clock_GetClockInputHz>
1a00076c:	4601      	mov	r1, r0
   const uint8_t ptab[] = {1, 2, 4, 8};
1a00076e:	4b14      	ldr	r3, [pc, #80]	@ (1a0007c0 <Chip_Clock_GetMainPLLHz+0x64>)
1a000770:	9301      	str	r3, [sp, #4]
   if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000772:	6c28      	ldr	r0, [r5, #64]	@ 0x40
1a000774:	f010 0001 	ands.w	r0, r0, #1
1a000778:	d01d      	beq.n	1a0007b6 <Chip_Clock_GetMainPLLHz+0x5a>
   msel = (PLLReg >> 16) & 0xFF;
1a00077a:	f3c4 4207 	ubfx	r2, r4, #16, #8
   nsel = (PLLReg >> 12) & 0x3;
1a00077e:	f3c4 3301 	ubfx	r3, r4, #12, #2
   psel = (PLLReg >> 8) & 0x3;
1a000782:	f3c4 2001 	ubfx	r0, r4, #8, #2
   m = msel + 1;
1a000786:	3201      	adds	r2, #1
   n = nsel + 1;
1a000788:	3301      	adds	r3, #1
   p = ptab[psel];
1a00078a:	3008      	adds	r0, #8
1a00078c:	4468      	add	r0, sp
1a00078e:	f810 0c04 	ldrb.w	r0, [r0, #-4]
   if (direct || fbsel) {
1a000792:	f014 0f80 	tst.w	r4, #128	@ 0x80
1a000796:	d10a      	bne.n	1a0007ae <Chip_Clock_GetMainPLLHz+0x52>
1a000798:	f014 0f40 	tst.w	r4, #64	@ 0x40
1a00079c:	d107      	bne.n	1a0007ae <Chip_Clock_GetMainPLLHz+0x52>
   return (m / (2 * p)) * (freq / n);
1a00079e:	0040      	lsls	r0, r0, #1
1a0007a0:	fbb2 f2f0 	udiv	r2, r2, r0
1a0007a4:	fbb1 f1f3 	udiv	r1, r1, r3
1a0007a8:	fb01 f002 	mul.w	r0, r1, r2
1a0007ac:	e003      	b.n	1a0007b6 <Chip_Clock_GetMainPLLHz+0x5a>
       return m * (freq / n);
1a0007ae:	fbb1 f3f3 	udiv	r3, r1, r3
1a0007b2:	fb02 f003 	mul.w	r0, r2, r3
}
1a0007b6:	b003      	add	sp, #12
1a0007b8:	bd30      	pop	{r4, r5, pc}
1a0007ba:	bf00      	nop
1a0007bc:	40050000 	.word	0x40050000
1a0007c0:	08040201 	.word	0x08040201

1a0007c4 <Chip_Clock_GetDivRate>:
{
1a0007c4:	b538      	push	{r3, r4, r5, lr}
1a0007c6:	460c      	mov	r4, r1
   input = Chip_Clock_GetDividerSource(divider);
1a0007c8:	4608      	mov	r0, r1
1a0007ca:	f7ff ff0f 	bl	1a0005ec <Chip_Clock_GetDividerSource>
1a0007ce:	4605      	mov	r5, r0
   div = Chip_Clock_GetDividerDivisor(divider);
1a0007d0:	4620      	mov	r0, r4
1a0007d2:	f7ff ff19 	bl	1a000608 <Chip_Clock_GetDividerDivisor>
1a0007d6:	4604      	mov	r4, r0
   return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0007d8:	4628      	mov	r0, r5
1a0007da:	f7ff ff23 	bl	1a000624 <Chip_Clock_GetClockInputHz>
1a0007de:	3401      	adds	r4, #1
}
1a0007e0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0007e4:	bd38      	pop	{r3, r4, r5, pc}
	...

1a0007e8 <Chip_Clock_SetBaseClock>:
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0007e8:	b430      	push	{r4, r5}
   uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0007ea:	f100 0c16 	add.w	ip, r0, #22
1a0007ee:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
1a0007f2:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
1a0007f6:	f50c 2ca0 	add.w	ip, ip, #327680	@ 0x50000
1a0007fa:	f8dc 4004 	ldr.w	r4, [ip, #4]

   if (BaseClock < CLK_BASE_NONE) {
1a0007fe:	281b      	cmp	r0, #27
1a000800:	d813      	bhi.n	1a00082a <Chip_Clock_SetBaseClock+0x42>
       if (Input != CLKINPUT_PD) {
1a000802:	2911      	cmp	r1, #17
1a000804:	d01a      	beq.n	1a00083c <Chip_Clock_SetBaseClock+0x54>
           /* Mask off fields we plan to update */
           reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000806:	4d0e      	ldr	r5, [pc, #56]	@ (1a000840 <Chip_Clock_SetBaseClock+0x58>)
1a000808:	4025      	ands	r5, r4

           if (autoblocken) {
1a00080a:	b10a      	cbz	r2, 1a000810 <Chip_Clock_SetBaseClock+0x28>
               reg |= (1 << 11);
1a00080c:	f445 6500 	orr.w	r5, r5, #2048	@ 0x800
           }
           if (powerdn) {
1a000810:	b10b      	cbz	r3, 1a000816 <Chip_Clock_SetBaseClock+0x2e>
               reg |= (1 << 0);
1a000812:	f045 0501 	orr.w	r5, r5, #1
           }

           /* Set clock source */
           reg |= (Input << 24);
1a000816:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

           LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00081a:	3016      	adds	r0, #22
1a00081c:	0080      	lsls	r0, r0, #2
1a00081e:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
1a000822:	f500 20a0 	add.w	r0, r0, #327680	@ 0x50000
1a000826:	6045      	str	r5, [r0, #4]
1a000828:	e008      	b.n	1a00083c <Chip_Clock_SetBaseClock+0x54>
       }
   }
   else {
       LPC_CGU->BASE_CLK[BaseClock] = reg | 1; /* Power down this base clock */
1a00082a:	f044 0401 	orr.w	r4, r4, #1
1a00082e:	3016      	adds	r0, #22
1a000830:	0080      	lsls	r0, r0, #2
1a000832:	f100 4080 	add.w	r0, r0, #1073741824	@ 0x40000000
1a000836:	f500 20a0 	add.w	r0, r0, #327680	@ 0x50000
1a00083a:	6044      	str	r4, [r0, #4]
   }
}
1a00083c:	bc30      	pop	{r4, r5}
1a00083e:	4770      	bx	lr
1a000840:	e0fff7fe 	.word	0xe0fff7fe

1a000844 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
   uint32_t reg;

   if (BaseClock >= CLK_BASE_NONE) {
1a000844:	281b      	cmp	r0, #27
1a000846:	d80d      	bhi.n	1a000864 <Chip_Clock_GetBaseClock+0x20>
       return CLKINPUT_PD;
   }

   reg = LPC_CGU->BASE_CLK[BaseClock];
1a000848:	f100 0316 	add.w	r3, r0, #22
1a00084c:	009b      	lsls	r3, r3, #2
1a00084e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
1a000852:	f503 23a0 	add.w	r3, r3, #327680	@ 0x50000
1a000856:	6858      	ldr	r0, [r3, #4]

   /* base clock is powered down? */
   if (reg & 1) {
1a000858:	f010 0f01 	tst.w	r0, #1
1a00085c:	d104      	bne.n	1a000868 <Chip_Clock_GetBaseClock+0x24>
       return CLKINPUT_PD;
   }

   return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00085e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000862:	4770      	bx	lr
       return CLKINPUT_PD;
1a000864:	2011      	movs	r0, #17
1a000866:	4770      	bx	lr
       return CLKINPUT_PD;
1a000868:	2011      	movs	r0, #17
}
1a00086a:	4770      	bx	lr

1a00086c <Chip_Clock_GetBaseClocktHz>:
{
1a00086c:	b508      	push	{r3, lr}
   return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a00086e:	f7ff ffe9 	bl	1a000844 <Chip_Clock_GetBaseClock>
1a000872:	f7ff fed7 	bl	1a000624 <Chip_Clock_GetClockInputHz>
}
1a000876:	bd08      	pop	{r3, pc}

1a000878 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
   uint32_t reg = 1;

   if (autoen) {
1a000878:	b971      	cbnz	r1, 1a000898 <Chip_Clock_EnableOpts+0x20>
   uint32_t reg = 1;
1a00087a:	2101      	movs	r1, #1
       reg |= (1 << 1);
   }
   if (wakeupen) {
1a00087c:	b10a      	cbz	r2, 1a000882 <Chip_Clock_EnableOpts+0xa>
       reg |= (1 << 2);
1a00087e:	f041 0104 	orr.w	r1, r1, #4
   }

   /* Not all clocks support a divider, but we won't check that here. Only
      dividers of 1 and 2 are allowed. Assume 1 if not 2 */
   if (div == 2) {
1a000882:	2b02      	cmp	r3, #2
1a000884:	d00a      	beq.n	1a00089c <Chip_Clock_EnableOpts+0x24>
       reg |= (1 << 5);
   }

   /* Setup peripheral clock and start running */
   if (clk >= CLK_CCU2_START) {
1a000886:	f5b0 7fa1 	cmp.w	r0, #322	@ 0x142
1a00088a:	d30a      	bcc.n	1a0008a2 <Chip_Clock_EnableOpts+0x2a>
       LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a00088c:	f5a0 7091 	sub.w	r0, r0, #290	@ 0x122
1a000890:	4b06      	ldr	r3, [pc, #24]	@ (1a0008ac <Chip_Clock_EnableOpts+0x34>)
1a000892:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000896:	4770      	bx	lr
       reg |= (1 << 1);
1a000898:	2103      	movs	r1, #3
1a00089a:	e7ef      	b.n	1a00087c <Chip_Clock_EnableOpts+0x4>
       reg |= (1 << 5);
1a00089c:	f041 0120 	orr.w	r1, r1, #32
1a0008a0:	e7f1      	b.n	1a000886 <Chip_Clock_EnableOpts+0xe>
   }
   else {
       LPC_CCU1->CLKCCU[clk].CFG = reg;
1a0008a2:	3020      	adds	r0, #32
1a0008a4:	4b02      	ldr	r3, [pc, #8]	@ (1a0008b0 <Chip_Clock_EnableOpts+0x38>)
1a0008a6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
   }
}
1a0008aa:	4770      	bx	lr
1a0008ac:	40052000 	.word	0x40052000
1a0008b0:	40051000 	.word	0x40051000

1a0008b4 <Chip_Clock_GetRate>:
   LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0008b4:	b510      	push	{r4, lr}
1a0008b6:	4603      	mov	r3, r0
   CHIP_CGU_BASE_CLK_T baseclk;
   uint32_t reg, div, rate;

   /* Get CCU config register for clock */
   if (clk >= CLK_CCU2_START) {
1a0008b8:	f5b0 7fa1 	cmp.w	r0, #322	@ 0x142
1a0008bc:	d308      	bcc.n	1a0008d0 <Chip_Clock_GetRate+0x1c>
       reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0008be:	f5a0 7291 	sub.w	r2, r0, #290	@ 0x122
1a0008c2:	490d      	ldr	r1, [pc, #52]	@ (1a0008f8 <Chip_Clock_GetRate+0x44>)
1a0008c4:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
   else {
       reg = LPC_CCU1->CLKCCU[clk].CFG;
   }

   /* Is the clock enabled? */
   if (reg & 1) {
1a0008c8:	f014 0001 	ands.w	r0, r4, #1
1a0008cc:	d106      	bne.n	1a0008dc <Chip_Clock_GetRate+0x28>
   else {
       rate = 0;
   }

   return rate;
}
1a0008ce:	bd10      	pop	{r4, pc}
       reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0008d0:	f100 0220 	add.w	r2, r0, #32
1a0008d4:	4909      	ldr	r1, [pc, #36]	@ (1a0008fc <Chip_Clock_GetRate+0x48>)
1a0008d6:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
1a0008da:	e7f5      	b.n	1a0008c8 <Chip_Clock_GetRate+0x14>
       baseclk = Chip_Clock_FindBaseClock(clk);
1a0008dc:	4618      	mov	r0, r3
1a0008de:	f7ff fe35 	bl	1a00054c <Chip_Clock_FindBaseClock>
       rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0008e2:	f7ff ffc3 	bl	1a00086c <Chip_Clock_GetBaseClocktHz>
       if (((reg >> 5) & 0x7) == 0) {
1a0008e6:	f014 0fe0 	tst.w	r4, #224	@ 0xe0
1a0008ea:	d103      	bne.n	1a0008f4 <Chip_Clock_GetRate+0x40>
           div = 1;
1a0008ec:	2301      	movs	r3, #1
       rate = rate / div;
1a0008ee:	fbb0 f0f3 	udiv	r0, r0, r3
   return rate;
1a0008f2:	e7ec      	b.n	1a0008ce <Chip_Clock_GetRate+0x1a>
           div = 2;/* No other dividers supported */
1a0008f4:	2302      	movs	r3, #2
1a0008f6:	e7fa      	b.n	1a0008ee <Chip_Clock_GetRate+0x3a>
1a0008f8:	40052000 	.word	0x40052000
1a0008fc:	40051000 	.word	0x40051000

1a000900 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a000900:	b084      	sub	sp, #16
   volatile uint32_t Cpacr;
   volatile uint32_t Mvfr0;
   volatile uint32_t Mvfr1;
   char vfpPresent = 0;

   Mvfr0 = *regMvfr0;
1a000902:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
1a000906:	f8d3 2f40 	ldr.w	r2, [r3, #3904]	@ 0xf40
1a00090a:	9202      	str	r2, [sp, #8]
   Mvfr1 = *regMvfr1;
1a00090c:	f8d3 3f44 	ldr.w	r3, [r3, #3908]	@ 0xf44
1a000910:	9301      	str	r3, [sp, #4]

   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000912:	9a02      	ldr	r2, [sp, #8]
1a000914:	4b0a      	ldr	r3, [pc, #40]	@ (1a000940 <fpuInit+0x40>)
1a000916:	429a      	cmp	r2, r3
1a000918:	d001      	beq.n	1a00091e <fpuInit+0x1e>
       Cpacr = *regCpacr;
       Cpacr |= (0xF << 20);
       *regCpacr = Cpacr;  // enable CP10 and CP11 for full access
   }
#endif /* __FPU_PRESENT != 0 */
}
1a00091a:	b004      	add	sp, #16
1a00091c:	4770      	bx	lr
   vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a00091e:	9a01      	ldr	r2, [sp, #4]
1a000920:	4b08      	ldr	r3, [pc, #32]	@ (1a000944 <fpuInit+0x44>)
1a000922:	429a      	cmp	r2, r3
1a000924:	d1f9      	bne.n	1a00091a <fpuInit+0x1a>
       Cpacr = *regCpacr;
1a000926:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
1a00092a:	f8d2 3d88 	ldr.w	r3, [r2, #3464]	@ 0xd88
1a00092e:	9303      	str	r3, [sp, #12]
       Cpacr |= (0xF << 20);
1a000930:	9b03      	ldr	r3, [sp, #12]
1a000932:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
1a000936:	9303      	str	r3, [sp, #12]
       *regCpacr = Cpacr;  // enable CP10 and CP11 for full access
1a000938:	9b03      	ldr	r3, [sp, #12]
1a00093a:	f8c2 3d88 	str.w	r3, [r2, #3464]	@ 0xd88
}
1a00093e:	e7ec      	b.n	1a00091a <fpuInit+0x1a>
1a000940:	10110021 	.word	0x10110021
1a000944:	11000011 	.word	0x11000011

1a000948 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000948:	4770      	bx	lr
	...

1a00094c <Chip_Clock_SetupMainPLL>:
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
   /* power up main PLL */
   LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8);
1a00094c:	6803      	ldr	r3, [r0, #0]
1a00094e:	7902      	ldrb	r2, [r0, #4]
1a000950:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a000954:	6902      	ldr	r2, [r0, #16]
1a000956:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00095a:	6882      	ldr	r2, [r0, #8]
1a00095c:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a000960:	68c2      	ldr	r2, [r0, #12]
1a000962:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a000966:	4a01      	ldr	r2, [pc, #4]	@ (1a00096c <Chip_Clock_SetupMainPLL+0x20>)
1a000968:	6453      	str	r3, [r2, #68]	@ 0x44
}
1a00096a:	4770      	bx	lr
1a00096c:	40050000 	.word	0x40050000

1a000970 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a000970:	b570      	push	{r4, r5, r6, lr}
1a000972:	b092      	sub	sp, #72	@ 0x48
1a000974:	4604      	mov	r4, r0
1a000976:	460e      	mov	r6, r1
1a000978:	4615      	mov	r5, r2
   int i;
   volatile uint32_t delay = 5500;
1a00097a:	f241 537c 	movw	r3, #5500	@ 0x157c
1a00097e:	9311      	str	r3, [sp, #68]	@ 0x44
   uint32_t direct = 0;
   PLL_PARAM_T ppll;

   if (clkin == CLKIN_CRYSTAL) {
1a000980:	2806      	cmp	r0, #6
1a000982:	d036      	beq.n	1a0009f2 <Chip_SetupCoreClock+0x82>
       /* Switch main system clocking to crystal */
       Chip_Clock_EnableCrystal();
   }
   Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a000984:	2300      	movs	r3, #0
1a000986:	2201      	movs	r2, #1
1a000988:	4621      	mov	r1, r4
1a00098a:	2004      	movs	r0, #4
1a00098c:	f7ff ff2c 	bl	1a0007e8 <Chip_Clock_SetBaseClock>
   LPC_CGU->PLL1_CTRL |= 1;
1a000990:	4a38      	ldr	r2, [pc, #224]	@ (1a000a74 <Chip_SetupCoreClock+0x104>)
1a000992:	6c53      	ldr	r3, [r2, #68]	@ 0x44
1a000994:	f043 0301 	orr.w	r3, r3, #1
1a000998:	6453      	str	r3, [r2, #68]	@ 0x44
   Chip_Clock_DisableMainPLL(); /* Disable PLL */

   /* Calculate the PLL Parameters */
   ppll.srcin = clkin;
1a00099a:	f88d 4028 	strb.w	r4, [sp, #40]	@ 0x28
   Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00099e:	a909      	add	r1, sp, #36	@ 0x24
1a0009a0:	4630      	mov	r0, r6
1a0009a2:	f7ff fe9b 	bl	1a0006dc <Chip_Clock_CalcMainPLLValue>

   if (core_freq > 110000000UL) {
1a0009a6:	4b34      	ldr	r3, [pc, #208]	@ (1a000a78 <Chip_SetupCoreClock+0x108>)
1a0009a8:	429e      	cmp	r6, r3
1a0009aa:	d92a      	bls.n	1a000a02 <Chip_SetupCoreClock+0x92>
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a0009ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1a0009ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
1a0009b2:	d001      	beq.n	1a0009b8 <Chip_SetupCoreClock+0x48>
1a0009b4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
1a0009b6:	b1fa      	cbz	r2, 1a0009f8 <Chip_SetupCoreClock+0x88>
           PLL_PARAM_T lpll;
           /* Calculate the PLL Parameters */
           lpll.srcin = clkin;
1a0009b8:	f88d 4008 	strb.w	r4, [sp, #8]
           Chip_Clock_CalcMainPLLValue(110000000UL, &lpll);
1a0009bc:	a901      	add	r1, sp, #4
1a0009be:	482e      	ldr	r0, [pc, #184]	@ (1a000a78 <Chip_SetupCoreClock+0x108>)
1a0009c0:	f7ff fe8c 	bl	1a0006dc <Chip_Clock_CalcMainPLLValue>
           Chip_Clock_SetupMainPLL(&lpll);
1a0009c4:	a801      	add	r0, sp, #4
1a0009c6:	f7ff ffc1 	bl	1a00094c <Chip_Clock_SetupMainPLL>
 * @note   The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
   /* Return true if locked */
   return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0009ca:	4b2a      	ldr	r3, [pc, #168]	@ (1a000a74 <Chip_SetupCoreClock+0x104>)
1a0009cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
           /* Wait for the PLL to lock */
           while(!Chip_Clock_MainPLLLocked()) {}
1a0009ce:	f013 0f01 	tst.w	r3, #1
1a0009d2:	d0fa      	beq.n	1a0009ca <Chip_SetupCoreClock+0x5a>
           Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0009d4:	2300      	movs	r3, #0
1a0009d6:	2201      	movs	r2, #1
1a0009d8:	2109      	movs	r1, #9
1a0009da:	2004      	movs	r0, #4
1a0009dc:	f7ff ff04 	bl	1a0007e8 <Chip_Clock_SetBaseClock>
           while(delay --){}
1a0009e0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
1a0009e2:	1e63      	subs	r3, r4, #1
1a0009e4:	9311      	str	r3, [sp, #68]	@ 0x44
1a0009e6:	2c00      	cmp	r4, #0
1a0009e8:	d1fa      	bne.n	1a0009e0 <Chip_SetupCoreClock+0x70>
           delay = 5500;
1a0009ea:	f241 537c 	movw	r3, #5500	@ 0x157c
1a0009ee:	9311      	str	r3, [sp, #68]	@ 0x44
       if (!(ppll.ctrl & (1 << 7)) || ppll.psel) {
1a0009f0:	e008      	b.n	1a000a04 <Chip_SetupCoreClock+0x94>
       Chip_Clock_EnableCrystal();
1a0009f2:	f7ff fdd5 	bl	1a0005a0 <Chip_Clock_EnableCrystal>
1a0009f6:	e7c5      	b.n	1a000984 <Chip_SetupCoreClock+0x14>
       } else {
           direct = 1;
           ppll.ctrl &= ~(1 << 7);
1a0009f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
1a0009fc:	9309      	str	r3, [sp, #36]	@ 0x24
           direct = 1;
1a0009fe:	2401      	movs	r4, #1
1a000a00:	e000      	b.n	1a000a04 <Chip_SetupCoreClock+0x94>
   uint32_t direct = 0;
1a000a02:	2400      	movs	r4, #0
       }
   }

   /* Setup and start the PLL */
   Chip_Clock_SetupMainPLL(&ppll);
1a000a04:	a809      	add	r0, sp, #36	@ 0x24
1a000a06:	f7ff ffa1 	bl	1a00094c <Chip_Clock_SetupMainPLL>
1a000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (1a000a74 <Chip_SetupCoreClock+0x104>)
1a000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40

   /* Wait for the PLL to lock */
   while(!Chip_Clock_MainPLLLocked()) {}
1a000a0e:	f013 0f01 	tst.w	r3, #1
1a000a12:	d0fa      	beq.n	1a000a0a <Chip_SetupCoreClock+0x9a>

   /* Set core clock base as PLL1 */
   Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a000a14:	2300      	movs	r3, #0
1a000a16:	2201      	movs	r2, #1
1a000a18:	2109      	movs	r1, #9
1a000a1a:	2004      	movs	r0, #4
1a000a1c:	f7ff fee4 	bl	1a0007e8 <Chip_Clock_SetBaseClock>

   while(delay --){} /* Wait for approx 50 uSec */
1a000a20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1a000a22:	1e59      	subs	r1, r3, #1
1a000a24:	9111      	str	r1, [sp, #68]	@ 0x44
1a000a26:	2b00      	cmp	r3, #0
1a000a28:	d1fa      	bne.n	1a000a20 <Chip_SetupCoreClock+0xb0>
   if (direct) {
1a000a2a:	b914      	cbnz	r4, 1a000a32 <Chip_SetupCoreClock+0xc2>
       ppll.ctrl |= 1 << 7;
       Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
       while(delay --){} /* Wait for approx 50 uSec */
   }

   if (setbase) {
1a000a2c:	b9fd      	cbnz	r5, 1a000a6e <Chip_SetupCoreClock+0xfe>
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
                                   InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
       }
   }
}
1a000a2e:	b012      	add	sp, #72	@ 0x48
1a000a30:	bd70      	pop	{r4, r5, r6, pc}
       delay = 5500;
1a000a32:	f241 537c 	movw	r3, #5500	@ 0x157c
1a000a36:	9311      	str	r3, [sp, #68]	@ 0x44
       ppll.ctrl |= 1 << 7;
1a000a38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
1a000a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1a000a3e:	9309      	str	r3, [sp, #36]	@ 0x24
       Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
1a000a40:	a809      	add	r0, sp, #36	@ 0x24
1a000a42:	f7ff ff83 	bl	1a00094c <Chip_Clock_SetupMainPLL>
       while(delay --){} /* Wait for approx 50 uSec */
1a000a46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
1a000a48:	1e5a      	subs	r2, r3, #1
1a000a4a:	9211      	str	r2, [sp, #68]	@ 0x44
1a000a4c:	2b00      	cmp	r3, #0
1a000a4e:	d1fa      	bne.n	1a000a46 <Chip_SetupCoreClock+0xd6>
1a000a50:	e7ec      	b.n	1a000a2c <Chip_SetupCoreClock+0xbc>
           Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000a52:	480a      	ldr	r0, [pc, #40]	@ (1a000a7c <Chip_SetupCoreClock+0x10c>)
1a000a54:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000a58:	78cb      	ldrb	r3, [r1, #3]
1a000a5a:	788a      	ldrb	r2, [r1, #2]
1a000a5c:	7849      	ldrb	r1, [r1, #1]
1a000a5e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000a62:	f7ff fec1 	bl	1a0007e8 <Chip_Clock_SetBaseClock>
       for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000a66:	3401      	adds	r4, #1
1a000a68:	2c11      	cmp	r4, #17
1a000a6a:	d9f2      	bls.n	1a000a52 <Chip_SetupCoreClock+0xe2>
1a000a6c:	e7df      	b.n	1a000a2e <Chip_SetupCoreClock+0xbe>
1a000a6e:	2400      	movs	r4, #0
1a000a70:	e7fa      	b.n	1a000a68 <Chip_SetupCoreClock+0xf8>
1a000a72:	bf00      	nop
1a000a74:	40050000 	.word	0x40050000
1a000a78:	068e7780 	.word	0x068e7780
1a000a7c:	1a0029e4 	.word	0x1a0029e4

1a000a80 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
   uint32_t base = (uint32_t) pUART;
   switch(base) {
1a000a80:	4b09      	ldr	r3, [pc, #36]	@ (1a000aa8 <Chip_UART_GetIndex+0x28>)
1a000a82:	4298      	cmp	r0, r3
1a000a84:	d009      	beq.n	1a000a9a <Chip_UART_GetIndex+0x1a>
1a000a86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
1a000a8a:	4298      	cmp	r0, r3
1a000a8c:	d007      	beq.n	1a000a9e <Chip_UART_GetIndex+0x1e>
1a000a8e:	f5a3 2380 	sub.w	r3, r3, #262144	@ 0x40000
1a000a92:	4298      	cmp	r0, r3
1a000a94:	d105      	bne.n	1a000aa2 <Chip_UART_GetIndex+0x22>
       case LPC_USART0_BASE:
           return 0;
       case LPC_UART1_BASE:
           return 1;
1a000a96:	2001      	movs	r0, #1
1a000a98:	4770      	bx	lr
       case LPC_USART2_BASE:
           return 2;
1a000a9a:	2002      	movs	r0, #2
1a000a9c:	4770      	bx	lr
       case LPC_USART3_BASE:
           return 3;
1a000a9e:	2003      	movs	r0, #3
1a000aa0:	4770      	bx	lr
   switch(base) {
1a000aa2:	2000      	movs	r0, #0
       default:
           return 0; /* Should never come here */
   }
}
1a000aa4:	4770      	bx	lr
1a000aa6:	bf00      	nop
1a000aa8:	400c1000 	.word	0x400c1000

1a000aac <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000aac:	b530      	push	{r4, r5, lr}
1a000aae:	b083      	sub	sp, #12
1a000ab0:	4604      	mov	r4, r0
    volatile uint32_t tmp;

   /* Enable UART clocking. UART base clock(s) must already be enabled */
   Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000ab2:	f7ff ffe5 	bl	1a000a80 <Chip_UART_GetIndex>
1a000ab6:	2301      	movs	r3, #1
1a000ab8:	461a      	mov	r2, r3
1a000aba:	4619      	mov	r1, r3
1a000abc:	4d0e      	ldr	r5, [pc, #56]	@ (1a000af8 <Chip_UART_Init+0x4c>)
1a000abe:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a000ac2:	f7ff fed9 	bl	1a000878 <Chip_Clock_EnableOpts>
 *         with a RX trip level of 8 characters, use something like
 *         (UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
   pUART->FCR = fcr;
1a000ac6:	2307      	movs	r3, #7
1a000ac8:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a000aca:	2300      	movs	r3, #0
1a000acc:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
   pUART->IER = 0;
1a000ace:	6063      	str	r3, [r4, #4]
   /* Set LCR to default state */
   pUART->LCR = 0;
1a000ad0:	60e3      	str	r3, [r4, #12]
   /* Set ACR to default state */
   pUART->ACR = 0;
1a000ad2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
   pUART->RS485CTRL = 0;
1a000ad4:	64e3      	str	r3, [r4, #76]	@ 0x4c
   /* Set RS485 delay timer to default state */
   pUART->RS485DLY = 0;
1a000ad6:	6563      	str	r3, [r4, #84]	@ 0x54
   /* Set RS485 addr match to default state */
   pUART->RS485ADRMATCH = 0;
1a000ad8:	6523      	str	r3, [r4, #80]	@ 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000ada:	4b08      	ldr	r3, [pc, #32]	@ (1a000afc <Chip_UART_Init+0x50>)
1a000adc:	429c      	cmp	r4, r3
1a000ade:	d005      	beq.n	1a000aec <Chip_UART_Init+0x40>
 *         stop bit, and even (enabled) parity would be
 *         (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
   pUART->LCR = config;
1a000ae0:	2303      	movs	r3, #3
1a000ae2:	60e3      	str	r3, [r4, #12]

   /* Default 8N1, with DLAB disabled */
   Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

   /* Disable fractional divider */
   pUART->FDR = 0x10;
1a000ae4:	2310      	movs	r3, #16
1a000ae6:	62a3      	str	r3, [r4, #40]	@ 0x28
}
1a000ae8:	b003      	add	sp, #12
1a000aea:	bd30      	pop	{r4, r5, pc}
       pUART->MCR = 0;
1a000aec:	2300      	movs	r3, #0
1a000aee:	6123      	str	r3, [r4, #16]
       tmp = pUART->MSR;
1a000af0:	69a3      	ldr	r3, [r4, #24]
1a000af2:	9301      	str	r3, [sp, #4]
1a000af4:	e7f4      	b.n	1a000ae0 <Chip_UART_Init+0x34>
1a000af6:	bf00      	nop
1a000af8:	1a002a34 	.word	0x1a002a34
1a000afc:	40082000 	.word	0x40082000

1a000b00 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000b04:	b083      	sub	sp, #12
1a000b06:	4605      	mov	r5, r0
1a000b08:	4688      	mov	r8, r1
   uint32_t sdiv = 0, sm = 1, sd = 0;
   uint32_t pclk, m, d;
   uint32_t odiff = -1UL; /* old best diff */

   /* Get base clock for the corresponding UART */
   pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000b0a:	f7ff ffb9 	bl	1a000a80 <Chip_UART_GetIndex>
1a000b0e:	4b32      	ldr	r3, [pc, #200]	@ (1a000bd8 <Chip_UART_SetBaudFDR+0xd8>)
1a000b10:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000b14:	f7ff fece 	bl	1a0008b4 <Chip_Clock_GetRate>
1a000b18:	4606      	mov	r6, r0
   uint32_t odiff = -1UL; /* old best diff */
1a000b1a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff

   /* Loop through all possible fractional divider values */
   for (m = 1; odiff && m < 16; m++) {
1a000b1e:	2401      	movs	r4, #1
   uint32_t sdiv = 0, sm = 1, sd = 0;
1a000b20:	f04f 0a00 	mov.w	sl, #0
1a000b24:	46a1      	mov	r9, r4
1a000b26:	46d3      	mov	fp, sl
1a000b28:	9501      	str	r5, [sp, #4]
   for (m = 1; odiff && m < 16; m++) {
1a000b2a:	e02a      	b.n	1a000b82 <Chip_UART_SetBaudFDR+0x82>
           /* Upper 32-bit of dval has div */
           div = (uint32_t) (dval >> 32);

           /* Closer to next div */
           if ((int)diff < 0) {
               diff = -diff;
1a000b2c:	4242      	negs	r2, r0
               div ++;
1a000b2e:	1c4b      	adds	r3, r1, #1
1a000b30:	e017      	b.n	1a000b62 <Chip_UART_SetBaudFDR+0x62>
           sd = d;
           sm = m;
           odiff = diff;

           /* On perfect match, break loop */
           if(!diff) {
1a000b32:	b30a      	cbz	r2, 1a000b78 <Chip_UART_SetBaudFDR+0x78>
           odiff = diff;
1a000b34:	4617      	mov	r7, r2
           sd = d;
1a000b36:	46aa      	mov	sl, r5
           sm = m;
1a000b38:	46a1      	mov	r9, r4
           sdiv = div;
1a000b3a:	469b      	mov	fp, r3
       for (d = 0; d < m; d++) {
1a000b3c:	3501      	adds	r5, #1
1a000b3e:	42ac      	cmp	r4, r5
1a000b40:	d91e      	bls.n	1a000b80 <Chip_UART_SetBaudFDR+0x80>
           uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000b42:	0931      	lsrs	r1, r6, #4
1a000b44:	0730      	lsls	r0, r6, #28
1a000b46:	fba4 0c00 	umull	r0, ip, r4, r0
1a000b4a:	1962      	adds	r2, r4, r5
1a000b4c:	fb08 f202 	mul.w	r2, r8, r2
1a000b50:	2300      	movs	r3, #0
1a000b52:	fb04 c101 	mla	r1, r4, r1, ip
1a000b56:	f000 f9d9 	bl	1a000f0c <__aeabi_uldivmod>
           diff = (uint32_t) dval;
1a000b5a:	4602      	mov	r2, r0
           div = (uint32_t) (dval >> 32);
1a000b5c:	460b      	mov	r3, r1
           if ((int)diff < 0) {
1a000b5e:	2800      	cmp	r0, #0
1a000b60:	dbe4      	blt.n	1a000b2c <Chip_UART_SetBaudFDR+0x2c>
           if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000b62:	4297      	cmp	r7, r2
1a000b64:	d3ea      	bcc.n	1a000b3c <Chip_UART_SetBaudFDR+0x3c>
1a000b66:	2b00      	cmp	r3, #0
1a000b68:	d0e8      	beq.n	1a000b3c <Chip_UART_SetBaudFDR+0x3c>
1a000b6a:	0c19      	lsrs	r1, r3, #16
1a000b6c:	d1e6      	bne.n	1a000b3c <Chip_UART_SetBaudFDR+0x3c>
1a000b6e:	2b02      	cmp	r3, #2
1a000b70:	d8df      	bhi.n	1a000b32 <Chip_UART_SetBaudFDR+0x32>
1a000b72:	2d00      	cmp	r5, #0
1a000b74:	d0dd      	beq.n	1a000b32 <Chip_UART_SetBaudFDR+0x32>
1a000b76:	e7e1      	b.n	1a000b3c <Chip_UART_SetBaudFDR+0x3c>
           odiff = diff;
1a000b78:	4617      	mov	r7, r2
           sd = d;
1a000b7a:	46aa      	mov	sl, r5
           sm = m;
1a000b7c:	46a1      	mov	r9, r4
           sdiv = div;
1a000b7e:	469b      	mov	fp, r3
   for (m = 1; odiff && m < 16; m++) {
1a000b80:	3401      	adds	r4, #1
1a000b82:	b11f      	cbz	r7, 1a000b8c <Chip_UART_SetBaudFDR+0x8c>
1a000b84:	2c0f      	cmp	r4, #15
1a000b86:	d801      	bhi.n	1a000b8c <Chip_UART_SetBaudFDR+0x8c>
       for (d = 0; d < m; d++) {
1a000b88:	2500      	movs	r5, #0
1a000b8a:	e7d8      	b.n	1a000b3e <Chip_UART_SetBaudFDR+0x3e>
           }
       }
   }

   /* Return 0 if a vaild divisor is not possible */
   if (!sdiv) {
1a000b8c:	9d01      	ldr	r5, [sp, #4]
1a000b8e:	f1bb 0f00 	cmp.w	fp, #0
1a000b92:	d01c      	beq.n	1a000bce <Chip_UART_SetBaudFDR+0xce>
 * @param  pUART   : Pointer to selected UART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
   pUART->LCR |= UART_LCR_DLAB_EN;
1a000b94:	68ea      	ldr	r2, [r5, #12]
1a000b96:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
1a000b9a:	60ea      	str	r2, [r5, #12]
 *         order to access the USART Divisor Latches. This function
 *         doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
   pUART->DLL = (uint32_t) dll;
1a000b9c:	fa5f f28b 	uxtb.w	r2, fp
1a000ba0:	602a      	str	r2, [r5, #0]
   pUART->DLM = (uint32_t) dlm;
1a000ba2:	f3cb 2207 	ubfx	r2, fp, #8, #8
1a000ba6:	606a      	str	r2, [r5, #4]
   pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000ba8:	68ea      	ldr	r2, [r5, #12]
1a000baa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
1a000bae:	60ea      	str	r2, [r5, #12]
   Chip_UART_EnableDivisorAccess(pUART);
   Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
   Chip_UART_DisableDivisorAccess(pUART);

   /* Set best fractional divider */
   pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000bb0:	ea4f 1209 	mov.w	r2, r9, lsl #4
1a000bb4:	b2d2      	uxtb	r2, r2
1a000bb6:	f00a 010f 	and.w	r1, sl, #15
1a000bba:	430a      	orrs	r2, r1
1a000bbc:	62aa      	str	r2, [r5, #40]	@ 0x28

   /* Return actual baud rate */
   return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000bbe:	0932      	lsrs	r2, r6, #4
1a000bc0:	fb09 f202 	mul.w	r2, r9, r2
1a000bc4:	44d1      	add	r9, sl
1a000bc6:	fb0b f909 	mul.w	r9, fp, r9
1a000bca:	fbb2 fbf9 	udiv	fp, r2, r9
}
1a000bce:	4658      	mov	r0, fp
1a000bd0:	b003      	add	sp, #12
1a000bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000bd6:	bf00      	nop
1a000bd8:	1a002a2c 	.word	0x1a002a2c

1a000bdc <Board_LED_Init>:

static void Board_LED_Init()
{
   uint32_t idx;

   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000bdc:	2200      	movs	r2, #0
1a000bde:	2a05      	cmp	r2, #5
1a000be0:	d81b      	bhi.n	1a000c1a <Board_LED_Init+0x3e>
{
1a000be2:	b510      	push	{r4, lr}
       /* Set pin direction and init to off */
       Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin);
1a000be4:	4b0d      	ldr	r3, [pc, #52]	@ (1a000c1c <Board_LED_Init+0x40>)
1a000be6:	f813 e012 	ldrb.w	lr, [r3, r2, lsl #1]
1a000bea:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a000bee:	f893 c001 	ldrb.w	ip, [r3, #1]
 * @param  pin     : GPIO pin to set direction on as output
 * @return Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
   pGPIO->DIR[port] |= 1UL << pin;
1a000bf2:	4b0b      	ldr	r3, [pc, #44]	@ (1a000c20 <Board_LED_Init+0x44>)
1a000bf4:	f50e 6400 	add.w	r4, lr, #2048	@ 0x800
1a000bf8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
1a000bfc:	2001      	movs	r0, #1
1a000bfe:	fa00 f00c 	lsl.w	r0, r0, ip
1a000c02:	4301      	orrs	r1, r0
1a000c04:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
   pGPIO->B[port][pin] = setting;
1a000c08:	eb03 134e 	add.w	r3, r3, lr, lsl #5
1a000c0c:	2100      	movs	r1, #0
1a000c0e:	f803 100c 	strb.w	r1, [r3, ip]
   for (idx = 0; idx < (sizeof(gpioLEDBits) / sizeof(io_port_t)); ++idx) {
1a000c12:	3201      	adds	r2, #1
1a000c14:	2a05      	cmp	r2, #5
1a000c16:	d9e5      	bls.n	1a000be4 <Board_LED_Init+0x8>
       Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[idx].port, gpioLEDBits[idx].pin, (bool) false);
   }
}
1a000c18:	bd10      	pop	{r4, pc}
1a000c1a:	4770      	bx	lr
1a000c1c:	1a002a3c 	.word	0x1a002a3c
1a000c20:	400f4000 	.word	0x400f4000

1a000c24 <Board_UART_Init>:
 * @note   Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000c24:	4b03      	ldr	r3, [pc, #12]	@ (1a000c34 <Board_UART_Init+0x10>)
1a000c26:	2212      	movs	r2, #18
1a000c28:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
1a000c2c:	22d1      	movs	r2, #209	@ 0xd1
1a000c2e:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
}
1a000c32:	4770      	bx	lr
1a000c34:	40086000 	.word	0x40086000

1a000c38 <Board_Debug_Init>:
{
1a000c38:	b510      	push	{r4, lr}
   Board_UART_Init(DEBUG_UART);
1a000c3a:	4c08      	ldr	r4, [pc, #32]	@ (1a000c5c <Board_Debug_Init+0x24>)
1a000c3c:	4620      	mov	r0, r4
1a000c3e:	f7ff fff1 	bl	1a000c24 <Board_UART_Init>
   Chip_UART_Init(DEBUG_UART);
1a000c42:	4620      	mov	r0, r4
1a000c44:	f7ff ff32 	bl	1a000aac <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, 115200);
1a000c48:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
1a000c4c:	4620      	mov	r0, r4
1a000c4e:	f7ff ff57 	bl	1a000b00 <Chip_UART_SetBaudFDR>
   pUART->LCR = config;
1a000c52:	2303      	movs	r3, #3
1a000c54:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000c56:	2301      	movs	r3, #1
1a000c58:	65e3      	str	r3, [r4, #92]	@ 0x5c
}
1a000c5a:	bd10      	pop	{r4, pc}
1a000c5c:	400c1000 	.word	0x400c1000

1a000c60 <Board_UARTPutChar>:
 * @note   Mask bits of the returned status value with UART_LSR_*
 *         definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
   return pUART->LSR;
1a000c60:	4b03      	ldr	r3, [pc, #12]	@ (1a000c70 <Board_UARTPutChar+0x10>)
1a000c62:	695b      	ldr	r3, [r3, #20]
   while ((Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE) == 0) {}
1a000c64:	f013 0f20 	tst.w	r3, #32
1a000c68:	d0fa      	beq.n	1a000c60 <Board_UARTPutChar>
   pUART->THR = (uint32_t) data;
1a000c6a:	4b01      	ldr	r3, [pc, #4]	@ (1a000c70 <Board_UARTPutChar+0x10>)
1a000c6c:	6018      	str	r0, [r3, #0]
}
1a000c6e:	4770      	bx	lr
1a000c70:	400c1000 	.word	0x400c1000

1a000c74 <Board_UARTGetChar>:
   return pUART->LSR;
1a000c74:	4b05      	ldr	r3, [pc, #20]	@ (1a000c8c <Board_UARTGetChar+0x18>)
1a000c76:	695b      	ldr	r3, [r3, #20]
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a000c78:	f013 0f01 	tst.w	r3, #1
1a000c7c:	d003      	beq.n	1a000c86 <Board_UARTGetChar+0x12>
   return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a000c7e:	4b03      	ldr	r3, [pc, #12]	@ (1a000c8c <Board_UARTGetChar+0x18>)
1a000c80:	6818      	ldr	r0, [r3, #0]
       return (int) Chip_UART_ReadByte(DEBUG_UART);
1a000c82:	b2c0      	uxtb	r0, r0
1a000c84:	4770      	bx	lr
   return EOF;
1a000c86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
1a000c8a:	4770      	bx	lr
1a000c8c:	400c1000 	.word	0x400c1000

1a000c90 <Board_LED_Set>:

void Board_LED_Set(uint8_t LEDNumber, bool On)
{
   if (LEDNumber < (sizeof(gpioLEDBits) / sizeof(io_port_t)))
1a000c90:	2805      	cmp	r0, #5
1a000c92:	d80d      	bhi.n	1a000cb0 <Board_LED_Set+0x20>
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, gpioLEDBits[LEDNumber].port, gpioLEDBits[LEDNumber].pin, (bool) !On);
1a000c94:	4a07      	ldr	r2, [pc, #28]	@ (1a000cb4 <Board_LED_Set+0x24>)
1a000c96:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a000c9a:	eb02 0240 	add.w	r2, r2, r0, lsl #1
1a000c9e:	7852      	ldrb	r2, [r2, #1]
1a000ca0:	f081 0101 	eor.w	r1, r1, #1
1a000ca4:	015b      	lsls	r3, r3, #5
1a000ca6:	f103 2340 	add.w	r3, r3, #1073758208	@ 0x40004000
1a000caa:	f503 2370 	add.w	r3, r3, #983040	@ 0xf0000
1a000cae:	5499      	strb	r1, [r3, r2]
}
1a000cb0:	4770      	bx	lr
1a000cb2:	bf00      	nop
1a000cb4:	1a002a3c 	.word	0x1a002a3c

1a000cb8 <Board_LED_Test>:

bool Board_LED_Test(uint8_t LEDNumber)
{
   if (LEDNumber < (sizeof(gpioLEDBits) / sizeof(io_port_t)))
1a000cb8:	2805      	cmp	r0, #5
1a000cba:	d901      	bls.n	1a000cc0 <Board_LED_Test+0x8>
       return (bool) !Chip_GPIO_GetPinState(LPC_GPIO_PORT, gpioLEDBits[LEDNumber].port, gpioLEDBits[LEDNumber].pin);

   return false;
1a000cbc:	2000      	movs	r0, #0
}
1a000cbe:	4770      	bx	lr
       return (bool) !Chip_GPIO_GetPinState(LPC_GPIO_PORT, gpioLEDBits[LEDNumber].port, gpioLEDBits[LEDNumber].pin);
1a000cc0:	4a07      	ldr	r2, [pc, #28]	@ (1a000ce0 <Board_LED_Test+0x28>)
1a000cc2:	f812 3010 	ldrb.w	r3, [r2, r0, lsl #1]
1a000cc6:	eb02 0240 	add.w	r2, r2, r0, lsl #1
1a000cca:	7852      	ldrb	r2, [r2, #1]
   return (bool) pGPIO->B[port][pin];
1a000ccc:	015b      	lsls	r3, r3, #5
1a000cce:	f103 2340 	add.w	r3, r3, #1073758208	@ 0x40004000
1a000cd2:	f503 2370 	add.w	r3, r3, #983040	@ 0xf0000
1a000cd6:	5c98      	ldrb	r0, [r3, r2]
1a000cd8:	fab0 f080 	clz	r0, r0
1a000cdc:	0940      	lsrs	r0, r0, #5
1a000cde:	4770      	bx	lr
1a000ce0:	1a002a3c 	.word	0x1a002a3c

1a000ce4 <Board_LED_Toggle>:

void Board_LED_Toggle(uint8_t LEDNumber)
{
1a000ce4:	b510      	push	{r4, lr}
1a000ce6:	4604      	mov	r4, r0
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
1a000ce8:	f7ff ffe6 	bl	1a000cb8 <Board_LED_Test>
1a000cec:	f080 0101 	eor.w	r1, r0, #1
1a000cf0:	b2c9      	uxtb	r1, r1
1a000cf2:	4620      	mov	r0, r4
1a000cf4:	f7ff ffcc 	bl	1a000c90 <Board_LED_Set>
}
1a000cf8:	bd10      	pop	{r4, pc}
	...

1a000cfc <Board_Init>:
}

/* Set up and initialize all required blocks and functions related to the
   board hardware */
void Board_Init(void)
{
1a000cfc:	b508      	push	{r3, lr}
   /* Sets up DEBUG UART */
   DEBUGINIT();
1a000cfe:	f7ff ff9b 	bl	1a000c38 <Board_Debug_Init>

   /* Initializes GPIO */
   Chip_GPIO_Init(LPC_GPIO_PORT);
1a000d02:	4806      	ldr	r0, [pc, #24]	@ (1a000d1c <Board_Init+0x20>)
1a000d04:	f7ff fe20 	bl	1a000948 <Chip_GPIO_Init>

   /* Initialize LEDs */
   Board_LED_Init();
1a000d08:	f7ff ff68 	bl	1a000bdc <Board_LED_Init>
 * RMII PHY, and must be called before calling any Ethernet
 * functions.
 */
STATIC INLINE void Chip_ENET_RMIIEnable(LPC_ENET_T *pENET)
{
   LPC_CREG->CREG6 |= 0x4;
1a000d0c:	4a04      	ldr	r2, [pc, #16]	@ (1a000d20 <Board_Init+0x24>)
1a000d0e:	f8d2 312c 	ldr.w	r3, [r2, #300]	@ 0x12c
1a000d12:	f043 0304 	orr.w	r3, r3, #4
1a000d16:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
}
1a000d1a:	bd08      	pop	{r3, pc}
1a000d1c:	400f4000 	.word	0x400f4000
1a000d20:	40043000 	.word	0x40043000

1a000d24 <Chip_SCU_SetPinMuxing>:
 * @return Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
   uint32_t ix;
   for (ix = 0; ix < arrayLength; ix++ ) {
1a000d24:	2300      	movs	r3, #0
1a000d26:	428b      	cmp	r3, r1
1a000d28:	d212      	bcs.n	1a000d50 <Chip_SCU_SetPinMuxing+0x2c>
{
1a000d2a:	b430      	push	{r4, r5}
       Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000d2c:	eb00 0c83 	add.w	ip, r0, r3, lsl #2
1a000d30:	f810 4023 	ldrb.w	r4, [r0, r3, lsl #2]
1a000d34:	f89c 2001 	ldrb.w	r2, [ip, #1]
1a000d38:	f8bc 5002 	ldrh.w	r5, [ip, #2]
   LPC_SCU->SFSP[port][pin] = modefunc;
1a000d3c:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000d40:	4c04      	ldr	r4, [pc, #16]	@ (1a000d54 <Chip_SCU_SetPinMuxing+0x30>)
1a000d42:	f844 5022 	str.w	r5, [r4, r2, lsl #2]
   for (ix = 0; ix < arrayLength; ix++ ) {
1a000d46:	3301      	adds	r3, #1
1a000d48:	428b      	cmp	r3, r1
1a000d4a:	d3ef      	bcc.n	1a000d2c <Chip_SCU_SetPinMuxing+0x8>
   }
}
1a000d4c:	bc30      	pop	{r4, r5}
1a000d4e:	4770      	bx	lr
1a000d50:	4770      	bx	lr
1a000d52:	bf00      	nop
1a000d54:	40086000 	.word	0x40086000

1a000d58 <Board_SetupMuxing>:
 * Public functions
 ****************************************************************************/

/* Sets up system pin muxing */
void Board_SetupMuxing(void)
{
1a000d58:	b508      	push	{r3, lr}
   /* Setup system level pin muxing */
   Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
1a000d5a:	2118      	movs	r1, #24
1a000d5c:	4801      	ldr	r0, [pc, #4]	@ (1a000d64 <Board_SetupMuxing+0xc>)
1a000d5e:	f7ff ffe1 	bl	1a000d24 <Chip_SCU_SetPinMuxing>
}
1a000d62:	bd08      	pop	{r3, pc}
1a000d64:	1a002a50 	.word	0x1a002a50

1a000d68 <Board_SetupClocking>:

/* Set up and initialize clocking prior to call to main */
void Board_SetupClocking(void)
{
1a000d68:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
   uint32_t FAValue = Hz / 21510000;

   LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000d6a:	4a17      	ldr	r2, [pc, #92]	@ (1a000dc8 <Board_SetupClocking+0x60>)
1a000d6c:	f8d2 3120 	ldr.w	r3, [r2, #288]	@ 0x120
1a000d70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
1a000d74:	f443 4310 	orr.w	r3, r3, #36864	@ 0x9000
1a000d78:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
   LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000d7c:	f8d2 3124 	ldr.w	r3, [r2, #292]	@ 0x124
1a000d80:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
1a000d84:	f443 4310 	orr.w	r3, r3, #36864	@ 0x9000
1a000d88:	f8c2 3124 	str.w	r3, [r2, #292]	@ 0x124

   /* Enable Flash acceleration and setup wait states */
   Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);

   /* Setup System core frequency to MAX_CLOCK_FREQ */
   Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000d8c:	2201      	movs	r2, #1
1a000d8e:	490f      	ldr	r1, [pc, #60]	@ (1a000dcc <Board_SetupClocking+0x64>)
1a000d90:	2006      	movs	r0, #6
1a000d92:	f7ff fded 	bl	1a000970 <Chip_SetupCoreClock>

   /* Setup system base clocks and initial states. This won't enable and
      disable individual clocks, but sets up the base clock sources for
      each individual peripheral clock. */
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000d96:	2400      	movs	r4, #0
1a000d98:	e00a      	b.n	1a000db0 <Board_SetupClocking+0x48>
       Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a000d9a:	480d      	ldr	r0, [pc, #52]	@ (1a000dd0 <Board_SetupClocking+0x68>)
1a000d9c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000da0:	78cb      	ldrb	r3, [r1, #3]
1a000da2:	788a      	ldrb	r2, [r1, #2]
1a000da4:	7849      	ldrb	r1, [r1, #1]
1a000da6:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a000daa:	f7ff fd1d 	bl	1a0007e8 <Chip_Clock_SetBaseClock>
   for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a000dae:	3401      	adds	r4, #1
1a000db0:	2c02      	cmp	r4, #2
1a000db2:	d9f2      	bls.n	1a000d9a <Board_SetupClocking+0x32>
                               InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
   }

   /* Reset and enable 32Khz oscillator */
   LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000db4:	4b04      	ldr	r3, [pc, #16]	@ (1a000dc8 <Board_SetupClocking+0x60>)
1a000db6:	685a      	ldr	r2, [r3, #4]
1a000db8:	f022 020c 	bic.w	r2, r2, #12
1a000dbc:	605a      	str	r2, [r3, #4]
   LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000dbe:	685a      	ldr	r2, [r3, #4]
1a000dc0:	f042 0203 	orr.w	r2, r2, #3
1a000dc4:	605a      	str	r2, [r3, #4]
}
1a000dc6:	bd10      	pop	{r4, pc}
1a000dc8:	40043000 	.word	0x40043000
1a000dcc:	0c28cb00 	.word	0x0c28cb00
1a000dd0:	1a002ab0 	.word	0x1a002ab0

1a000dd4 <Board_SystemInit>:

/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000dd4:	b508      	push	{r3, lr}
   /* Setup system clocking and memory. This is done early to allow the
      application and tools to clear memory and use scatter loading to
      external memory. */
   Board_SetupMuxing();
1a000dd6:	f7ff ffbf 	bl	1a000d58 <Board_SetupMuxing>
   Board_SetupClocking();
1a000dda:	f7ff ffc5 	bl	1a000d68 <Board_SetupClocking>
}
1a000dde:	bd08      	pop	{r3, pc}

1a000de0 <ResetISR>:
void ResetISR(void) {
1a000de0:	b510      	push	{r4, lr}
    __asm volatile ("cpsid i");
1a000de2:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000de4:	4b17      	ldr	r3, [pc, #92]	@ (1a000e44 <ResetISR+0x64>)
1a000de6:	4a18      	ldr	r2, [pc, #96]	@ (1a000e48 <ResetISR+0x68>)
1a000de8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000dec:	4a17      	ldr	r2, [pc, #92]	@ (1a000e4c <ResetISR+0x6c>)
1a000dee:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000df2:	2300      	movs	r3, #0
1a000df4:	e005      	b.n	1a000e02 <ResetISR+0x22>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000df6:	4a16      	ldr	r2, [pc, #88]	@ (1a000e50 <ResetISR+0x70>)
1a000df8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
1a000dfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000e00:	3301      	adds	r3, #1
1a000e02:	2b07      	cmp	r3, #7
1a000e04:	d9f7      	bls.n	1a000df6 <ResetISR+0x16>
    __asm volatile ("cpsie i");
1a000e06:	b662      	cpsie	i
    SystemInit();
1a000e08:	f000 f82a 	bl	1a000e60 <SystemInit>
    SectionTableAddr = &__data_section_table;
1a000e0c:	4b11      	ldr	r3, [pc, #68]	@ (1a000e54 <ResetISR+0x74>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000e0e:	e007      	b.n	1a000e20 <ResetISR+0x40>
        SectionLen = *SectionTableAddr++;
1a000e10:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000e14:	689a      	ldr	r2, [r3, #8]
1a000e16:	6859      	ldr	r1, [r3, #4]
1a000e18:	6818      	ldr	r0, [r3, #0]
1a000e1a:	f7ff f9b7 	bl	1a00018c <data_init>
        SectionLen = *SectionTableAddr++;
1a000e1e:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000e20:	4a0d      	ldr	r2, [pc, #52]	@ (1a000e58 <ResetISR+0x78>)
1a000e22:	4293      	cmp	r3, r2
1a000e24:	d3f4      	bcc.n	1a000e10 <ResetISR+0x30>
1a000e26:	e006      	b.n	1a000e36 <ResetISR+0x56>
        ExeAddr = *SectionTableAddr++;
1a000e28:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000e2a:	6859      	ldr	r1, [r3, #4]
1a000e2c:	f854 0b08 	ldr.w	r0, [r4], #8
1a000e30:	f7ff f9bb 	bl	1a0001aa <bss_init>
        SectionLen = *SectionTableAddr++;
1a000e34:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000e36:	4a09      	ldr	r2, [pc, #36]	@ (1a000e5c <ResetISR+0x7c>)
1a000e38:	4293      	cmp	r3, r2
1a000e3a:	d3f5      	bcc.n	1a000e28 <ResetISR+0x48>
    main();
1a000e3c:	f7ff fa74 	bl	1a000328 <main>
    while (1) {
1a000e40:	e7fe      	b.n	1a000e40 <ResetISR+0x60>
1a000e42:	bf00      	nop
1a000e44:	40053000 	.word	0x40053000
1a000e48:	10df1000 	.word	0x10df1000
1a000e4c:	01dff7ff 	.word	0x01dff7ff
1a000e50:	e000e280 	.word	0xe000e280
1a000e54:	1a000114 	.word	0x1a000114
1a000e58:	1a000150 	.word	0x1a000150
1a000e5c:	1a000178 	.word	0x1a000178

1a000e60 <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a000e60:	b508      	push	{r3, lr}

   *pSCB_VTOR = (unsigned int) &__Vectors;
#endif

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a000e62:	f7ff fd4d 	bl	1a000900 <fpuInit>
#if defined(NO_BOARD_LIB)
   /* Chip specific SystemInit */
   Chip_SystemInit();
#else
   /* Board specific SystemInit */
   Board_SystemInit();
1a000e66:	f7ff ffb5 	bl	1a000dd4 <Board_SystemInit>
#endif

#endif /* defined(CORE_M3) || defined(CORE_M4) */
}
1a000e6a:	bd08      	pop	{r3, pc}

1a000e6c <_close_r>:
       __asm__ __volatile__("bkpt 0");
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000e6c:	2309      	movs	r3, #9
1a000e6e:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000e70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a000e74:	4770      	bx	lr

1a000e76 <_fstat_r>:
   return -1;
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd, st);
   SET_ERR(ENOSYS);
1a000e76:	2358      	movs	r3, #88	@ 0x58
1a000e78:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000e7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a000e7e:	4770      	bx	lr

1a000e80 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000e80:	2902      	cmp	r1, #2
1a000e82:	d904      	bls.n	1a000e8e <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a000e84:	2309      	movs	r3, #9
1a000e86:	6003      	str	r3, [r0, #0]
       return -1;
1a000e88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a000e8c:	4770      	bx	lr
       return 1;
1a000e8e:	2001      	movs	r0, #1
   }
}
1a000e90:	4770      	bx	lr

1a000e92 <_lseek_r>:
   return -1;
}

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd, off, w);
   SET_ERR(ENOSYS);
1a000e92:	2358      	movs	r3, #88	@ 0x58
1a000e94:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000e96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a000e9a:	4770      	bx	lr

1a000e9c <_read_r>:
   return -1;
}

_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000e9c:	2902      	cmp	r1, #2
1a000e9e:	d80c      	bhi.n	1a000eba <_read_r+0x1e>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000ea0:	b570      	push	{r4, r5, r6, lr}
1a000ea2:	4616      	mov	r6, r2
1a000ea4:	461d      	mov	r5, r3
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000ea6:	2400      	movs	r4, #0
1a000ea8:	e003      	b.n	1a000eb2 <_read_r+0x16>
           ((char*) b)[i] = Board_UARTGetChar();
1a000eaa:	f7ff fee3 	bl	1a000c74 <Board_UARTGetChar>
1a000eae:	5530      	strb	r0, [r6, r4]
       for (i = 0; i < n; i++)
1a000eb0:	3401      	adds	r4, #1
1a000eb2:	42ac      	cmp	r4, r5
1a000eb4:	d3f9      	bcc.n	1a000eaa <_read_r+0xe>
       return n;
1a000eb6:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000eb8:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000eba:	2313      	movs	r3, #19
1a000ebc:	6003      	str	r3, [r0, #0]
       return -1;
1a000ebe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
1a000ec2:	4770      	bx	lr

1a000ec4 <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000ec4:	4b05      	ldr	r3, [pc, #20]	@ (1a000edc <_sbrk_r+0x18>)
1a000ec6:	681b      	ldr	r3, [r3, #0]
1a000ec8:	b123      	cbz	r3, 1a000ed4 <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000eca:	4b04      	ldr	r3, [pc, #16]	@ (1a000edc <_sbrk_r+0x18>)
1a000ecc:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000ece:	4401      	add	r1, r0
1a000ed0:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000ed2:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000ed4:	4b01      	ldr	r3, [pc, #4]	@ (1a000edc <_sbrk_r+0x18>)
1a000ed6:	4a02      	ldr	r2, [pc, #8]	@ (1a000ee0 <_sbrk_r+0x1c>)
1a000ed8:	601a      	str	r2, [r3, #0]
1a000eda:	e7f6      	b.n	1a000eca <_sbrk_r+0x6>
1a000edc:	1000006c 	.word	0x1000006c
1a000ee0:	100001b4 	.word	0x100001b4

1a000ee4 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000ee4:	2902      	cmp	r1, #2
1a000ee6:	d80c      	bhi.n	1a000f02 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000ee8:	b570      	push	{r4, r5, r6, lr}
1a000eea:	4616      	mov	r6, r2
1a000eec:	461d      	mov	r5, r3
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000eee:	2400      	movs	r4, #0
1a000ef0:	e003      	b.n	1a000efa <_write_r+0x16>
           Board_UARTPutChar(((char*) b)[i]);
1a000ef2:	5d30      	ldrb	r0, [r6, r4]
1a000ef4:	f7ff feb4 	bl	1a000c60 <Board_UARTPutChar>
       for (i = 0; i < n; i++)
1a000ef8:	3401      	adds	r4, #1
1a000efa:	42ac      	cmp	r4, r5
1a000efc:	d3f9      	bcc.n	1a000ef2 <_write_r+0xe>
       return n;
1a000efe:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000f00:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000f02:	2313      	movs	r3, #19
1a000f04:	6003      	str	r3, [r0, #0]
       return -1;
1a000f06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
1a000f0a:	4770      	bx	lr

1a000f0c <__aeabi_uldivmod>:
1a000f0c:	b953      	cbnz	r3, 1a000f24 <__aeabi_uldivmod+0x18>
1a000f0e:	b94a      	cbnz	r2, 1a000f24 <__aeabi_uldivmod+0x18>
1a000f10:	2900      	cmp	r1, #0
1a000f12:	bf08      	it	eq
1a000f14:	2800      	cmpeq	r0, #0
1a000f16:	bf1c      	itt	ne
1a000f18:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
1a000f1c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
1a000f20:	f000 b96a 	b.w	1a0011f8 <__aeabi_idiv0>
1a000f24:	f1ad 0c08 	sub.w	ip, sp, #8
1a000f28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a000f2c:	f000 f806 	bl	1a000f3c <__udivmoddi4>
1a000f30:	f8dd e004 	ldr.w	lr, [sp, #4]
1a000f34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a000f38:	b004      	add	sp, #16
1a000f3a:	4770      	bx	lr

1a000f3c <__udivmoddi4>:
1a000f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000f40:	9d08      	ldr	r5, [sp, #32]
1a000f42:	460e      	mov	r6, r1
1a000f44:	4604      	mov	r4, r0
1a000f46:	460f      	mov	r7, r1
1a000f48:	2b00      	cmp	r3, #0
1a000f4a:	d14a      	bne.n	1a000fe2 <__udivmoddi4+0xa6>
1a000f4c:	4694      	mov	ip, r2
1a000f4e:	458c      	cmp	ip, r1
1a000f50:	fab2 f282 	clz	r2, r2
1a000f54:	d960      	bls.n	1a001018 <__udivmoddi4+0xdc>
1a000f56:	b142      	cbz	r2, 1a000f6a <__udivmoddi4+0x2e>
1a000f58:	f1c2 0320 	rsb	r3, r2, #32
1a000f5c:	4097      	lsls	r7, r2
1a000f5e:	fa20 f303 	lsr.w	r3, r0, r3
1a000f62:	fa0c fc02 	lsl.w	ip, ip, r2
1a000f66:	431f      	orrs	r7, r3
1a000f68:	4094      	lsls	r4, r2
1a000f6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
1a000f6e:	fa1f f68c 	uxth.w	r6, ip
1a000f72:	fbb7 f1fe 	udiv	r1, r7, lr
1a000f76:	0c23      	lsrs	r3, r4, #16
1a000f78:	fb0e 7711 	mls	r7, lr, r1, r7
1a000f7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a000f80:	fb01 f006 	mul.w	r0, r1, r6
1a000f84:	4298      	cmp	r0, r3
1a000f86:	d90a      	bls.n	1a000f9e <__udivmoddi4+0x62>
1a000f88:	eb1c 0303 	adds.w	r3, ip, r3
1a000f8c:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
1a000f90:	f080 8115 	bcs.w	1a0011be <__udivmoddi4+0x282>
1a000f94:	4298      	cmp	r0, r3
1a000f96:	f240 8112 	bls.w	1a0011be <__udivmoddi4+0x282>
1a000f9a:	3902      	subs	r1, #2
1a000f9c:	4463      	add	r3, ip
1a000f9e:	1a1b      	subs	r3, r3, r0
1a000fa0:	b2a4      	uxth	r4, r4
1a000fa2:	fbb3 f0fe 	udiv	r0, r3, lr
1a000fa6:	fb0e 3310 	mls	r3, lr, r0, r3
1a000faa:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a000fae:	fb00 f606 	mul.w	r6, r0, r6
1a000fb2:	42a6      	cmp	r6, r4
1a000fb4:	d90a      	bls.n	1a000fcc <__udivmoddi4+0x90>
1a000fb6:	eb1c 0404 	adds.w	r4, ip, r4
1a000fba:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
1a000fbe:	f080 8100 	bcs.w	1a0011c2 <__udivmoddi4+0x286>
1a000fc2:	42a6      	cmp	r6, r4
1a000fc4:	f240 80fd 	bls.w	1a0011c2 <__udivmoddi4+0x286>
1a000fc8:	4464      	add	r4, ip
1a000fca:	3802      	subs	r0, #2
1a000fcc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
1a000fd0:	1ba4      	subs	r4, r4, r6
1a000fd2:	2100      	movs	r1, #0
1a000fd4:	b11d      	cbz	r5, 1a000fde <__udivmoddi4+0xa2>
1a000fd6:	40d4      	lsrs	r4, r2
1a000fd8:	2300      	movs	r3, #0
1a000fda:	e9c5 4300 	strd	r4, r3, [r5]
1a000fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a000fe2:	428b      	cmp	r3, r1
1a000fe4:	d905      	bls.n	1a000ff2 <__udivmoddi4+0xb6>
1a000fe6:	b10d      	cbz	r5, 1a000fec <__udivmoddi4+0xb0>
1a000fe8:	e9c5 0100 	strd	r0, r1, [r5]
1a000fec:	2100      	movs	r1, #0
1a000fee:	4608      	mov	r0, r1
1a000ff0:	e7f5      	b.n	1a000fde <__udivmoddi4+0xa2>
1a000ff2:	fab3 f183 	clz	r1, r3
1a000ff6:	2900      	cmp	r1, #0
1a000ff8:	d146      	bne.n	1a001088 <__udivmoddi4+0x14c>
1a000ffa:	42b3      	cmp	r3, r6
1a000ffc:	d302      	bcc.n	1a001004 <__udivmoddi4+0xc8>
1a000ffe:	4282      	cmp	r2, r0
1a001000:	f200 80f5 	bhi.w	1a0011ee <__udivmoddi4+0x2b2>
1a001004:	1a84      	subs	r4, r0, r2
1a001006:	eb66 0203 	sbc.w	r2, r6, r3
1a00100a:	2001      	movs	r0, #1
1a00100c:	4617      	mov	r7, r2
1a00100e:	2d00      	cmp	r5, #0
1a001010:	d0e5      	beq.n	1a000fde <__udivmoddi4+0xa2>
1a001012:	e9c5 4700 	strd	r4, r7, [r5]
1a001016:	e7e2      	b.n	1a000fde <__udivmoddi4+0xa2>
1a001018:	2a00      	cmp	r2, #0
1a00101a:	f040 8093 	bne.w	1a001144 <__udivmoddi4+0x208>
1a00101e:	eba1 030c 	sub.w	r3, r1, ip
1a001022:	ea4f 471c 	mov.w	r7, ip, lsr #16
1a001026:	fa1f fe8c 	uxth.w	lr, ip
1a00102a:	2101      	movs	r1, #1
1a00102c:	fbb3 f6f7 	udiv	r6, r3, r7
1a001030:	fb07 3016 	mls	r0, r7, r6, r3
1a001034:	0c23      	lsrs	r3, r4, #16
1a001036:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1a00103a:	fb0e f006 	mul.w	r0, lr, r6
1a00103e:	4298      	cmp	r0, r3
1a001040:	d908      	bls.n	1a001054 <__udivmoddi4+0x118>
1a001042:	eb1c 0303 	adds.w	r3, ip, r3
1a001046:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
1a00104a:	d202      	bcs.n	1a001052 <__udivmoddi4+0x116>
1a00104c:	4298      	cmp	r0, r3
1a00104e:	f200 80d0 	bhi.w	1a0011f2 <__udivmoddi4+0x2b6>
1a001052:	4646      	mov	r6, r8
1a001054:	1a1b      	subs	r3, r3, r0
1a001056:	b2a4      	uxth	r4, r4
1a001058:	fbb3 f0f7 	udiv	r0, r3, r7
1a00105c:	fb07 3310 	mls	r3, r7, r0, r3
1a001060:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001064:	fb0e fe00 	mul.w	lr, lr, r0
1a001068:	45a6      	cmp	lr, r4
1a00106a:	d908      	bls.n	1a00107e <__udivmoddi4+0x142>
1a00106c:	eb1c 0404 	adds.w	r4, ip, r4
1a001070:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
1a001074:	d202      	bcs.n	1a00107c <__udivmoddi4+0x140>
1a001076:	45a6      	cmp	lr, r4
1a001078:	f200 80b6 	bhi.w	1a0011e8 <__udivmoddi4+0x2ac>
1a00107c:	4618      	mov	r0, r3
1a00107e:	eba4 040e 	sub.w	r4, r4, lr
1a001082:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
1a001086:	e7a5      	b.n	1a000fd4 <__udivmoddi4+0x98>
1a001088:	f1c1 0720 	rsb	r7, r1, #32
1a00108c:	408b      	lsls	r3, r1
1a00108e:	fa22 fc07 	lsr.w	ip, r2, r7
1a001092:	ea4c 0c03 	orr.w	ip, ip, r3
1a001096:	fa06 fe01 	lsl.w	lr, r6, r1
1a00109a:	fa20 f407 	lsr.w	r4, r0, r7
1a00109e:	fa26 f307 	lsr.w	r3, r6, r7
1a0010a2:	ea44 040e 	orr.w	r4, r4, lr
1a0010a6:	fa00 f801 	lsl.w	r8, r0, r1
1a0010aa:	ea4f 401c 	mov.w	r0, ip, lsr #16
1a0010ae:	ea4f 4914 	mov.w	r9, r4, lsr #16
1a0010b2:	fbb3 fef0 	udiv	lr, r3, r0
1a0010b6:	fa1f f68c 	uxth.w	r6, ip
1a0010ba:	fb00 331e 	mls	r3, r0, lr, r3
1a0010be:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
1a0010c2:	fb0e f906 	mul.w	r9, lr, r6
1a0010c6:	4599      	cmp	r9, r3
1a0010c8:	fa02 f201 	lsl.w	r2, r2, r1
1a0010cc:	d90b      	bls.n	1a0010e6 <__udivmoddi4+0x1aa>
1a0010ce:	eb1c 0303 	adds.w	r3, ip, r3
1a0010d2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
1a0010d6:	f080 8085 	bcs.w	1a0011e4 <__udivmoddi4+0x2a8>
1a0010da:	4599      	cmp	r9, r3
1a0010dc:	f240 8082 	bls.w	1a0011e4 <__udivmoddi4+0x2a8>
1a0010e0:	f1ae 0e02 	sub.w	lr, lr, #2
1a0010e4:	4463      	add	r3, ip
1a0010e6:	eba3 0909 	sub.w	r9, r3, r9
1a0010ea:	b2a4      	uxth	r4, r4
1a0010ec:	fbb9 f3f0 	udiv	r3, r9, r0
1a0010f0:	fb00 9913 	mls	r9, r0, r3, r9
1a0010f4:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
1a0010f8:	fb03 f606 	mul.w	r6, r3, r6
1a0010fc:	42a6      	cmp	r6, r4
1a0010fe:	d908      	bls.n	1a001112 <__udivmoddi4+0x1d6>
1a001100:	eb1c 0404 	adds.w	r4, ip, r4
1a001104:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
1a001108:	d268      	bcs.n	1a0011dc <__udivmoddi4+0x2a0>
1a00110a:	42a6      	cmp	r6, r4
1a00110c:	d966      	bls.n	1a0011dc <__udivmoddi4+0x2a0>
1a00110e:	3b02      	subs	r3, #2
1a001110:	4464      	add	r4, ip
1a001112:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
1a001116:	1ba4      	subs	r4, r4, r6
1a001118:	fba0 e602 	umull	lr, r6, r0, r2
1a00111c:	42b4      	cmp	r4, r6
1a00111e:	4673      	mov	r3, lr
1a001120:	46b1      	mov	r9, r6
1a001122:	d352      	bcc.n	1a0011ca <__udivmoddi4+0x28e>
1a001124:	d04f      	beq.n	1a0011c6 <__udivmoddi4+0x28a>
1a001126:	b15d      	cbz	r5, 1a001140 <__udivmoddi4+0x204>
1a001128:	ebb8 0203 	subs.w	r2, r8, r3
1a00112c:	eb64 0409 	sbc.w	r4, r4, r9
1a001130:	fa04 f707 	lsl.w	r7, r4, r7
1a001134:	fa22 f301 	lsr.w	r3, r2, r1
1a001138:	431f      	orrs	r7, r3
1a00113a:	40cc      	lsrs	r4, r1
1a00113c:	e9c5 7400 	strd	r7, r4, [r5]
1a001140:	2100      	movs	r1, #0
1a001142:	e74c      	b.n	1a000fde <__udivmoddi4+0xa2>
1a001144:	f1c2 0120 	rsb	r1, r2, #32
1a001148:	fa20 f301 	lsr.w	r3, r0, r1
1a00114c:	fa0c fc02 	lsl.w	ip, ip, r2
1a001150:	fa26 f101 	lsr.w	r1, r6, r1
1a001154:	4096      	lsls	r6, r2
1a001156:	4333      	orrs	r3, r6
1a001158:	ea4f 471c 	mov.w	r7, ip, lsr #16
1a00115c:	fa1f fe8c 	uxth.w	lr, ip
1a001160:	fbb1 f0f7 	udiv	r0, r1, r7
1a001164:	fb07 1610 	mls	r6, r7, r0, r1
1a001168:	0c19      	lsrs	r1, r3, #16
1a00116a:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
1a00116e:	fb00 f60e 	mul.w	r6, r0, lr
1a001172:	428e      	cmp	r6, r1
1a001174:	fa04 f402 	lsl.w	r4, r4, r2
1a001178:	d908      	bls.n	1a00118c <__udivmoddi4+0x250>
1a00117a:	eb1c 0101 	adds.w	r1, ip, r1
1a00117e:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
1a001182:	d22d      	bcs.n	1a0011e0 <__udivmoddi4+0x2a4>
1a001184:	428e      	cmp	r6, r1
1a001186:	d92b      	bls.n	1a0011e0 <__udivmoddi4+0x2a4>
1a001188:	3802      	subs	r0, #2
1a00118a:	4461      	add	r1, ip
1a00118c:	1b89      	subs	r1, r1, r6
1a00118e:	b29b      	uxth	r3, r3
1a001190:	fbb1 f6f7 	udiv	r6, r1, r7
1a001194:	fb07 1116 	mls	r1, r7, r6, r1
1a001198:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00119c:	fb06 f10e 	mul.w	r1, r6, lr
1a0011a0:	4299      	cmp	r1, r3
1a0011a2:	d908      	bls.n	1a0011b6 <__udivmoddi4+0x27a>
1a0011a4:	eb1c 0303 	adds.w	r3, ip, r3
1a0011a8:	f106 38ff 	add.w	r8, r6, #4294967295	@ 0xffffffff
1a0011ac:	d214      	bcs.n	1a0011d8 <__udivmoddi4+0x29c>
1a0011ae:	4299      	cmp	r1, r3
1a0011b0:	d912      	bls.n	1a0011d8 <__udivmoddi4+0x29c>
1a0011b2:	3e02      	subs	r6, #2
1a0011b4:	4463      	add	r3, ip
1a0011b6:	1a5b      	subs	r3, r3, r1
1a0011b8:	ea46 4100 	orr.w	r1, r6, r0, lsl #16
1a0011bc:	e736      	b.n	1a00102c <__udivmoddi4+0xf0>
1a0011be:	4639      	mov	r1, r7
1a0011c0:	e6ed      	b.n	1a000f9e <__udivmoddi4+0x62>
1a0011c2:	4618      	mov	r0, r3
1a0011c4:	e702      	b.n	1a000fcc <__udivmoddi4+0x90>
1a0011c6:	45f0      	cmp	r8, lr
1a0011c8:	d2ad      	bcs.n	1a001126 <__udivmoddi4+0x1ea>
1a0011ca:	ebbe 0302 	subs.w	r3, lr, r2
1a0011ce:	eb66 060c 	sbc.w	r6, r6, ip
1a0011d2:	3801      	subs	r0, #1
1a0011d4:	46b1      	mov	r9, r6
1a0011d6:	e7a6      	b.n	1a001126 <__udivmoddi4+0x1ea>
1a0011d8:	4646      	mov	r6, r8
1a0011da:	e7ec      	b.n	1a0011b6 <__udivmoddi4+0x27a>
1a0011dc:	4603      	mov	r3, r0
1a0011de:	e798      	b.n	1a001112 <__udivmoddi4+0x1d6>
1a0011e0:	4640      	mov	r0, r8
1a0011e2:	e7d3      	b.n	1a00118c <__udivmoddi4+0x250>
1a0011e4:	46d6      	mov	lr, sl
1a0011e6:	e77e      	b.n	1a0010e6 <__udivmoddi4+0x1aa>
1a0011e8:	4464      	add	r4, ip
1a0011ea:	3802      	subs	r0, #2
1a0011ec:	e747      	b.n	1a00107e <__udivmoddi4+0x142>
1a0011ee:	4608      	mov	r0, r1
1a0011f0:	e70d      	b.n	1a00100e <__udivmoddi4+0xd2>
1a0011f2:	3e02      	subs	r6, #2
1a0011f4:	4463      	add	r3, ip
1a0011f6:	e72d      	b.n	1a001054 <__udivmoddi4+0x118>

1a0011f8 <__aeabi_idiv0>:
1a0011f8:	4770      	bx	lr
1a0011fa:	bf00      	nop

1a0011fc <memset>:
1a0011fc:	0783      	lsls	r3, r0, #30
1a0011fe:	b530      	push	{r4, r5, lr}
1a001200:	d047      	beq.n	1a001292 <memset+0x96>
1a001202:	1e54      	subs	r4, r2, #1
1a001204:	2a00      	cmp	r2, #0
1a001206:	d03e      	beq.n	1a001286 <memset+0x8a>
1a001208:	b2ca      	uxtb	r2, r1
1a00120a:	4603      	mov	r3, r0
1a00120c:	e001      	b.n	1a001212 <memset+0x16>
1a00120e:	3c01      	subs	r4, #1
1a001210:	d339      	bcc.n	1a001286 <memset+0x8a>
1a001212:	f803 2b01 	strb.w	r2, [r3], #1
1a001216:	079d      	lsls	r5, r3, #30
1a001218:	d1f9      	bne.n	1a00120e <memset+0x12>
1a00121a:	2c03      	cmp	r4, #3
1a00121c:	d92c      	bls.n	1a001278 <memset+0x7c>
1a00121e:	b2cd      	uxtb	r5, r1
1a001220:	eb05 2505 	add.w	r5, r5, r5, lsl #8
1a001224:	2c0f      	cmp	r4, #15
1a001226:	eb05 4505 	add.w	r5, r5, r5, lsl #16
1a00122a:	d935      	bls.n	1a001298 <memset+0x9c>
1a00122c:	f1a4 0210 	sub.w	r2, r4, #16
1a001230:	f022 0c0f 	bic.w	ip, r2, #15
1a001234:	f103 0e10 	add.w	lr, r3, #16
1a001238:	44e6      	add	lr, ip
1a00123a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
1a00123e:	461a      	mov	r2, r3
1a001240:	e9c2 5500 	strd	r5, r5, [r2]
1a001244:	e9c2 5502 	strd	r5, r5, [r2, #8]
1a001248:	3210      	adds	r2, #16
1a00124a:	4572      	cmp	r2, lr
1a00124c:	d1f8      	bne.n	1a001240 <memset+0x44>
1a00124e:	f10c 0201 	add.w	r2, ip, #1
1a001252:	f014 0f0c 	tst.w	r4, #12
1a001256:	eb03 1202 	add.w	r2, r3, r2, lsl #4
1a00125a:	f004 0c0f 	and.w	ip, r4, #15
1a00125e:	d013      	beq.n	1a001288 <memset+0x8c>
1a001260:	f1ac 0304 	sub.w	r3, ip, #4
1a001264:	f023 0303 	bic.w	r3, r3, #3
1a001268:	3304      	adds	r3, #4
1a00126a:	4413      	add	r3, r2
1a00126c:	f842 5b04 	str.w	r5, [r2], #4
1a001270:	4293      	cmp	r3, r2
1a001272:	d1fb      	bne.n	1a00126c <memset+0x70>
1a001274:	f00c 0403 	and.w	r4, ip, #3
1a001278:	b12c      	cbz	r4, 1a001286 <memset+0x8a>
1a00127a:	b2c9      	uxtb	r1, r1
1a00127c:	441c      	add	r4, r3
1a00127e:	f803 1b01 	strb.w	r1, [r3], #1
1a001282:	42a3      	cmp	r3, r4
1a001284:	d1fb      	bne.n	1a00127e <memset+0x82>
1a001286:	bd30      	pop	{r4, r5, pc}
1a001288:	4664      	mov	r4, ip
1a00128a:	4613      	mov	r3, r2
1a00128c:	2c00      	cmp	r4, #0
1a00128e:	d1f4      	bne.n	1a00127a <memset+0x7e>
1a001290:	e7f9      	b.n	1a001286 <memset+0x8a>
1a001292:	4603      	mov	r3, r0
1a001294:	4614      	mov	r4, r2
1a001296:	e7c0      	b.n	1a00121a <memset+0x1e>
1a001298:	461a      	mov	r2, r3
1a00129a:	46a4      	mov	ip, r4
1a00129c:	e7e0      	b.n	1a001260 <memset+0x64>
1a00129e:	bf00      	nop

1a0012a0 <memcpy>:
1a0012a0:	4684      	mov	ip, r0
1a0012a2:	ea41 0300 	orr.w	r3, r1, r0
1a0012a6:	f013 0303 	ands.w	r3, r3, #3
1a0012aa:	d16d      	bne.n	1a001388 <memcpy+0xe8>
1a0012ac:	3a40      	subs	r2, #64	@ 0x40
1a0012ae:	d341      	bcc.n	1a001334 <memcpy+0x94>
1a0012b0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0012b4:	f840 3b04 	str.w	r3, [r0], #4
1a0012b8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0012bc:	f840 3b04 	str.w	r3, [r0], #4
1a0012c0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0012c4:	f840 3b04 	str.w	r3, [r0], #4
1a0012c8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0012cc:	f840 3b04 	str.w	r3, [r0], #4
1a0012d0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0012d4:	f840 3b04 	str.w	r3, [r0], #4
1a0012d8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0012dc:	f840 3b04 	str.w	r3, [r0], #4
1a0012e0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0012e4:	f840 3b04 	str.w	r3, [r0], #4
1a0012e8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0012ec:	f840 3b04 	str.w	r3, [r0], #4
1a0012f0:	f851 3b04 	ldr.w	r3, [r1], #4
1a0012f4:	f840 3b04 	str.w	r3, [r0], #4
1a0012f8:	f851 3b04 	ldr.w	r3, [r1], #4
1a0012fc:	f840 3b04 	str.w	r3, [r0], #4
1a001300:	f851 3b04 	ldr.w	r3, [r1], #4
1a001304:	f840 3b04 	str.w	r3, [r0], #4
1a001308:	f851 3b04 	ldr.w	r3, [r1], #4
1a00130c:	f840 3b04 	str.w	r3, [r0], #4
1a001310:	f851 3b04 	ldr.w	r3, [r1], #4
1a001314:	f840 3b04 	str.w	r3, [r0], #4
1a001318:	f851 3b04 	ldr.w	r3, [r1], #4
1a00131c:	f840 3b04 	str.w	r3, [r0], #4
1a001320:	f851 3b04 	ldr.w	r3, [r1], #4
1a001324:	f840 3b04 	str.w	r3, [r0], #4
1a001328:	f851 3b04 	ldr.w	r3, [r1], #4
1a00132c:	f840 3b04 	str.w	r3, [r0], #4
1a001330:	3a40      	subs	r2, #64	@ 0x40
1a001332:	d2bd      	bcs.n	1a0012b0 <memcpy+0x10>
1a001334:	3230      	adds	r2, #48	@ 0x30
1a001336:	d311      	bcc.n	1a00135c <memcpy+0xbc>
1a001338:	f851 3b04 	ldr.w	r3, [r1], #4
1a00133c:	f840 3b04 	str.w	r3, [r0], #4
1a001340:	f851 3b04 	ldr.w	r3, [r1], #4
1a001344:	f840 3b04 	str.w	r3, [r0], #4
1a001348:	f851 3b04 	ldr.w	r3, [r1], #4
1a00134c:	f840 3b04 	str.w	r3, [r0], #4
1a001350:	f851 3b04 	ldr.w	r3, [r1], #4
1a001354:	f840 3b04 	str.w	r3, [r0], #4
1a001358:	3a10      	subs	r2, #16
1a00135a:	d2ed      	bcs.n	1a001338 <memcpy+0x98>
1a00135c:	320c      	adds	r2, #12
1a00135e:	d305      	bcc.n	1a00136c <memcpy+0xcc>
1a001360:	f851 3b04 	ldr.w	r3, [r1], #4
1a001364:	f840 3b04 	str.w	r3, [r0], #4
1a001368:	3a04      	subs	r2, #4
1a00136a:	d2f9      	bcs.n	1a001360 <memcpy+0xc0>
1a00136c:	3204      	adds	r2, #4
1a00136e:	d008      	beq.n	1a001382 <memcpy+0xe2>
1a001370:	07d2      	lsls	r2, r2, #31
1a001372:	bf1c      	itt	ne
1a001374:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a001378:	f800 3b01 	strbne.w	r3, [r0], #1
1a00137c:	d301      	bcc.n	1a001382 <memcpy+0xe2>
1a00137e:	880b      	ldrh	r3, [r1, #0]
1a001380:	8003      	strh	r3, [r0, #0]
1a001382:	4660      	mov	r0, ip
1a001384:	4770      	bx	lr
1a001386:	bf00      	nop
1a001388:	2a08      	cmp	r2, #8
1a00138a:	d313      	bcc.n	1a0013b4 <memcpy+0x114>
1a00138c:	078b      	lsls	r3, r1, #30
1a00138e:	d08d      	beq.n	1a0012ac <memcpy+0xc>
1a001390:	f010 0303 	ands.w	r3, r0, #3
1a001394:	d08a      	beq.n	1a0012ac <memcpy+0xc>
1a001396:	f1c3 0304 	rsb	r3, r3, #4
1a00139a:	1ad2      	subs	r2, r2, r3
1a00139c:	07db      	lsls	r3, r3, #31
1a00139e:	bf1c      	itt	ne
1a0013a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
1a0013a4:	f800 3b01 	strbne.w	r3, [r0], #1
1a0013a8:	d380      	bcc.n	1a0012ac <memcpy+0xc>
1a0013aa:	f831 3b02 	ldrh.w	r3, [r1], #2
1a0013ae:	f820 3b02 	strh.w	r3, [r0], #2
1a0013b2:	e77b      	b.n	1a0012ac <memcpy+0xc>
1a0013b4:	3a04      	subs	r2, #4
1a0013b6:	d3d9      	bcc.n	1a00136c <memcpy+0xcc>
1a0013b8:	3a01      	subs	r2, #1
1a0013ba:	f811 3b01 	ldrb.w	r3, [r1], #1
1a0013be:	f800 3b01 	strb.w	r3, [r0], #1
1a0013c2:	d2f9      	bcs.n	1a0013b8 <memcpy+0x118>
1a0013c4:	780b      	ldrb	r3, [r1, #0]
1a0013c6:	7003      	strb	r3, [r0, #0]
1a0013c8:	784b      	ldrb	r3, [r1, #1]
1a0013ca:	7043      	strb	r3, [r0, #1]
1a0013cc:	788b      	ldrb	r3, [r1, #2]
1a0013ce:	7083      	strb	r3, [r0, #2]
1a0013d0:	4660      	mov	r0, ip
1a0013d2:	4770      	bx	lr

1a0013d4 <_iprintf_r>:
1a0013d4:	b40e      	push	{r1, r2, r3}
1a0013d6:	b500      	push	{lr}
1a0013d8:	b082      	sub	sp, #8
1a0013da:	ab03      	add	r3, sp, #12
1a0013dc:	6881      	ldr	r1, [r0, #8]
1a0013de:	f853 2b04 	ldr.w	r2, [r3], #4
1a0013e2:	9301      	str	r3, [sp, #4]
1a0013e4:	f000 f860 	bl	1a0014a8 <_vfiprintf_r>
1a0013e8:	b002      	add	sp, #8
1a0013ea:	f85d eb04 	ldr.w	lr, [sp], #4
1a0013ee:	b003      	add	sp, #12
1a0013f0:	4770      	bx	lr
1a0013f2:	bf00      	nop

1a0013f4 <iprintf>:
1a0013f4:	b40f      	push	{r0, r1, r2, r3}
1a0013f6:	b500      	push	{lr}
1a0013f8:	4907      	ldr	r1, [pc, #28]	@ (1a001418 <iprintf+0x24>)
1a0013fa:	b083      	sub	sp, #12
1a0013fc:	ab04      	add	r3, sp, #16
1a0013fe:	6808      	ldr	r0, [r1, #0]
1a001400:	f853 2b04 	ldr.w	r2, [r3], #4
1a001404:	6881      	ldr	r1, [r0, #8]
1a001406:	9301      	str	r3, [sp, #4]
1a001408:	f000 f84e 	bl	1a0014a8 <_vfiprintf_r>
1a00140c:	b003      	add	sp, #12
1a00140e:	f85d eb04 	ldr.w	lr, [sp], #4
1a001412:	b004      	add	sp, #16
1a001414:	4770      	bx	lr
1a001416:	bf00      	nop
1a001418:	10000000 	.word	0x10000000

1a00141c <__sfputc_r>:
1a00141c:	6893      	ldr	r3, [r2, #8]
1a00141e:	3b01      	subs	r3, #1
1a001420:	2b00      	cmp	r3, #0
1a001422:	6093      	str	r3, [r2, #8]
1a001424:	da11      	bge.n	1a00144a <__sfputc_r+0x2e>
1a001426:	b410      	push	{r4}
1a001428:	6994      	ldr	r4, [r2, #24]
1a00142a:	42a3      	cmp	r3, r4
1a00142c:	db09      	blt.n	1a001442 <__sfputc_r+0x26>
1a00142e:	290a      	cmp	r1, #10
1a001430:	d007      	beq.n	1a001442 <__sfputc_r+0x26>
1a001432:	6813      	ldr	r3, [r2, #0]
1a001434:	1c58      	adds	r0, r3, #1
1a001436:	6010      	str	r0, [r2, #0]
1a001438:	7019      	strb	r1, [r3, #0]
1a00143a:	4608      	mov	r0, r1
1a00143c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001440:	4770      	bx	lr
1a001442:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001446:	f000 b973 	b.w	1a001730 <__swbuf_r>
1a00144a:	6813      	ldr	r3, [r2, #0]
1a00144c:	1c58      	adds	r0, r3, #1
1a00144e:	6010      	str	r0, [r2, #0]
1a001450:	7019      	strb	r1, [r3, #0]
1a001452:	4608      	mov	r0, r1
1a001454:	4770      	bx	lr
1a001456:	bf00      	nop

1a001458 <__sfputs_r>:
1a001458:	b19b      	cbz	r3, 1a001482 <__sfputs_r+0x2a>
1a00145a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a00145c:	4413      	add	r3, r2
1a00145e:	4606      	mov	r6, r0
1a001460:	460f      	mov	r7, r1
1a001462:	1e54      	subs	r4, r2, #1
1a001464:	1e5d      	subs	r5, r3, #1
1a001466:	e001      	b.n	1a00146c <__sfputs_r+0x14>
1a001468:	42ac      	cmp	r4, r5
1a00146a:	d008      	beq.n	1a00147e <__sfputs_r+0x26>
1a00146c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
1a001470:	463a      	mov	r2, r7
1a001472:	4630      	mov	r0, r6
1a001474:	f7ff ffd2 	bl	1a00141c <__sfputc_r>
1a001478:	1c43      	adds	r3, r0, #1
1a00147a:	d1f5      	bne.n	1a001468 <__sfputs_r+0x10>
1a00147c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00147e:	2000      	movs	r0, #0
1a001480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001482:	2000      	movs	r0, #0
1a001484:	4770      	bx	lr
1a001486:	bf00      	nop

1a001488 <__sprint_r>:
1a001488:	6893      	ldr	r3, [r2, #8]
1a00148a:	b510      	push	{r4, lr}
1a00148c:	4614      	mov	r4, r2
1a00148e:	b91b      	cbnz	r3, 1a001498 <__sprint_r+0x10>
1a001490:	4618      	mov	r0, r3
1a001492:	2300      	movs	r3, #0
1a001494:	6063      	str	r3, [r4, #4]
1a001496:	bd10      	pop	{r4, pc}
1a001498:	f000 f99a 	bl	1a0017d0 <__sfvwrite_r>
1a00149c:	2300      	movs	r3, #0
1a00149e:	60a3      	str	r3, [r4, #8]
1a0014a0:	2300      	movs	r3, #0
1a0014a2:	6063      	str	r3, [r4, #4]
1a0014a4:	bd10      	pop	{r4, pc}
1a0014a6:	bf00      	nop

1a0014a8 <_vfiprintf_r>:
1a0014a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0014ac:	b0a1      	sub	sp, #132	@ 0x84
1a0014ae:	468b      	mov	fp, r1
1a0014b0:	4691      	mov	r9, r2
1a0014b2:	461c      	mov	r4, r3
1a0014b4:	9004      	str	r0, [sp, #16]
1a0014b6:	b118      	cbz	r0, 1a0014c0 <_vfiprintf_r+0x18>
1a0014b8:	6a03      	ldr	r3, [r0, #32]
1a0014ba:	2b00      	cmp	r3, #0
1a0014bc:	f000 811c 	beq.w	1a0016f8 <_vfiprintf_r+0x250>
1a0014c0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
1a0014c4:	0718      	lsls	r0, r3, #28
1a0014c6:	f140 8095 	bpl.w	1a0015f4 <_vfiprintf_r+0x14c>
1a0014ca:	f8db 3010 	ldr.w	r3, [fp, #16]
1a0014ce:	2b00      	cmp	r3, #0
1a0014d0:	f000 8090 	beq.w	1a0015f4 <_vfiprintf_r+0x14c>
1a0014d4:	2300      	movs	r3, #0
1a0014d6:	46ca      	mov	sl, r9
1a0014d8:	930d      	str	r3, [sp, #52]	@ 0x34
1a0014da:	f243 0320 	movw	r3, #12320	@ 0x3020
1a0014de:	f8ad 3039 	strh.w	r3, [sp, #57]	@ 0x39
1a0014e2:	f89a 3000 	ldrb.w	r3, [sl]
1a0014e6:	4e86      	ldr	r6, [pc, #536]	@ (1a001700 <_vfiprintf_r+0x258>)
1a0014e8:	9407      	str	r4, [sp, #28]
1a0014ea:	2701      	movs	r7, #1
1a0014ec:	2b00      	cmp	r3, #0
1a0014ee:	d079      	beq.n	1a0015e4 <_vfiprintf_r+0x13c>
1a0014f0:	46d1      	mov	r9, sl
1a0014f2:	e004      	b.n	1a0014fe <_vfiprintf_r+0x56>
1a0014f4:	f819 3f01 	ldrb.w	r3, [r9, #1]!
1a0014f8:	2b00      	cmp	r3, #0
1a0014fa:	f000 8085 	beq.w	1a001608 <_vfiprintf_r+0x160>
1a0014fe:	2b25      	cmp	r3, #37	@ 0x25
1a001500:	d1f8      	bne.n	1a0014f4 <_vfiprintf_r+0x4c>
1a001502:	ebb9 080a 	subs.w	r8, r9, sl
1a001506:	f040 8082 	bne.w	1a00160e <_vfiprintf_r+0x166>
1a00150a:	f899 3000 	ldrb.w	r3, [r9]
1a00150e:	2b00      	cmp	r3, #0
1a001510:	d068      	beq.n	1a0015e4 <_vfiprintf_r+0x13c>
1a001512:	2300      	movs	r3, #0
1a001514:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
1a001518:	e9cd 2309 	strd	r2, r3, [sp, #36]	@ 0x24
1a00151c:	f109 0901 	add.w	r9, r9, #1
1a001520:	9308      	str	r3, [sp, #32]
1a001522:	930b      	str	r3, [sp, #44]	@ 0x2c
1a001524:	f88d 3063 	strb.w	r3, [sp, #99]	@ 0x63
1a001528:	931e      	str	r3, [sp, #120]	@ 0x78
1a00152a:	e005      	b.n	1a001538 <_vfiprintf_r+0x90>
1a00152c:	9a08      	ldr	r2, [sp, #32]
1a00152e:	fa07 f303 	lsl.w	r3, r7, r3
1a001532:	431a      	orrs	r2, r3
1a001534:	9208      	str	r2, [sp, #32]
1a001536:	46a1      	mov	r9, r4
1a001538:	464c      	mov	r4, r9
1a00153a:	2205      	movs	r2, #5
1a00153c:	f814 1b01 	ldrb.w	r1, [r4], #1
1a001540:	4630      	mov	r0, r6
1a001542:	f000 fe55 	bl	1a0021f0 <memchr>
1a001546:	46a2      	mov	sl, r4
1a001548:	1b83      	subs	r3, r0, r6
1a00154a:	2800      	cmp	r0, #0
1a00154c:	d1ee      	bne.n	1a00152c <_vfiprintf_r+0x84>
1a00154e:	9b08      	ldr	r3, [sp, #32]
1a001550:	06d9      	lsls	r1, r3, #27
1a001552:	bf44      	itt	mi
1a001554:	2220      	movmi	r2, #32
1a001556:	f88d 2063 	strbmi.w	r2, [sp, #99]	@ 0x63
1a00155a:	f899 1000 	ldrb.w	r1, [r9]
1a00155e:	071a      	lsls	r2, r3, #28
1a001560:	bf44      	itt	mi
1a001562:	222b      	movmi	r2, #43	@ 0x2b
1a001564:	f88d 2063 	strbmi.w	r2, [sp, #99]	@ 0x63
1a001568:	292a      	cmp	r1, #42	@ 0x2a
1a00156a:	d166      	bne.n	1a00163a <_vfiprintf_r+0x192>
1a00156c:	9a07      	ldr	r2, [sp, #28]
1a00156e:	6811      	ldr	r1, [r2, #0]
1a001570:	3204      	adds	r2, #4
1a001572:	2900      	cmp	r1, #0
1a001574:	9207      	str	r2, [sp, #28]
1a001576:	f2c0 809a 	blt.w	1a0016ae <_vfiprintf_r+0x206>
1a00157a:	910b      	str	r1, [sp, #44]	@ 0x2c
1a00157c:	f899 1001 	ldrb.w	r1, [r9, #1]
1a001580:	292e      	cmp	r1, #46	@ 0x2e
1a001582:	d070      	beq.n	1a001666 <_vfiprintf_r+0x1be>
1a001584:	4c5f      	ldr	r4, [pc, #380]	@ (1a001704 <_vfiprintf_r+0x25c>)
1a001586:	2203      	movs	r2, #3
1a001588:	4620      	mov	r0, r4
1a00158a:	f000 fe31 	bl	1a0021f0 <memchr>
1a00158e:	b138      	cbz	r0, 1a0015a0 <_vfiprintf_r+0xf8>
1a001590:	9b08      	ldr	r3, [sp, #32]
1a001592:	1b00      	subs	r0, r0, r4
1a001594:	2240      	movs	r2, #64	@ 0x40
1a001596:	4082      	lsls	r2, r0
1a001598:	4313      	orrs	r3, r2
1a00159a:	f10a 0a01 	add.w	sl, sl, #1
1a00159e:	9308      	str	r3, [sp, #32]
1a0015a0:	f81a 1b01 	ldrb.w	r1, [sl], #1
1a0015a4:	4858      	ldr	r0, [pc, #352]	@ (1a001708 <_vfiprintf_r+0x260>)
1a0015a6:	f88d 1038 	strb.w	r1, [sp, #56]	@ 0x38
1a0015aa:	2206      	movs	r2, #6
1a0015ac:	f000 fe20 	bl	1a0021f0 <memchr>
1a0015b0:	2800      	cmp	r0, #0
1a0015b2:	f000 8082 	beq.w	1a0016ba <_vfiprintf_r+0x212>
1a0015b6:	4b55      	ldr	r3, [pc, #340]	@ (1a00170c <_vfiprintf_r+0x264>)
1a0015b8:	2b00      	cmp	r3, #0
1a0015ba:	d069      	beq.n	1a001690 <_vfiprintf_r+0x1e8>
1a0015bc:	aa07      	add	r2, sp, #28
1a0015be:	9200      	str	r2, [sp, #0]
1a0015c0:	4b53      	ldr	r3, [pc, #332]	@ (1a001710 <_vfiprintf_r+0x268>)
1a0015c2:	9804      	ldr	r0, [sp, #16]
1a0015c4:	465a      	mov	r2, fp
1a0015c6:	a908      	add	r1, sp, #32
1a0015c8:	f3af 8000 	nop.w
1a0015cc:	9003      	str	r0, [sp, #12]
1a0015ce:	9b03      	ldr	r3, [sp, #12]
1a0015d0:	3301      	adds	r3, #1
1a0015d2:	d007      	beq.n	1a0015e4 <_vfiprintf_r+0x13c>
1a0015d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
1a0015d6:	9a03      	ldr	r2, [sp, #12]
1a0015d8:	4413      	add	r3, r2
1a0015da:	930d      	str	r3, [sp, #52]	@ 0x34
1a0015dc:	f89a 3000 	ldrb.w	r3, [sl]
1a0015e0:	2b00      	cmp	r3, #0
1a0015e2:	d185      	bne.n	1a0014f0 <_vfiprintf_r+0x48>
1a0015e4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
1a0015e8:	065b      	lsls	r3, r3, #25
1a0015ea:	d40a      	bmi.n	1a001602 <_vfiprintf_r+0x15a>
1a0015ec:	980d      	ldr	r0, [sp, #52]	@ 0x34
1a0015ee:	b021      	add	sp, #132	@ 0x84
1a0015f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0015f4:	9804      	ldr	r0, [sp, #16]
1a0015f6:	4659      	mov	r1, fp
1a0015f8:	f000 fe4a 	bl	1a002290 <__swsetup_r>
1a0015fc:	2800      	cmp	r0, #0
1a0015fe:	f43f af69 	beq.w	1a0014d4 <_vfiprintf_r+0x2c>
1a001602:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a001606:	e7f2      	b.n	1a0015ee <_vfiprintf_r+0x146>
1a001608:	ebb9 080a 	subs.w	r8, r9, sl
1a00160c:	d0ea      	beq.n	1a0015e4 <_vfiprintf_r+0x13c>
1a00160e:	f10a 35ff 	add.w	r5, sl, #4294967295	@ 0xffffffff
1a001612:	f8cd 9014 	str.w	r9, [sp, #20]
1a001616:	46a9      	mov	r9, r5
1a001618:	9d04      	ldr	r5, [sp, #16]
1a00161a:	e001      	b.n	1a001620 <_vfiprintf_r+0x178>
1a00161c:	45a0      	cmp	r8, r4
1a00161e:	d93e      	bls.n	1a00169e <_vfiprintf_r+0x1f6>
1a001620:	464c      	mov	r4, r9
1a001622:	465a      	mov	r2, fp
1a001624:	f819 1f01 	ldrb.w	r1, [r9, #1]!
1a001628:	4628      	mov	r0, r5
1a00162a:	f7ff fef7 	bl	1a00141c <__sfputc_r>
1a00162e:	3402      	adds	r4, #2
1a001630:	3001      	adds	r0, #1
1a001632:	eba4 040a 	sub.w	r4, r4, sl
1a001636:	d1f1      	bne.n	1a00161c <_vfiprintf_r+0x174>
1a001638:	e7d4      	b.n	1a0015e4 <_vfiprintf_r+0x13c>
1a00163a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
1a00163e:	2a09      	cmp	r2, #9
1a001640:	bf88      	it	hi
1a001642:	46ca      	movhi	sl, r9
1a001644:	d89c      	bhi.n	1a001580 <_vfiprintf_r+0xd8>
1a001646:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
1a001648:	e000      	b.n	1a00164c <_vfiprintf_r+0x1a4>
1a00164a:	3401      	adds	r4, #1
1a00164c:	7821      	ldrb	r1, [r4, #0]
1a00164e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001652:	eb02 0343 	add.w	r3, r2, r3, lsl #1
1a001656:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
1a00165a:	2a09      	cmp	r2, #9
1a00165c:	d9f5      	bls.n	1a00164a <_vfiprintf_r+0x1a2>
1a00165e:	292e      	cmp	r1, #46	@ 0x2e
1a001660:	930b      	str	r3, [sp, #44]	@ 0x2c
1a001662:	46a2      	mov	sl, r4
1a001664:	d18e      	bne.n	1a001584 <_vfiprintf_r+0xdc>
1a001666:	f89a 1001 	ldrb.w	r1, [sl, #1]
1a00166a:	292a      	cmp	r1, #42	@ 0x2a
1a00166c:	d12f      	bne.n	1a0016ce <_vfiprintf_r+0x226>
1a00166e:	9b07      	ldr	r3, [sp, #28]
1a001670:	f89a 1002 	ldrb.w	r1, [sl, #2]
1a001674:	681a      	ldr	r2, [r3, #0]
1a001676:	9209      	str	r2, [sp, #36]	@ 0x24
1a001678:	3304      	adds	r3, #4
1a00167a:	2a00      	cmp	r2, #0
1a00167c:	f10a 0002 	add.w	r0, sl, #2
1a001680:	9307      	str	r3, [sp, #28]
1a001682:	bfb8      	it	lt
1a001684:	f04f 33ff 	movlt.w	r3, #4294967295	@ 0xffffffff
1a001688:	4682      	mov	sl, r0
1a00168a:	bfb8      	it	lt
1a00168c:	9309      	strlt	r3, [sp, #36]	@ 0x24
1a00168e:	e779      	b.n	1a001584 <_vfiprintf_r+0xdc>
1a001690:	9b07      	ldr	r3, [sp, #28]
1a001692:	3307      	adds	r3, #7
1a001694:	f023 0307 	bic.w	r3, r3, #7
1a001698:	3308      	adds	r3, #8
1a00169a:	9307      	str	r3, [sp, #28]
1a00169c:	e79a      	b.n	1a0015d4 <_vfiprintf_r+0x12c>
1a00169e:	990d      	ldr	r1, [sp, #52]	@ 0x34
1a0016a0:	f8dd 9014 	ldr.w	r9, [sp, #20]
1a0016a4:	4441      	add	r1, r8
1a0016a6:	f899 3000 	ldrb.w	r3, [r9]
1a0016aa:	910d      	str	r1, [sp, #52]	@ 0x34
1a0016ac:	e72f      	b.n	1a00150e <_vfiprintf_r+0x66>
1a0016ae:	4249      	negs	r1, r1
1a0016b0:	f043 0302 	orr.w	r3, r3, #2
1a0016b4:	910b      	str	r1, [sp, #44]	@ 0x2c
1a0016b6:	9308      	str	r3, [sp, #32]
1a0016b8:	e760      	b.n	1a00157c <_vfiprintf_r+0xd4>
1a0016ba:	aa07      	add	r2, sp, #28
1a0016bc:	9200      	str	r2, [sp, #0]
1a0016be:	4b14      	ldr	r3, [pc, #80]	@ (1a001710 <_vfiprintf_r+0x268>)
1a0016c0:	9804      	ldr	r0, [sp, #16]
1a0016c2:	465a      	mov	r2, fp
1a0016c4:	a908      	add	r1, sp, #32
1a0016c6:	f000 ff09 	bl	1a0024dc <_printf_i>
1a0016ca:	9003      	str	r0, [sp, #12]
1a0016cc:	e77f      	b.n	1a0015ce <_vfiprintf_r+0x126>
1a0016ce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
1a0016d2:	2300      	movs	r3, #0
1a0016d4:	2a09      	cmp	r2, #9
1a0016d6:	9309      	str	r3, [sp, #36]	@ 0x24
1a0016d8:	f10a 0a01 	add.w	sl, sl, #1
1a0016dc:	f63f af52 	bhi.w	1a001584 <_vfiprintf_r+0xdc>
1a0016e0:	f81a 1f01 	ldrb.w	r1, [sl, #1]!
1a0016e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0016e8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
1a0016ec:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
1a0016f0:	2a09      	cmp	r2, #9
1a0016f2:	d9f5      	bls.n	1a0016e0 <_vfiprintf_r+0x238>
1a0016f4:	9309      	str	r3, [sp, #36]	@ 0x24
1a0016f6:	e745      	b.n	1a001584 <_vfiprintf_r+0xdc>
1a0016f8:	f000 fad4 	bl	1a001ca4 <__sinit>
1a0016fc:	e6e0      	b.n	1a0014c0 <_vfiprintf_r+0x18>
1a0016fe:	bf00      	nop
1a001700:	1a00293c 	.word	0x1a00293c
1a001704:	1a002944 	.word	0x1a002944
1a001708:	1a002948 	.word	0x1a002948
1a00170c:	00000000 	.word	0x00000000
1a001710:	1a001459 	.word	0x1a001459

1a001714 <vfiprintf>:
1a001714:	b410      	push	{r4}
1a001716:	4c05      	ldr	r4, [pc, #20]	@ (1a00172c <vfiprintf+0x18>)
1a001718:	4684      	mov	ip, r0
1a00171a:	4613      	mov	r3, r2
1a00171c:	6820      	ldr	r0, [r4, #0]
1a00171e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001722:	460a      	mov	r2, r1
1a001724:	4661      	mov	r1, ip
1a001726:	f7ff bebf 	b.w	1a0014a8 <_vfiprintf_r>
1a00172a:	bf00      	nop
1a00172c:	10000000 	.word	0x10000000

1a001730 <__swbuf_r>:
1a001730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001732:	460d      	mov	r5, r1
1a001734:	4614      	mov	r4, r2
1a001736:	4606      	mov	r6, r0
1a001738:	b110      	cbz	r0, 1a001740 <__swbuf_r+0x10>
1a00173a:	6a03      	ldr	r3, [r0, #32]
1a00173c:	2b00      	cmp	r3, #0
1a00173e:	d037      	beq.n	1a0017b0 <__swbuf_r+0x80>
1a001740:	89a3      	ldrh	r3, [r4, #12]
1a001742:	69a2      	ldr	r2, [r4, #24]
1a001744:	60a2      	str	r2, [r4, #8]
1a001746:	071a      	lsls	r2, r3, #28
1a001748:	d519      	bpl.n	1a00177e <__swbuf_r+0x4e>
1a00174a:	6923      	ldr	r3, [r4, #16]
1a00174c:	b1bb      	cbz	r3, 1a00177e <__swbuf_r+0x4e>
1a00174e:	6822      	ldr	r2, [r4, #0]
1a001750:	6961      	ldr	r1, [r4, #20]
1a001752:	1ad3      	subs	r3, r2, r3
1a001754:	b2ed      	uxtb	r5, r5
1a001756:	4299      	cmp	r1, r3
1a001758:	462f      	mov	r7, r5
1a00175a:	dd20      	ble.n	1a00179e <__swbuf_r+0x6e>
1a00175c:	3301      	adds	r3, #1
1a00175e:	68a1      	ldr	r1, [r4, #8]
1a001760:	3901      	subs	r1, #1
1a001762:	60a1      	str	r1, [r4, #8]
1a001764:	1c51      	adds	r1, r2, #1
1a001766:	6021      	str	r1, [r4, #0]
1a001768:	7015      	strb	r5, [r2, #0]
1a00176a:	6962      	ldr	r2, [r4, #20]
1a00176c:	429a      	cmp	r2, r3
1a00176e:	d00d      	beq.n	1a00178c <__swbuf_r+0x5c>
1a001770:	89a3      	ldrh	r3, [r4, #12]
1a001772:	07db      	lsls	r3, r3, #31
1a001774:	d501      	bpl.n	1a00177a <__swbuf_r+0x4a>
1a001776:	2d0a      	cmp	r5, #10
1a001778:	d008      	beq.n	1a00178c <__swbuf_r+0x5c>
1a00177a:	4638      	mov	r0, r7
1a00177c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00177e:	4621      	mov	r1, r4
1a001780:	4630      	mov	r0, r6
1a001782:	f000 fd85 	bl	1a002290 <__swsetup_r>
1a001786:	b938      	cbnz	r0, 1a001798 <__swbuf_r+0x68>
1a001788:	6923      	ldr	r3, [r4, #16]
1a00178a:	e7e0      	b.n	1a00174e <__swbuf_r+0x1e>
1a00178c:	4621      	mov	r1, r4
1a00178e:	4630      	mov	r0, r6
1a001790:	f000 fb42 	bl	1a001e18 <_fflush_r>
1a001794:	2800      	cmp	r0, #0
1a001796:	d0f0      	beq.n	1a00177a <__swbuf_r+0x4a>
1a001798:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
1a00179c:	e7ed      	b.n	1a00177a <__swbuf_r+0x4a>
1a00179e:	4621      	mov	r1, r4
1a0017a0:	4630      	mov	r0, r6
1a0017a2:	f000 fb39 	bl	1a001e18 <_fflush_r>
1a0017a6:	2800      	cmp	r0, #0
1a0017a8:	d1f6      	bne.n	1a001798 <__swbuf_r+0x68>
1a0017aa:	6822      	ldr	r2, [r4, #0]
1a0017ac:	2301      	movs	r3, #1
1a0017ae:	e7d6      	b.n	1a00175e <__swbuf_r+0x2e>
1a0017b0:	f000 fa78 	bl	1a001ca4 <__sinit>
1a0017b4:	e7c4      	b.n	1a001740 <__swbuf_r+0x10>
1a0017b6:	bf00      	nop

1a0017b8 <__swbuf>:
1a0017b8:	b410      	push	{r4}
1a0017ba:	4c04      	ldr	r4, [pc, #16]	@ (1a0017cc <__swbuf+0x14>)
1a0017bc:	4603      	mov	r3, r0
1a0017be:	460a      	mov	r2, r1
1a0017c0:	6820      	ldr	r0, [r4, #0]
1a0017c2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0017c6:	4619      	mov	r1, r3
1a0017c8:	f7ff bfb2 	b.w	1a001730 <__swbuf_r>
1a0017cc:	10000000 	.word	0x10000000

1a0017d0 <__sfvwrite_r>:
1a0017d0:	6893      	ldr	r3, [r2, #8]
1a0017d2:	2b00      	cmp	r3, #0
1a0017d4:	f000 80f8 	beq.w	1a0019c8 <__sfvwrite_r+0x1f8>
1a0017d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0017dc:	f9b1 c00c 	ldrsh.w	ip, [r1, #12]
1a0017e0:	f01c 0f08 	tst.w	ip, #8
1a0017e4:	b083      	sub	sp, #12
1a0017e6:	4690      	mov	r8, r2
1a0017e8:	4681      	mov	r9, r0
1a0017ea:	460c      	mov	r4, r1
1a0017ec:	d031      	beq.n	1a001852 <__sfvwrite_r+0x82>
1a0017ee:	690b      	ldr	r3, [r1, #16]
1a0017f0:	b37b      	cbz	r3, 1a001852 <__sfvwrite_r+0x82>
1a0017f2:	f01c 0702 	ands.w	r7, ip, #2
1a0017f6:	f8d8 6000 	ldr.w	r6, [r8]
1a0017fa:	d038      	beq.n	1a00186e <__sfvwrite_r+0x9e>
1a0017fc:	2700      	movs	r7, #0
1a0017fe:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
1a001802:	6a21      	ldr	r1, [r4, #32]
1a001804:	f8df a2c4 	ldr.w	sl, [pc, #708]	@ 1a001acc <__sfvwrite_r+0x2fc>
1a001808:	463d      	mov	r5, r7
1a00180a:	4555      	cmp	r5, sl
1a00180c:	462b      	mov	r3, r5
1a00180e:	463a      	mov	r2, r7
1a001810:	bf28      	it	cs
1a001812:	4653      	movcs	r3, sl
1a001814:	4648      	mov	r0, r9
1a001816:	b1c5      	cbz	r5, 1a00184a <__sfvwrite_r+0x7a>
1a001818:	47d8      	blx	fp
1a00181a:	2800      	cmp	r0, #0
1a00181c:	f340 80ca 	ble.w	1a0019b4 <__sfvwrite_r+0x1e4>
1a001820:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a001824:	1a1b      	subs	r3, r3, r0
1a001826:	4407      	add	r7, r0
1a001828:	1a2d      	subs	r5, r5, r0
1a00182a:	f8c8 3008 	str.w	r3, [r8, #8]
1a00182e:	2b00      	cmp	r3, #0
1a001830:	f000 80b6 	beq.w	1a0019a0 <__sfvwrite_r+0x1d0>
1a001834:	4555      	cmp	r5, sl
1a001836:	462b      	mov	r3, r5
1a001838:	f8d4 b028 	ldr.w	fp, [r4, #40]	@ 0x28
1a00183c:	6a21      	ldr	r1, [r4, #32]
1a00183e:	bf28      	it	cs
1a001840:	4653      	movcs	r3, sl
1a001842:	463a      	mov	r2, r7
1a001844:	4648      	mov	r0, r9
1a001846:	2d00      	cmp	r5, #0
1a001848:	d1e6      	bne.n	1a001818 <__sfvwrite_r+0x48>
1a00184a:	e9d6 7500 	ldrd	r7, r5, [r6]
1a00184e:	3608      	adds	r6, #8
1a001850:	e7db      	b.n	1a00180a <__sfvwrite_r+0x3a>
1a001852:	4621      	mov	r1, r4
1a001854:	4648      	mov	r0, r9
1a001856:	f000 fd1b 	bl	1a002290 <__swsetup_r>
1a00185a:	2800      	cmp	r0, #0
1a00185c:	f040 80af 	bne.w	1a0019be <__sfvwrite_r+0x1ee>
1a001860:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
1a001864:	f8d8 6000 	ldr.w	r6, [r8]
1a001868:	f01c 0702 	ands.w	r7, ip, #2
1a00186c:	d1c6      	bne.n	1a0017fc <__sfvwrite_r+0x2c>
1a00186e:	f01c 0a01 	ands.w	sl, ip, #1
1a001872:	d163      	bne.n	1a00193c <__sfvwrite_r+0x16c>
1a001874:	6823      	ldr	r3, [r4, #0]
1a001876:	68a1      	ldr	r1, [r4, #8]
1a001878:	4657      	mov	r7, sl
1a00187a:	4618      	mov	r0, r3
1a00187c:	468b      	mov	fp, r1
1a00187e:	2f00      	cmp	r7, #0
1a001880:	d058      	beq.n	1a001934 <__sfvwrite_r+0x164>
1a001882:	f41c 7f00 	tst.w	ip, #512	@ 0x200
1a001886:	f000 80b5 	beq.w	1a0019f4 <__sfvwrite_r+0x224>
1a00188a:	42b9      	cmp	r1, r7
1a00188c:	460a      	mov	r2, r1
1a00188e:	f200 80e1 	bhi.w	1a001a54 <__sfvwrite_r+0x284>
1a001892:	f41c 6f90 	tst.w	ip, #1152	@ 0x480
1a001896:	d02f      	beq.n	1a0018f8 <__sfvwrite_r+0x128>
1a001898:	6921      	ldr	r1, [r4, #16]
1a00189a:	6962      	ldr	r2, [r4, #20]
1a00189c:	1a5d      	subs	r5, r3, r1
1a00189e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
1a0018a2:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
1a0018a6:	1c6b      	adds	r3, r5, #1
1a0018a8:	1052      	asrs	r2, r2, #1
1a0018aa:	443b      	add	r3, r7
1a0018ac:	4293      	cmp	r3, r2
1a0018ae:	bf92      	itee	ls
1a0018b0:	4693      	movls	fp, r2
1a0018b2:	469b      	movhi	fp, r3
1a0018b4:	461a      	movhi	r2, r3
1a0018b6:	f41c 6f80 	tst.w	ip, #1024	@ 0x400
1a0018ba:	f000 80ea 	beq.w	1a001a92 <__sfvwrite_r+0x2c2>
1a0018be:	4611      	mov	r1, r2
1a0018c0:	4648      	mov	r0, r9
1a0018c2:	f000 fb0f 	bl	1a001ee4 <_malloc_r>
1a0018c6:	2800      	cmp	r0, #0
1a0018c8:	f000 80f9 	beq.w	1a001abe <__sfvwrite_r+0x2ee>
1a0018cc:	462a      	mov	r2, r5
1a0018ce:	6921      	ldr	r1, [r4, #16]
1a0018d0:	9000      	str	r0, [sp, #0]
1a0018d2:	f7ff fce5 	bl	1a0012a0 <memcpy>
1a0018d6:	89a2      	ldrh	r2, [r4, #12]
1a0018d8:	9b00      	ldr	r3, [sp, #0]
1a0018da:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
1a0018de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
1a0018e2:	81a2      	strh	r2, [r4, #12]
1a0018e4:	1958      	adds	r0, r3, r5
1a0018e6:	ebab 0505 	sub.w	r5, fp, r5
1a0018ea:	f8c4 b014 	str.w	fp, [r4, #20]
1a0018ee:	6123      	str	r3, [r4, #16]
1a0018f0:	60a5      	str	r5, [r4, #8]
1a0018f2:	6020      	str	r0, [r4, #0]
1a0018f4:	46bb      	mov	fp, r7
1a0018f6:	463a      	mov	r2, r7
1a0018f8:	4651      	mov	r1, sl
1a0018fa:	9200      	str	r2, [sp, #0]
1a0018fc:	f000 fbd0 	bl	1a0020a0 <memmove>
1a001900:	68a1      	ldr	r1, [r4, #8]
1a001902:	6823      	ldr	r3, [r4, #0]
1a001904:	9a00      	ldr	r2, [sp, #0]
1a001906:	eba1 010b 	sub.w	r1, r1, fp
1a00190a:	441a      	add	r2, r3
1a00190c:	463d      	mov	r5, r7
1a00190e:	60a1      	str	r1, [r4, #8]
1a001910:	6022      	str	r2, [r4, #0]
1a001912:	2700      	movs	r7, #0
1a001914:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a001918:	1b5b      	subs	r3, r3, r5
1a00191a:	44aa      	add	sl, r5
1a00191c:	f8c8 3008 	str.w	r3, [r8, #8]
1a001920:	2b00      	cmp	r3, #0
1a001922:	d03d      	beq.n	1a0019a0 <__sfvwrite_r+0x1d0>
1a001924:	6823      	ldr	r3, [r4, #0]
1a001926:	68a1      	ldr	r1, [r4, #8]
1a001928:	f9b4 c00c 	ldrsh.w	ip, [r4, #12]
1a00192c:	4618      	mov	r0, r3
1a00192e:	468b      	mov	fp, r1
1a001930:	2f00      	cmp	r7, #0
1a001932:	d1a6      	bne.n	1a001882 <__sfvwrite_r+0xb2>
1a001934:	e9d6 a700 	ldrd	sl, r7, [r6]
1a001938:	3608      	adds	r6, #8
1a00193a:	e79e      	b.n	1a00187a <__sfvwrite_r+0xaa>
1a00193c:	4638      	mov	r0, r7
1a00193e:	46bb      	mov	fp, r7
1a001940:	463d      	mov	r5, r7
1a001942:	9700      	str	r7, [sp, #0]
1a001944:	2d00      	cmp	r5, #0
1a001946:	d041      	beq.n	1a0019cc <__sfvwrite_r+0x1fc>
1a001948:	2800      	cmp	r0, #0
1a00194a:	d046      	beq.n	1a0019da <__sfvwrite_r+0x20a>
1a00194c:	9a00      	ldr	r2, [sp, #0]
1a00194e:	6820      	ldr	r0, [r4, #0]
1a001950:	68a1      	ldr	r1, [r4, #8]
1a001952:	e9d4 7304 	ldrd	r7, r3, [r4, #16]
1a001956:	42aa      	cmp	r2, r5
1a001958:	bf28      	it	cs
1a00195a:	462a      	movcs	r2, r5
1a00195c:	42b8      	cmp	r0, r7
1a00195e:	d904      	bls.n	1a00196a <__sfvwrite_r+0x19a>
1a001960:	eb01 0a03 	add.w	sl, r1, r3
1a001964:	4552      	cmp	r2, sl
1a001966:	f300 8085 	bgt.w	1a001a74 <__sfvwrite_r+0x2a4>
1a00196a:	4293      	cmp	r3, r2
1a00196c:	dc75      	bgt.n	1a001a5a <__sfvwrite_r+0x28a>
1a00196e:	6a21      	ldr	r1, [r4, #32]
1a001970:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
1a001972:	465a      	mov	r2, fp
1a001974:	4648      	mov	r0, r9
1a001976:	47b8      	blx	r7
1a001978:	f1b0 0a00 	subs.w	sl, r0, #0
1a00197c:	dd1a      	ble.n	1a0019b4 <__sfvwrite_r+0x1e4>
1a00197e:	9b00      	ldr	r3, [sp, #0]
1a001980:	ebb3 030a 	subs.w	r3, r3, sl
1a001984:	9300      	str	r3, [sp, #0]
1a001986:	d00f      	beq.n	1a0019a8 <__sfvwrite_r+0x1d8>
1a001988:	2001      	movs	r0, #1
1a00198a:	f8d8 3008 	ldr.w	r3, [r8, #8]
1a00198e:	eba3 030a 	sub.w	r3, r3, sl
1a001992:	44d3      	add	fp, sl
1a001994:	eba5 050a 	sub.w	r5, r5, sl
1a001998:	f8c8 3008 	str.w	r3, [r8, #8]
1a00199c:	2b00      	cmp	r3, #0
1a00199e:	d1d1      	bne.n	1a001944 <__sfvwrite_r+0x174>
1a0019a0:	2000      	movs	r0, #0
1a0019a2:	b003      	add	sp, #12
1a0019a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0019a8:	4621      	mov	r1, r4
1a0019aa:	4648      	mov	r0, r9
1a0019ac:	f000 fa34 	bl	1a001e18 <_fflush_r>
1a0019b0:	2800      	cmp	r0, #0
1a0019b2:	d0ea      	beq.n	1a00198a <__sfvwrite_r+0x1ba>
1a0019b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0019b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1a0019bc:	81a3      	strh	r3, [r4, #12]
1a0019be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a0019c2:	b003      	add	sp, #12
1a0019c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0019c8:	2000      	movs	r0, #0
1a0019ca:	4770      	bx	lr
1a0019cc:	6875      	ldr	r5, [r6, #4]
1a0019ce:	4633      	mov	r3, r6
1a0019d0:	3608      	adds	r6, #8
1a0019d2:	2d00      	cmp	r5, #0
1a0019d4:	d0fa      	beq.n	1a0019cc <__sfvwrite_r+0x1fc>
1a0019d6:	f8d3 b000 	ldr.w	fp, [r3]
1a0019da:	462a      	mov	r2, r5
1a0019dc:	210a      	movs	r1, #10
1a0019de:	4658      	mov	r0, fp
1a0019e0:	f000 fc06 	bl	1a0021f0 <memchr>
1a0019e4:	2800      	cmp	r0, #0
1a0019e6:	d067      	beq.n	1a001ab8 <__sfvwrite_r+0x2e8>
1a0019e8:	3001      	adds	r0, #1
1a0019ea:	eba0 030b 	sub.w	r3, r0, fp
1a0019ee:	9300      	str	r3, [sp, #0]
1a0019f0:	461a      	mov	r2, r3
1a0019f2:	e7ac      	b.n	1a00194e <__sfvwrite_r+0x17e>
1a0019f4:	6922      	ldr	r2, [r4, #16]
1a0019f6:	429a      	cmp	r2, r3
1a0019f8:	d314      	bcc.n	1a001a24 <__sfvwrite_r+0x254>
1a0019fa:	6962      	ldr	r2, [r4, #20]
1a0019fc:	42ba      	cmp	r2, r7
1a0019fe:	d811      	bhi.n	1a001a24 <__sfvwrite_r+0x254>
1a001a00:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
1a001a04:	42bb      	cmp	r3, r7
1a001a06:	bf28      	it	cs
1a001a08:	463b      	movcs	r3, r7
1a001a0a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
1a001a0c:	fb93 f3f2 	sdiv	r3, r3, r2
1a001a10:	6a21      	ldr	r1, [r4, #32]
1a001a12:	fb02 f303 	mul.w	r3, r2, r3
1a001a16:	4648      	mov	r0, r9
1a001a18:	4652      	mov	r2, sl
1a001a1a:	47a8      	blx	r5
1a001a1c:	1e05      	subs	r5, r0, #0
1a001a1e:	ddc9      	ble.n	1a0019b4 <__sfvwrite_r+0x1e4>
1a001a20:	1b7f      	subs	r7, r7, r5
1a001a22:	e777      	b.n	1a001914 <__sfvwrite_r+0x144>
1a001a24:	42b9      	cmp	r1, r7
1a001a26:	bf28      	it	cs
1a001a28:	4639      	movcs	r1, r7
1a001a2a:	460d      	mov	r5, r1
1a001a2c:	4618      	mov	r0, r3
1a001a2e:	460a      	mov	r2, r1
1a001a30:	4651      	mov	r1, sl
1a001a32:	f000 fb35 	bl	1a0020a0 <memmove>
1a001a36:	68a1      	ldr	r1, [r4, #8]
1a001a38:	6823      	ldr	r3, [r4, #0]
1a001a3a:	1b49      	subs	r1, r1, r5
1a001a3c:	442b      	add	r3, r5
1a001a3e:	60a1      	str	r1, [r4, #8]
1a001a40:	6023      	str	r3, [r4, #0]
1a001a42:	2900      	cmp	r1, #0
1a001a44:	d1ec      	bne.n	1a001a20 <__sfvwrite_r+0x250>
1a001a46:	4621      	mov	r1, r4
1a001a48:	4648      	mov	r0, r9
1a001a4a:	f000 f9e5 	bl	1a001e18 <_fflush_r>
1a001a4e:	2800      	cmp	r0, #0
1a001a50:	d0e6      	beq.n	1a001a20 <__sfvwrite_r+0x250>
1a001a52:	e7af      	b.n	1a0019b4 <__sfvwrite_r+0x1e4>
1a001a54:	46bb      	mov	fp, r7
1a001a56:	463a      	mov	r2, r7
1a001a58:	e74e      	b.n	1a0018f8 <__sfvwrite_r+0x128>
1a001a5a:	4659      	mov	r1, fp
1a001a5c:	9201      	str	r2, [sp, #4]
1a001a5e:	f000 fb1f 	bl	1a0020a0 <memmove>
1a001a62:	9a01      	ldr	r2, [sp, #4]
1a001a64:	68a3      	ldr	r3, [r4, #8]
1a001a66:	1a9b      	subs	r3, r3, r2
1a001a68:	60a3      	str	r3, [r4, #8]
1a001a6a:	6823      	ldr	r3, [r4, #0]
1a001a6c:	4413      	add	r3, r2
1a001a6e:	6023      	str	r3, [r4, #0]
1a001a70:	4692      	mov	sl, r2
1a001a72:	e784      	b.n	1a00197e <__sfvwrite_r+0x1ae>
1a001a74:	4659      	mov	r1, fp
1a001a76:	4652      	mov	r2, sl
1a001a78:	f000 fb12 	bl	1a0020a0 <memmove>
1a001a7c:	6823      	ldr	r3, [r4, #0]
1a001a7e:	4453      	add	r3, sl
1a001a80:	6023      	str	r3, [r4, #0]
1a001a82:	4621      	mov	r1, r4
1a001a84:	4648      	mov	r0, r9
1a001a86:	f000 f9c7 	bl	1a001e18 <_fflush_r>
1a001a8a:	2800      	cmp	r0, #0
1a001a8c:	f43f af77 	beq.w	1a00197e <__sfvwrite_r+0x1ae>
1a001a90:	e790      	b.n	1a0019b4 <__sfvwrite_r+0x1e4>
1a001a92:	4648      	mov	r0, r9
1a001a94:	f000 fc5e 	bl	1a002354 <_realloc_r>
1a001a98:	4603      	mov	r3, r0
1a001a9a:	2800      	cmp	r0, #0
1a001a9c:	f47f af22 	bne.w	1a0018e4 <__sfvwrite_r+0x114>
1a001aa0:	6921      	ldr	r1, [r4, #16]
1a001aa2:	4648      	mov	r0, r9
1a001aa4:	f000 fa9e 	bl	1a001fe4 <_free_r>
1a001aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001aac:	220c      	movs	r2, #12
1a001aae:	f8c9 2000 	str.w	r2, [r9]
1a001ab2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
1a001ab6:	e77f      	b.n	1a0019b8 <__sfvwrite_r+0x1e8>
1a001ab8:	1c6a      	adds	r2, r5, #1
1a001aba:	9200      	str	r2, [sp, #0]
1a001abc:	e747      	b.n	1a00194e <__sfvwrite_r+0x17e>
1a001abe:	220c      	movs	r2, #12
1a001ac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001ac4:	f8c9 2000 	str.w	r2, [r9]
1a001ac8:	e776      	b.n	1a0019b8 <__sfvwrite_r+0x1e8>
1a001aca:	bf00      	nop
1a001acc:	7ffffc00 	.word	0x7ffffc00

1a001ad0 <__fp_lock>:
1a001ad0:	2000      	movs	r0, #0
1a001ad2:	4770      	bx	lr

1a001ad4 <stdio_exit_handler>:
1a001ad4:	4a02      	ldr	r2, [pc, #8]	@ (1a001ae0 <stdio_exit_handler+0xc>)
1a001ad6:	4903      	ldr	r1, [pc, #12]	@ (1a001ae4 <stdio_exit_handler+0x10>)
1a001ad8:	4803      	ldr	r0, [pc, #12]	@ (1a001ae8 <stdio_exit_handler+0x14>)
1a001ada:	f000 bb61 	b.w	1a0021a0 <_fwalk_sglue>
1a001ade:	bf00      	nop
1a001ae0:	10000050 	.word	0x10000050
1a001ae4:	1a001e19 	.word	0x1a001e19
1a001ae8:	10000004 	.word	0x10000004

1a001aec <cleanup_stdio>:
1a001aec:	4b0c      	ldr	r3, [pc, #48]	@ (1a001b20 <cleanup_stdio+0x34>)
1a001aee:	6841      	ldr	r1, [r0, #4]
1a001af0:	4299      	cmp	r1, r3
1a001af2:	b510      	push	{r4, lr}
1a001af4:	4604      	mov	r4, r0
1a001af6:	d001      	beq.n	1a001afc <cleanup_stdio+0x10>
1a001af8:	f000 f98e 	bl	1a001e18 <_fflush_r>
1a001afc:	68a1      	ldr	r1, [r4, #8]
1a001afe:	4b09      	ldr	r3, [pc, #36]	@ (1a001b24 <cleanup_stdio+0x38>)
1a001b00:	4299      	cmp	r1, r3
1a001b02:	d002      	beq.n	1a001b0a <cleanup_stdio+0x1e>
1a001b04:	4620      	mov	r0, r4
1a001b06:	f000 f987 	bl	1a001e18 <_fflush_r>
1a001b0a:	68e1      	ldr	r1, [r4, #12]
1a001b0c:	4b06      	ldr	r3, [pc, #24]	@ (1a001b28 <cleanup_stdio+0x3c>)
1a001b0e:	4299      	cmp	r1, r3
1a001b10:	d004      	beq.n	1a001b1c <cleanup_stdio+0x30>
1a001b12:	4620      	mov	r0, r4
1a001b14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a001b18:	f000 b97e 	b.w	1a001e18 <_fflush_r>
1a001b1c:	bd10      	pop	{r4, pc}
1a001b1e:	bf00      	nop
1a001b20:	10000070 	.word	0x10000070
1a001b24:	100000d8 	.word	0x100000d8
1a001b28:	10000140 	.word	0x10000140

1a001b2c <__fp_unlock>:
1a001b2c:	2000      	movs	r0, #0
1a001b2e:	4770      	bx	lr

1a001b30 <global_stdio_init.part.0>:
1a001b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001b34:	4c2a      	ldr	r4, [pc, #168]	@ (1a001be0 <global_stdio_init.part.0+0xb0>)
1a001b36:	492b      	ldr	r1, [pc, #172]	@ (1a001be4 <global_stdio_init.part.0+0xb4>)
1a001b38:	f8df 90bc 	ldr.w	r9, [pc, #188]	@ 1a001bf8 <global_stdio_init.part.0+0xc8>
1a001b3c:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 1a001bfc <global_stdio_init.part.0+0xcc>
1a001b40:	4f29      	ldr	r7, [pc, #164]	@ (1a001be8 <global_stdio_init.part.0+0xb8>)
1a001b42:	f8c4 1138 	str.w	r1, [r4, #312]	@ 0x138
1a001b46:	2500      	movs	r5, #0
1a001b48:	2304      	movs	r3, #4
1a001b4a:	2208      	movs	r2, #8
1a001b4c:	4629      	mov	r1, r5
1a001b4e:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
1a001b52:	4e26      	ldr	r6, [pc, #152]	@ (1a001bec <global_stdio_init.part.0+0xbc>)
1a001b54:	60e3      	str	r3, [r4, #12]
1a001b56:	e9c4 5500 	strd	r5, r5, [r4]
1a001b5a:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a001b5e:	60a5      	str	r5, [r4, #8]
1a001b60:	6665      	str	r5, [r4, #100]	@ 0x64
1a001b62:	61a5      	str	r5, [r4, #24]
1a001b64:	f7ff fb4a 	bl	1a0011fc <memset>
1a001b68:	4b21      	ldr	r3, [pc, #132]	@ (1a001bf0 <global_stdio_init.part.0+0xc0>)
1a001b6a:	6763      	str	r3, [r4, #116]	@ 0x74
1a001b6c:	2208      	movs	r2, #8
1a001b6e:	4629      	mov	r1, r5
1a001b70:	f104 00c4 	add.w	r0, r4, #196	@ 0xc4
1a001b74:	e9c4 4908 	strd	r4, r9, [r4, #32]
1a001b78:	e9c4 870a 	strd	r8, r7, [r4, #40]	@ 0x28
1a001b7c:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
1a001b80:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
1a001b84:	6725      	str	r5, [r4, #112]	@ 0x70
1a001b86:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
1a001b8a:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
1a001b8e:	6326      	str	r6, [r4, #48]	@ 0x30
1a001b90:	f7ff fb34 	bl	1a0011fc <memset>
1a001b94:	4b17      	ldr	r3, [pc, #92]	@ (1a001bf4 <global_stdio_init.part.0+0xc4>)
1a001b96:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
1a001b9a:	4629      	mov	r1, r5
1a001b9c:	f104 0368 	add.w	r3, r4, #104	@ 0x68
1a001ba0:	2208      	movs	r2, #8
1a001ba2:	f504 7096 	add.w	r0, r4, #300	@ 0x12c
1a001ba6:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
1a001baa:	e9c4 9823 	strd	r9, r8, [r4, #140]	@ 0x8c
1a001bae:	e9c4 7625 	strd	r7, r6, [r4, #148]	@ 0x94
1a001bb2:	e9c4 5534 	strd	r5, r5, [r4, #208]	@ 0xd0
1a001bb6:	e9c4 5538 	strd	r5, r5, [r4, #224]	@ 0xe0
1a001bba:	f8c4 50d8 	str.w	r5, [r4, #216]	@ 0xd8
1a001bbe:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
1a001bc2:	f8c4 50e8 	str.w	r5, [r4, #232]	@ 0xe8
1a001bc6:	f7ff fb19 	bl	1a0011fc <memset>
1a001bca:	f104 03d0 	add.w	r3, r4, #208	@ 0xd0
1a001bce:	e9c4 983d 	strd	r9, r8, [r4, #244]	@ 0xf4
1a001bd2:	e9c4 763f 	strd	r7, r6, [r4, #252]	@ 0xfc
1a001bd6:	f8c4 30f0 	str.w	r3, [r4, #240]	@ 0xf0
1a001bda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001bde:	bf00      	nop
1a001be0:	10000070 	.word	0x10000070
1a001be4:	1a001ad5 	.word	0x1a001ad5
1a001be8:	1a0028e5 	.word	0x1a0028e5
1a001bec:	1a002909 	.word	0x1a002909
1a001bf0:	00010009 	.word	0x00010009
1a001bf4:	00020012 	.word	0x00020012
1a001bf8:	1a00287d 	.word	0x1a00287d
1a001bfc:	1a0028a5 	.word	0x1a0028a5

1a001c00 <__sfp>:
1a001c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001c02:	4b25      	ldr	r3, [pc, #148]	@ (1a001c98 <__sfp+0x98>)
1a001c04:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
1a001c08:	4606      	mov	r6, r0
1a001c0a:	2b00      	cmp	r3, #0
1a001c0c:	d03c      	beq.n	1a001c88 <__sfp+0x88>
1a001c0e:	4f23      	ldr	r7, [pc, #140]	@ (1a001c9c <__sfp+0x9c>)
1a001c10:	e9d7 3401 	ldrd	r3, r4, [r7, #4]
1a001c14:	3b01      	subs	r3, #1
1a001c16:	d504      	bpl.n	1a001c22 <__sfp+0x22>
1a001c18:	e01d      	b.n	1a001c56 <__sfp+0x56>
1a001c1a:	1c5a      	adds	r2, r3, #1
1a001c1c:	f104 0468 	add.w	r4, r4, #104	@ 0x68
1a001c20:	d019      	beq.n	1a001c56 <__sfp+0x56>
1a001c22:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a001c26:	3b01      	subs	r3, #1
1a001c28:	2d00      	cmp	r5, #0
1a001c2a:	d1f6      	bne.n	1a001c1a <__sfp+0x1a>
1a001c2c:	4b1c      	ldr	r3, [pc, #112]	@ (1a001ca0 <__sfp+0xa0>)
1a001c2e:	60e3      	str	r3, [r4, #12]
1a001c30:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a001c34:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a001c38:	6665      	str	r5, [r4, #100]	@ 0x64
1a001c3a:	6025      	str	r5, [r4, #0]
1a001c3c:	61a5      	str	r5, [r4, #24]
1a001c3e:	2208      	movs	r2, #8
1a001c40:	4629      	mov	r1, r5
1a001c42:	f104 005c 	add.w	r0, r4, #92	@ 0x5c
1a001c46:	f7ff fad9 	bl	1a0011fc <memset>
1a001c4a:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
1a001c4e:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
1a001c52:	4620      	mov	r0, r4
1a001c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001c56:	683d      	ldr	r5, [r7, #0]
1a001c58:	b10d      	cbz	r5, 1a001c5e <__sfp+0x5e>
1a001c5a:	462f      	mov	r7, r5
1a001c5c:	e7d8      	b.n	1a001c10 <__sfp+0x10>
1a001c5e:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
1a001c62:	4630      	mov	r0, r6
1a001c64:	f000 f93e 	bl	1a001ee4 <_malloc_r>
1a001c68:	4604      	mov	r4, r0
1a001c6a:	b180      	cbz	r0, 1a001c8e <__sfp+0x8e>
1a001c6c:	2304      	movs	r3, #4
1a001c6e:	e9c0 5300 	strd	r5, r3, [r0]
1a001c72:	300c      	adds	r0, #12
1a001c74:	4629      	mov	r1, r5
1a001c76:	60a0      	str	r0, [r4, #8]
1a001c78:	f44f 72d0 	mov.w	r2, #416	@ 0x1a0
1a001c7c:	4625      	mov	r5, r4
1a001c7e:	f7ff fabd 	bl	1a0011fc <memset>
1a001c82:	603c      	str	r4, [r7, #0]
1a001c84:	462f      	mov	r7, r5
1a001c86:	e7c3      	b.n	1a001c10 <__sfp+0x10>
1a001c88:	f7ff ff52 	bl	1a001b30 <global_stdio_init.part.0>
1a001c8c:	e7bf      	b.n	1a001c0e <__sfp+0xe>
1a001c8e:	230c      	movs	r3, #12
1a001c90:	6038      	str	r0, [r7, #0]
1a001c92:	6033      	str	r3, [r6, #0]
1a001c94:	e7dd      	b.n	1a001c52 <__sfp+0x52>
1a001c96:	bf00      	nop
1a001c98:	10000070 	.word	0x10000070
1a001c9c:	10000050 	.word	0x10000050
1a001ca0:	ffff0001 	.word	0xffff0001

1a001ca4 <__sinit>:
1a001ca4:	6a03      	ldr	r3, [r0, #32]
1a001ca6:	b103      	cbz	r3, 1a001caa <__sinit+0x6>
1a001ca8:	4770      	bx	lr
1a001caa:	4b04      	ldr	r3, [pc, #16]	@ (1a001cbc <__sinit+0x18>)
1a001cac:	4a04      	ldr	r2, [pc, #16]	@ (1a001cc0 <__sinit+0x1c>)
1a001cae:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
1a001cb2:	6202      	str	r2, [r0, #32]
1a001cb4:	2b00      	cmp	r3, #0
1a001cb6:	d1f7      	bne.n	1a001ca8 <__sinit+0x4>
1a001cb8:	e73a      	b.n	1a001b30 <global_stdio_init.part.0>
1a001cba:	bf00      	nop
1a001cbc:	10000070 	.word	0x10000070
1a001cc0:	1a001aed 	.word	0x1a001aed

1a001cc4 <__sfp_lock_acquire>:
1a001cc4:	4770      	bx	lr
1a001cc6:	bf00      	nop

1a001cc8 <__sfp_lock_release>:
1a001cc8:	4770      	bx	lr
1a001cca:	bf00      	nop

1a001ccc <__fp_lock_all>:
1a001ccc:	4a02      	ldr	r2, [pc, #8]	@ (1a001cd8 <__fp_lock_all+0xc>)
1a001cce:	4903      	ldr	r1, [pc, #12]	@ (1a001cdc <__fp_lock_all+0x10>)
1a001cd0:	2000      	movs	r0, #0
1a001cd2:	f000 ba65 	b.w	1a0021a0 <_fwalk_sglue>
1a001cd6:	bf00      	nop
1a001cd8:	10000050 	.word	0x10000050
1a001cdc:	1a001ad1 	.word	0x1a001ad1

1a001ce0 <__fp_unlock_all>:
1a001ce0:	4a02      	ldr	r2, [pc, #8]	@ (1a001cec <__fp_unlock_all+0xc>)
1a001ce2:	4903      	ldr	r1, [pc, #12]	@ (1a001cf0 <__fp_unlock_all+0x10>)
1a001ce4:	2000      	movs	r0, #0
1a001ce6:	f000 ba5b 	b.w	1a0021a0 <_fwalk_sglue>
1a001cea:	bf00      	nop
1a001cec:	10000050 	.word	0x10000050
1a001cf0:	1a001b2d 	.word	0x1a001b2d

1a001cf4 <__sflush_r>:
1a001cf4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a001cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001cfc:	071e      	lsls	r6, r3, #28
1a001cfe:	460c      	mov	r4, r1
1a001d00:	4680      	mov	r8, r0
1a001d02:	d43d      	bmi.n	1a001d80 <__sflush_r+0x8c>
1a001d04:	684a      	ldr	r2, [r1, #4]
1a001d06:	2a00      	cmp	r2, #0
1a001d08:	dd56      	ble.n	1a001db8 <__sflush_r+0xc4>
1a001d0a:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
1a001d0c:	2d00      	cmp	r5, #0
1a001d0e:	d034      	beq.n	1a001d7a <__sflush_r+0x86>
1a001d10:	2200      	movs	r2, #0
1a001d12:	f8d8 6000 	ldr.w	r6, [r8]
1a001d16:	f8c8 2000 	str.w	r2, [r8]
1a001d1a:	f413 5280 	ands.w	r2, r3, #4096	@ 0x1000
1a001d1e:	6a21      	ldr	r1, [r4, #32]
1a001d20:	d157      	bne.n	1a001dd2 <__sflush_r+0xde>
1a001d22:	2301      	movs	r3, #1
1a001d24:	4640      	mov	r0, r8
1a001d26:	47a8      	blx	r5
1a001d28:	1c45      	adds	r5, r0, #1
1a001d2a:	4602      	mov	r2, r0
1a001d2c:	d066      	beq.n	1a001dfc <__sflush_r+0x108>
1a001d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001d32:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
1a001d34:	6a21      	ldr	r1, [r4, #32]
1a001d36:	0758      	lsls	r0, r3, #29
1a001d38:	d505      	bpl.n	1a001d46 <__sflush_r+0x52>
1a001d3a:	6863      	ldr	r3, [r4, #4]
1a001d3c:	1ad2      	subs	r2, r2, r3
1a001d3e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
1a001d40:	b10b      	cbz	r3, 1a001d46 <__sflush_r+0x52>
1a001d42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
1a001d44:	1ad2      	subs	r2, r2, r3
1a001d46:	2300      	movs	r3, #0
1a001d48:	4640      	mov	r0, r8
1a001d4a:	47a8      	blx	r5
1a001d4c:	1c43      	adds	r3, r0, #1
1a001d4e:	d042      	beq.n	1a001dd6 <__sflush_r+0xe2>
1a001d50:	2300      	movs	r3, #0
1a001d52:	6063      	str	r3, [r4, #4]
1a001d54:	6923      	ldr	r3, [r4, #16]
1a001d56:	6023      	str	r3, [r4, #0]
1a001d58:	89a3      	ldrh	r3, [r4, #12]
1a001d5a:	04df      	lsls	r7, r3, #19
1a001d5c:	d500      	bpl.n	1a001d60 <__sflush_r+0x6c>
1a001d5e:	6560      	str	r0, [r4, #84]	@ 0x54
1a001d60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1a001d62:	f8c8 6000 	str.w	r6, [r8]
1a001d66:	b141      	cbz	r1, 1a001d7a <__sflush_r+0x86>
1a001d68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
1a001d6c:	4299      	cmp	r1, r3
1a001d6e:	d002      	beq.n	1a001d76 <__sflush_r+0x82>
1a001d70:	4640      	mov	r0, r8
1a001d72:	f000 f937 	bl	1a001fe4 <_free_r>
1a001d76:	2300      	movs	r3, #0
1a001d78:	6363      	str	r3, [r4, #52]	@ 0x34
1a001d7a:	2000      	movs	r0, #0
1a001d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001d80:	690e      	ldr	r6, [r1, #16]
1a001d82:	2e00      	cmp	r6, #0
1a001d84:	d0f9      	beq.n	1a001d7a <__sflush_r+0x86>
1a001d86:	079b      	lsls	r3, r3, #30
1a001d88:	680d      	ldr	r5, [r1, #0]
1a001d8a:	bf08      	it	eq
1a001d8c:	694b      	ldreq	r3, [r1, #20]
1a001d8e:	600e      	str	r6, [r1, #0]
1a001d90:	bf18      	it	ne
1a001d92:	2300      	movne	r3, #0
1a001d94:	1bad      	subs	r5, r5, r6
1a001d96:	608b      	str	r3, [r1, #8]
1a001d98:	e00b      	b.n	1a001db2 <__sflush_r+0xbe>
1a001d9a:	462b      	mov	r3, r5
1a001d9c:	4632      	mov	r2, r6
1a001d9e:	6a21      	ldr	r1, [r4, #32]
1a001da0:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
1a001da2:	4640      	mov	r0, r8
1a001da4:	47b8      	blx	r7
1a001da6:	f1b0 0c00 	subs.w	ip, r0, #0
1a001daa:	eba5 050c 	sub.w	r5, r5, ip
1a001dae:	4466      	add	r6, ip
1a001db0:	dd06      	ble.n	1a001dc0 <__sflush_r+0xcc>
1a001db2:	2d00      	cmp	r5, #0
1a001db4:	dcf1      	bgt.n	1a001d9a <__sflush_r+0xa6>
1a001db6:	e7e0      	b.n	1a001d7a <__sflush_r+0x86>
1a001db8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
1a001dba:	2a00      	cmp	r2, #0
1a001dbc:	dca5      	bgt.n	1a001d0a <__sflush_r+0x16>
1a001dbe:	e7dc      	b.n	1a001d7a <__sflush_r+0x86>
1a001dc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1a001dc8:	81a3      	strh	r3, [r4, #12]
1a001dca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a001dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001dd2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
1a001dd4:	e7af      	b.n	1a001d36 <__sflush_r+0x42>
1a001dd6:	f8d8 1000 	ldr.w	r1, [r8]
1a001dda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001dde:	291d      	cmp	r1, #29
1a001de0:	d8f0      	bhi.n	1a001dc4 <__sflush_r+0xd0>
1a001de2:	4a0c      	ldr	r2, [pc, #48]	@ (1a001e14 <__sflush_r+0x120>)
1a001de4:	40ca      	lsrs	r2, r1
1a001de6:	07d5      	lsls	r5, r2, #31
1a001de8:	d5ec      	bpl.n	1a001dc4 <__sflush_r+0xd0>
1a001dea:	6922      	ldr	r2, [r4, #16]
1a001dec:	6022      	str	r2, [r4, #0]
1a001dee:	2200      	movs	r2, #0
1a001df0:	6062      	str	r2, [r4, #4]
1a001df2:	04da      	lsls	r2, r3, #19
1a001df4:	d5b4      	bpl.n	1a001d60 <__sflush_r+0x6c>
1a001df6:	2900      	cmp	r1, #0
1a001df8:	d0b1      	beq.n	1a001d5e <__sflush_r+0x6a>
1a001dfa:	e7b1      	b.n	1a001d60 <__sflush_r+0x6c>
1a001dfc:	f8d8 3000 	ldr.w	r3, [r8]
1a001e00:	2b00      	cmp	r3, #0
1a001e02:	d094      	beq.n	1a001d2e <__sflush_r+0x3a>
1a001e04:	2b1d      	cmp	r3, #29
1a001e06:	d001      	beq.n	1a001e0c <__sflush_r+0x118>
1a001e08:	2b16      	cmp	r3, #22
1a001e0a:	d1d9      	bne.n	1a001dc0 <__sflush_r+0xcc>
1a001e0c:	f8c8 6000 	str.w	r6, [r8]
1a001e10:	e7b3      	b.n	1a001d7a <__sflush_r+0x86>
1a001e12:	bf00      	nop
1a001e14:	20400001 	.word	0x20400001

1a001e18 <_fflush_r>:
1a001e18:	690b      	ldr	r3, [r1, #16]
1a001e1a:	b1b3      	cbz	r3, 1a001e4a <_fflush_r+0x32>
1a001e1c:	b510      	push	{r4, lr}
1a001e1e:	4604      	mov	r4, r0
1a001e20:	b082      	sub	sp, #8
1a001e22:	b108      	cbz	r0, 1a001e28 <_fflush_r+0x10>
1a001e24:	6a03      	ldr	r3, [r0, #32]
1a001e26:	b15b      	cbz	r3, 1a001e40 <_fflush_r+0x28>
1a001e28:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a001e2c:	b913      	cbnz	r3, 1a001e34 <_fflush_r+0x1c>
1a001e2e:	2000      	movs	r0, #0
1a001e30:	b002      	add	sp, #8
1a001e32:	bd10      	pop	{r4, pc}
1a001e34:	4620      	mov	r0, r4
1a001e36:	b002      	add	sp, #8
1a001e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a001e3c:	f7ff bf5a 	b.w	1a001cf4 <__sflush_r>
1a001e40:	9101      	str	r1, [sp, #4]
1a001e42:	f7ff ff2f 	bl	1a001ca4 <__sinit>
1a001e46:	9901      	ldr	r1, [sp, #4]
1a001e48:	e7ee      	b.n	1a001e28 <_fflush_r+0x10>
1a001e4a:	2000      	movs	r0, #0
1a001e4c:	4770      	bx	lr
1a001e4e:	bf00      	nop

1a001e50 <fflush>:
1a001e50:	b1b8      	cbz	r0, 1a001e82 <fflush+0x32>
1a001e52:	b538      	push	{r3, r4, r5, lr}
1a001e54:	4a0d      	ldr	r2, [pc, #52]	@ (1a001e8c <fflush+0x3c>)
1a001e56:	6903      	ldr	r3, [r0, #16]
1a001e58:	6815      	ldr	r5, [r2, #0]
1a001e5a:	4604      	mov	r4, r0
1a001e5c:	b12b      	cbz	r3, 1a001e6a <fflush+0x1a>
1a001e5e:	b10d      	cbz	r5, 1a001e64 <fflush+0x14>
1a001e60:	6a2b      	ldr	r3, [r5, #32]
1a001e62:	b153      	cbz	r3, 1a001e7a <fflush+0x2a>
1a001e64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a001e68:	b90b      	cbnz	r3, 1a001e6e <fflush+0x1e>
1a001e6a:	2000      	movs	r0, #0
1a001e6c:	bd38      	pop	{r3, r4, r5, pc}
1a001e6e:	4621      	mov	r1, r4
1a001e70:	4628      	mov	r0, r5
1a001e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a001e76:	f7ff bf3d 	b.w	1a001cf4 <__sflush_r>
1a001e7a:	4628      	mov	r0, r5
1a001e7c:	f7ff ff12 	bl	1a001ca4 <__sinit>
1a001e80:	e7f0      	b.n	1a001e64 <fflush+0x14>
1a001e82:	4a03      	ldr	r2, [pc, #12]	@ (1a001e90 <fflush+0x40>)
1a001e84:	4903      	ldr	r1, [pc, #12]	@ (1a001e94 <fflush+0x44>)
1a001e86:	4804      	ldr	r0, [pc, #16]	@ (1a001e98 <fflush+0x48>)
1a001e88:	f000 b98a 	b.w	1a0021a0 <_fwalk_sglue>
1a001e8c:	10000000 	.word	0x10000000
1a001e90:	10000050 	.word	0x10000050
1a001e94:	1a001e19 	.word	0x1a001e19
1a001e98:	10000004 	.word	0x10000004

1a001e9c <sbrk_aligned>:
1a001e9c:	b570      	push	{r4, r5, r6, lr}
1a001e9e:	4e10      	ldr	r6, [pc, #64]	@ (1a001ee0 <sbrk_aligned+0x44>)
1a001ea0:	6833      	ldr	r3, [r6, #0]
1a001ea2:	4605      	mov	r5, r0
1a001ea4:	460c      	mov	r4, r1
1a001ea6:	b1b3      	cbz	r3, 1a001ed6 <sbrk_aligned+0x3a>
1a001ea8:	4621      	mov	r1, r4
1a001eaa:	4628      	mov	r0, r5
1a001eac:	f7ff f80a 	bl	1a000ec4 <_sbrk_r>
1a001eb0:	1c43      	adds	r3, r0, #1
1a001eb2:	d00c      	beq.n	1a001ece <sbrk_aligned+0x32>
1a001eb4:	1cc4      	adds	r4, r0, #3
1a001eb6:	f024 0403 	bic.w	r4, r4, #3
1a001eba:	42a0      	cmp	r0, r4
1a001ebc:	d005      	beq.n	1a001eca <sbrk_aligned+0x2e>
1a001ebe:	1a21      	subs	r1, r4, r0
1a001ec0:	4628      	mov	r0, r5
1a001ec2:	f7fe ffff 	bl	1a000ec4 <_sbrk_r>
1a001ec6:	3001      	adds	r0, #1
1a001ec8:	d001      	beq.n	1a001ece <sbrk_aligned+0x32>
1a001eca:	4620      	mov	r0, r4
1a001ecc:	bd70      	pop	{r4, r5, r6, pc}
1a001ece:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
1a001ed2:	4620      	mov	r0, r4
1a001ed4:	bd70      	pop	{r4, r5, r6, pc}
1a001ed6:	4619      	mov	r1, r3
1a001ed8:	f7fe fff4 	bl	1a000ec4 <_sbrk_r>
1a001edc:	6030      	str	r0, [r6, #0]
1a001ede:	e7e3      	b.n	1a001ea8 <sbrk_aligned+0xc>
1a001ee0:	100001ac 	.word	0x100001ac

1a001ee4 <_malloc_r>:
1a001ee4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001ee8:	1ccd      	adds	r5, r1, #3
1a001eea:	f025 0503 	bic.w	r5, r5, #3
1a001eee:	3508      	adds	r5, #8
1a001ef0:	2d0c      	cmp	r5, #12
1a001ef2:	bf38      	it	cc
1a001ef4:	250c      	movcc	r5, #12
1a001ef6:	2d00      	cmp	r5, #0
1a001ef8:	4606      	mov	r6, r0
1a001efa:	db18      	blt.n	1a001f2e <_malloc_r+0x4a>
1a001efc:	42a9      	cmp	r1, r5
1a001efe:	d816      	bhi.n	1a001f2e <_malloc_r+0x4a>
1a001f00:	f8df 80dc 	ldr.w	r8, [pc, #220]	@ 1a001fe0 <_malloc_r+0xfc>
1a001f04:	f000 fc2c 	bl	1a002760 <__malloc_lock>
1a001f08:	f8d8 2004 	ldr.w	r2, [r8, #4]
1a001f0c:	b1a2      	cbz	r2, 1a001f38 <_malloc_r+0x54>
1a001f0e:	4614      	mov	r4, r2
1a001f10:	e003      	b.n	1a001f1a <_malloc_r+0x36>
1a001f12:	6863      	ldr	r3, [r4, #4]
1a001f14:	4622      	mov	r2, r4
1a001f16:	b17b      	cbz	r3, 1a001f38 <_malloc_r+0x54>
1a001f18:	461c      	mov	r4, r3
1a001f1a:	6823      	ldr	r3, [r4, #0]
1a001f1c:	1b5b      	subs	r3, r3, r5
1a001f1e:	d4f8      	bmi.n	1a001f12 <_malloc_r+0x2e>
1a001f20:	2b0b      	cmp	r3, #11
1a001f22:	d81f      	bhi.n	1a001f64 <_malloc_r+0x80>
1a001f24:	4294      	cmp	r4, r2
1a001f26:	6863      	ldr	r3, [r4, #4]
1a001f28:	d054      	beq.n	1a001fd4 <_malloc_r+0xf0>
1a001f2a:	6053      	str	r3, [r2, #4]
1a001f2c:	e00c      	b.n	1a001f48 <_malloc_r+0x64>
1a001f2e:	230c      	movs	r3, #12
1a001f30:	6033      	str	r3, [r6, #0]
1a001f32:	2000      	movs	r0, #0
1a001f34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001f38:	4629      	mov	r1, r5
1a001f3a:	4630      	mov	r0, r6
1a001f3c:	f7ff ffae 	bl	1a001e9c <sbrk_aligned>
1a001f40:	1c43      	adds	r3, r0, #1
1a001f42:	4604      	mov	r4, r0
1a001f44:	d019      	beq.n	1a001f7a <_malloc_r+0x96>
1a001f46:	6005      	str	r5, [r0, #0]
1a001f48:	4630      	mov	r0, r6
1a001f4a:	f000 fc0b 	bl	1a002764 <__malloc_unlock>
1a001f4e:	f104 000b 	add.w	r0, r4, #11
1a001f52:	1d23      	adds	r3, r4, #4
1a001f54:	f020 0007 	bic.w	r0, r0, #7
1a001f58:	1ac2      	subs	r2, r0, r3
1a001f5a:	bf1c      	itt	ne
1a001f5c:	1a1b      	subne	r3, r3, r0
1a001f5e:	50a3      	strne	r3, [r4, r2]
1a001f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001f64:	1961      	adds	r1, r4, r5
1a001f66:	4294      	cmp	r4, r2
1a001f68:	6025      	str	r5, [r4, #0]
1a001f6a:	bf14      	ite	ne
1a001f6c:	6051      	strne	r1, [r2, #4]
1a001f6e:	f8c8 1004 	streq.w	r1, [r8, #4]
1a001f72:	5163      	str	r3, [r4, r5]
1a001f74:	6863      	ldr	r3, [r4, #4]
1a001f76:	604b      	str	r3, [r1, #4]
1a001f78:	e7e6      	b.n	1a001f48 <_malloc_r+0x64>
1a001f7a:	f8d8 7004 	ldr.w	r7, [r8, #4]
1a001f7e:	b31f      	cbz	r7, 1a001fc8 <_malloc_r+0xe4>
1a001f80:	463c      	mov	r4, r7
1a001f82:	687f      	ldr	r7, [r7, #4]
1a001f84:	2f00      	cmp	r7, #0
1a001f86:	d1fb      	bne.n	1a001f80 <_malloc_r+0x9c>
1a001f88:	6823      	ldr	r3, [r4, #0]
1a001f8a:	4639      	mov	r1, r7
1a001f8c:	4630      	mov	r0, r6
1a001f8e:	eb04 0903 	add.w	r9, r4, r3
1a001f92:	f7fe ff97 	bl	1a000ec4 <_sbrk_r>
1a001f96:	4581      	cmp	r9, r0
1a001f98:	d116      	bne.n	1a001fc8 <_malloc_r+0xe4>
1a001f9a:	6823      	ldr	r3, [r4, #0]
1a001f9c:	1aed      	subs	r5, r5, r3
1a001f9e:	4629      	mov	r1, r5
1a001fa0:	4630      	mov	r0, r6
1a001fa2:	f7ff ff7b 	bl	1a001e9c <sbrk_aligned>
1a001fa6:	3001      	adds	r0, #1
1a001fa8:	d00e      	beq.n	1a001fc8 <_malloc_r+0xe4>
1a001faa:	6823      	ldr	r3, [r4, #0]
1a001fac:	f8d8 2004 	ldr.w	r2, [r8, #4]
1a001fb0:	442b      	add	r3, r5
1a001fb2:	6023      	str	r3, [r4, #0]
1a001fb4:	6853      	ldr	r3, [r2, #4]
1a001fb6:	b183      	cbz	r3, 1a001fda <_malloc_r+0xf6>
1a001fb8:	42a3      	cmp	r3, r4
1a001fba:	d003      	beq.n	1a001fc4 <_malloc_r+0xe0>
1a001fbc:	461a      	mov	r2, r3
1a001fbe:	685b      	ldr	r3, [r3, #4]
1a001fc0:	429c      	cmp	r4, r3
1a001fc2:	d1fb      	bne.n	1a001fbc <_malloc_r+0xd8>
1a001fc4:	2300      	movs	r3, #0
1a001fc6:	e7b0      	b.n	1a001f2a <_malloc_r+0x46>
1a001fc8:	230c      	movs	r3, #12
1a001fca:	6033      	str	r3, [r6, #0]
1a001fcc:	4630      	mov	r0, r6
1a001fce:	f000 fbc9 	bl	1a002764 <__malloc_unlock>
1a001fd2:	e7ae      	b.n	1a001f32 <_malloc_r+0x4e>
1a001fd4:	f8c8 3004 	str.w	r3, [r8, #4]
1a001fd8:	e7b6      	b.n	1a001f48 <_malloc_r+0x64>
1a001fda:	f8c8 7004 	str.w	r7, [r8, #4]
1a001fde:	e7b3      	b.n	1a001f48 <_malloc_r+0x64>
1a001fe0:	100001ac 	.word	0x100001ac

1a001fe4 <_free_r>:
1a001fe4:	2900      	cmp	r1, #0
1a001fe6:	d050      	beq.n	1a00208a <_free_r+0xa6>
1a001fe8:	b538      	push	{r3, r4, r5, lr}
1a001fea:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a001fee:	1f0c      	subs	r4, r1, #4
1a001ff0:	2b00      	cmp	r3, #0
1a001ff2:	bfb8      	it	lt
1a001ff4:	18e4      	addlt	r4, r4, r3
1a001ff6:	4605      	mov	r5, r0
1a001ff8:	f000 fbb2 	bl	1a002760 <__malloc_lock>
1a001ffc:	4a27      	ldr	r2, [pc, #156]	@ (1a00209c <_free_r+0xb8>)
1a001ffe:	6813      	ldr	r3, [r2, #0]
1a002000:	b12b      	cbz	r3, 1a00200e <_free_r+0x2a>
1a002002:	42a3      	cmp	r3, r4
1a002004:	d90c      	bls.n	1a002020 <_free_r+0x3c>
1a002006:	6821      	ldr	r1, [r4, #0]
1a002008:	1860      	adds	r0, r4, r1
1a00200a:	4283      	cmp	r3, r0
1a00200c:	d02c      	beq.n	1a002068 <_free_r+0x84>
1a00200e:	6063      	str	r3, [r4, #4]
1a002010:	4628      	mov	r0, r5
1a002012:	6014      	str	r4, [r2, #0]
1a002014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a002018:	f000 bba4 	b.w	1a002764 <__malloc_unlock>
1a00201c:	42a3      	cmp	r3, r4
1a00201e:	d80f      	bhi.n	1a002040 <_free_r+0x5c>
1a002020:	461a      	mov	r2, r3
1a002022:	685b      	ldr	r3, [r3, #4]
1a002024:	2b00      	cmp	r3, #0
1a002026:	d1f9      	bne.n	1a00201c <_free_r+0x38>
1a002028:	6811      	ldr	r1, [r2, #0]
1a00202a:	1850      	adds	r0, r2, r1
1a00202c:	4284      	cmp	r4, r0
1a00202e:	d017      	beq.n	1a002060 <_free_r+0x7c>
1a002030:	d32c      	bcc.n	1a00208c <_free_r+0xa8>
1a002032:	6063      	str	r3, [r4, #4]
1a002034:	6054      	str	r4, [r2, #4]
1a002036:	4628      	mov	r0, r5
1a002038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a00203c:	f000 bb92 	b.w	1a002764 <__malloc_unlock>
1a002040:	6811      	ldr	r1, [r2, #0]
1a002042:	1850      	adds	r0, r2, r1
1a002044:	42a0      	cmp	r0, r4
1a002046:	d014      	beq.n	1a002072 <_free_r+0x8e>
1a002048:	d820      	bhi.n	1a00208c <_free_r+0xa8>
1a00204a:	6821      	ldr	r1, [r4, #0]
1a00204c:	1860      	adds	r0, r4, r1
1a00204e:	4283      	cmp	r3, r0
1a002050:	d1ef      	bne.n	1a002032 <_free_r+0x4e>
1a002052:	6818      	ldr	r0, [r3, #0]
1a002054:	685b      	ldr	r3, [r3, #4]
1a002056:	4408      	add	r0, r1
1a002058:	e9c4 0300 	strd	r0, r3, [r4]
1a00205c:	6054      	str	r4, [r2, #4]
1a00205e:	e7ea      	b.n	1a002036 <_free_r+0x52>
1a002060:	6823      	ldr	r3, [r4, #0]
1a002062:	440b      	add	r3, r1
1a002064:	6013      	str	r3, [r2, #0]
1a002066:	e7e6      	b.n	1a002036 <_free_r+0x52>
1a002068:	6818      	ldr	r0, [r3, #0]
1a00206a:	685b      	ldr	r3, [r3, #4]
1a00206c:	4408      	add	r0, r1
1a00206e:	6020      	str	r0, [r4, #0]
1a002070:	e7cd      	b.n	1a00200e <_free_r+0x2a>
1a002072:	6820      	ldr	r0, [r4, #0]
1a002074:	4401      	add	r1, r0
1a002076:	1850      	adds	r0, r2, r1
1a002078:	4283      	cmp	r3, r0
1a00207a:	6011      	str	r1, [r2, #0]
1a00207c:	d1db      	bne.n	1a002036 <_free_r+0x52>
1a00207e:	e9d3 0400 	ldrd	r0, r4, [r3]
1a002082:	4401      	add	r1, r0
1a002084:	e9c2 1400 	strd	r1, r4, [r2]
1a002088:	e7d5      	b.n	1a002036 <_free_r+0x52>
1a00208a:	4770      	bx	lr
1a00208c:	230c      	movs	r3, #12
1a00208e:	602b      	str	r3, [r5, #0]
1a002090:	4628      	mov	r0, r5
1a002092:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a002096:	f000 bb65 	b.w	1a002764 <__malloc_unlock>
1a00209a:	bf00      	nop
1a00209c:	100001b0 	.word	0x100001b0

1a0020a0 <memmove>:
1a0020a0:	4288      	cmp	r0, r1
1a0020a2:	d90e      	bls.n	1a0020c2 <memmove+0x22>
1a0020a4:	188b      	adds	r3, r1, r2
1a0020a6:	4283      	cmp	r3, r0
1a0020a8:	d90b      	bls.n	1a0020c2 <memmove+0x22>
1a0020aa:	eb00 0c02 	add.w	ip, r0, r2
1a0020ae:	2a00      	cmp	r2, #0
1a0020b0:	d06e      	beq.n	1a002190 <memmove+0xf0>
1a0020b2:	4662      	mov	r2, ip
1a0020b4:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
1a0020b8:	f802 cd01 	strb.w	ip, [r2, #-1]!
1a0020bc:	4299      	cmp	r1, r3
1a0020be:	d1f9      	bne.n	1a0020b4 <memmove+0x14>
1a0020c0:	4770      	bx	lr
1a0020c2:	2a0f      	cmp	r2, #15
1a0020c4:	d80f      	bhi.n	1a0020e6 <memmove+0x46>
1a0020c6:	4603      	mov	r3, r0
1a0020c8:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
1a0020cc:	2a00      	cmp	r2, #0
1a0020ce:	d05f      	beq.n	1a002190 <memmove+0xf0>
1a0020d0:	f10c 0c01 	add.w	ip, ip, #1
1a0020d4:	3b01      	subs	r3, #1
1a0020d6:	448c      	add	ip, r1
1a0020d8:	f811 2b01 	ldrb.w	r2, [r1], #1
1a0020dc:	f803 2f01 	strb.w	r2, [r3, #1]!
1a0020e0:	4561      	cmp	r1, ip
1a0020e2:	d1f9      	bne.n	1a0020d8 <memmove+0x38>
1a0020e4:	4770      	bx	lr
1a0020e6:	ea40 0301 	orr.w	r3, r0, r1
1a0020ea:	079b      	lsls	r3, r3, #30
1a0020ec:	d151      	bne.n	1a002192 <memmove+0xf2>
1a0020ee:	f1a2 0310 	sub.w	r3, r2, #16
1a0020f2:	b570      	push	{r4, r5, r6, lr}
1a0020f4:	f101 0c20 	add.w	ip, r1, #32
1a0020f8:	f023 050f 	bic.w	r5, r3, #15
1a0020fc:	f101 0e10 	add.w	lr, r1, #16
1a002100:	f100 0410 	add.w	r4, r0, #16
1a002104:	44ac      	add	ip, r5
1a002106:	091b      	lsrs	r3, r3, #4
1a002108:	f85e 5c10 	ldr.w	r5, [lr, #-16]
1a00210c:	f844 5c10 	str.w	r5, [r4, #-16]
1a002110:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
1a002114:	f844 5c0c 	str.w	r5, [r4, #-12]
1a002118:	f85e 5c08 	ldr.w	r5, [lr, #-8]
1a00211c:	f844 5c08 	str.w	r5, [r4, #-8]
1a002120:	f85e 5c04 	ldr.w	r5, [lr, #-4]
1a002124:	f844 5c04 	str.w	r5, [r4, #-4]
1a002128:	f10e 0e10 	add.w	lr, lr, #16
1a00212c:	45e6      	cmp	lr, ip
1a00212e:	f104 0410 	add.w	r4, r4, #16
1a002132:	d1e9      	bne.n	1a002108 <memmove+0x68>
1a002134:	3301      	adds	r3, #1
1a002136:	f012 0f0c 	tst.w	r2, #12
1a00213a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
1a00213e:	f002 040f 	and.w	r4, r2, #15
1a002142:	eb00 1303 	add.w	r3, r0, r3, lsl #4
1a002146:	d028      	beq.n	1a00219a <memmove+0xfa>
1a002148:	3c04      	subs	r4, #4
1a00214a:	f024 0603 	bic.w	r6, r4, #3
1a00214e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
1a002152:	441e      	add	r6, r3
1a002154:	1f1c      	subs	r4, r3, #4
1a002156:	468e      	mov	lr, r1
1a002158:	f85e 5b04 	ldr.w	r5, [lr], #4
1a00215c:	f844 5f04 	str.w	r5, [r4, #4]!
1a002160:	42b4      	cmp	r4, r6
1a002162:	d1f9      	bne.n	1a002158 <memmove+0xb8>
1a002164:	f10c 0401 	add.w	r4, ip, #1
1a002168:	f002 0203 	and.w	r2, r2, #3
1a00216c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
1a002170:	eb01 0184 	add.w	r1, r1, r4, lsl #2
1a002174:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
1a002178:	b14a      	cbz	r2, 1a00218e <memmove+0xee>
1a00217a:	f10c 0c01 	add.w	ip, ip, #1
1a00217e:	3b01      	subs	r3, #1
1a002180:	448c      	add	ip, r1
1a002182:	f811 2b01 	ldrb.w	r2, [r1], #1
1a002186:	f803 2f01 	strb.w	r2, [r3, #1]!
1a00218a:	4561      	cmp	r1, ip
1a00218c:	d1f9      	bne.n	1a002182 <memmove+0xe2>
1a00218e:	bd70      	pop	{r4, r5, r6, pc}
1a002190:	4770      	bx	lr
1a002192:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
1a002196:	4603      	mov	r3, r0
1a002198:	e79a      	b.n	1a0020d0 <memmove+0x30>
1a00219a:	4622      	mov	r2, r4
1a00219c:	e7ea      	b.n	1a002174 <memmove+0xd4>
1a00219e:	bf00      	nop

1a0021a0 <_fwalk_sglue>:
1a0021a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0021a4:	4607      	mov	r7, r0
1a0021a6:	4688      	mov	r8, r1
1a0021a8:	4616      	mov	r6, r2
1a0021aa:	f04f 0900 	mov.w	r9, #0
1a0021ae:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
1a0021b2:	3d01      	subs	r5, #1
1a0021b4:	d410      	bmi.n	1a0021d8 <_fwalk_sglue+0x38>
1a0021b6:	89a3      	ldrh	r3, [r4, #12]
1a0021b8:	2b01      	cmp	r3, #1
1a0021ba:	d908      	bls.n	1a0021ce <_fwalk_sglue+0x2e>
1a0021bc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
1a0021c0:	3301      	adds	r3, #1
1a0021c2:	4621      	mov	r1, r4
1a0021c4:	4638      	mov	r0, r7
1a0021c6:	d002      	beq.n	1a0021ce <_fwalk_sglue+0x2e>
1a0021c8:	47c0      	blx	r8
1a0021ca:	ea49 0900 	orr.w	r9, r9, r0
1a0021ce:	3d01      	subs	r5, #1
1a0021d0:	1c6b      	adds	r3, r5, #1
1a0021d2:	f104 0468 	add.w	r4, r4, #104	@ 0x68
1a0021d6:	d1ee      	bne.n	1a0021b6 <_fwalk_sglue+0x16>
1a0021d8:	6836      	ldr	r6, [r6, #0]
1a0021da:	2e00      	cmp	r6, #0
1a0021dc:	d1e7      	bne.n	1a0021ae <_fwalk_sglue+0xe>
1a0021de:	4648      	mov	r0, r9
1a0021e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

1a0021f0 <memchr>:
1a0021f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
1a0021f4:	2a10      	cmp	r2, #16
1a0021f6:	db2b      	blt.n	1a002250 <memchr+0x60>
1a0021f8:	f010 0f07 	tst.w	r0, #7
1a0021fc:	d008      	beq.n	1a002210 <memchr+0x20>
1a0021fe:	f810 3b01 	ldrb.w	r3, [r0], #1
1a002202:	3a01      	subs	r2, #1
1a002204:	428b      	cmp	r3, r1
1a002206:	d02d      	beq.n	1a002264 <memchr+0x74>
1a002208:	f010 0f07 	tst.w	r0, #7
1a00220c:	b342      	cbz	r2, 1a002260 <memchr+0x70>
1a00220e:	d1f6      	bne.n	1a0021fe <memchr+0xe>
1a002210:	b4f0      	push	{r4, r5, r6, r7}
1a002212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a002216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a00221a:	f022 0407 	bic.w	r4, r2, #7
1a00221e:	f07f 0700 	mvns.w	r7, #0
1a002222:	2300      	movs	r3, #0
1a002224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a002228:	3c08      	subs	r4, #8
1a00222a:	ea85 0501 	eor.w	r5, r5, r1
1a00222e:	ea86 0601 	eor.w	r6, r6, r1
1a002232:	fa85 f547 	uadd8	r5, r5, r7
1a002236:	faa3 f587 	sel	r5, r3, r7
1a00223a:	fa86 f647 	uadd8	r6, r6, r7
1a00223e:	faa5 f687 	sel	r6, r5, r7
1a002242:	b98e      	cbnz	r6, 1a002268 <memchr+0x78>
1a002244:	d1ee      	bne.n	1a002224 <memchr+0x34>
1a002246:	bcf0      	pop	{r4, r5, r6, r7}
1a002248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
1a00224c:	f002 0207 	and.w	r2, r2, #7
1a002250:	b132      	cbz	r2, 1a002260 <memchr+0x70>
1a002252:	f810 3b01 	ldrb.w	r3, [r0], #1
1a002256:	3a01      	subs	r2, #1
1a002258:	ea83 0301 	eor.w	r3, r3, r1
1a00225c:	b113      	cbz	r3, 1a002264 <memchr+0x74>
1a00225e:	d1f8      	bne.n	1a002252 <memchr+0x62>
1a002260:	2000      	movs	r0, #0
1a002262:	4770      	bx	lr
1a002264:	3801      	subs	r0, #1
1a002266:	4770      	bx	lr
1a002268:	2d00      	cmp	r5, #0
1a00226a:	bf06      	itte	eq
1a00226c:	4635      	moveq	r5, r6
1a00226e:	3803      	subeq	r0, #3
1a002270:	3807      	subne	r0, #7
1a002272:	f015 0f01 	tst.w	r5, #1
1a002276:	d107      	bne.n	1a002288 <memchr+0x98>
1a002278:	3001      	adds	r0, #1
1a00227a:	f415 7f80 	tst.w	r5, #256	@ 0x100
1a00227e:	bf02      	ittt	eq
1a002280:	3001      	addeq	r0, #1
1a002282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
1a002286:	3001      	addeq	r0, #1
1a002288:	bcf0      	pop	{r4, r5, r6, r7}
1a00228a:	3801      	subs	r0, #1
1a00228c:	4770      	bx	lr
1a00228e:	bf00      	nop

1a002290 <__swsetup_r>:
1a002290:	b538      	push	{r3, r4, r5, lr}
1a002292:	4b2f      	ldr	r3, [pc, #188]	@ (1a002350 <__swsetup_r+0xc0>)
1a002294:	681b      	ldr	r3, [r3, #0]
1a002296:	4605      	mov	r5, r0
1a002298:	460c      	mov	r4, r1
1a00229a:	b113      	cbz	r3, 1a0022a2 <__swsetup_r+0x12>
1a00229c:	6a1a      	ldr	r2, [r3, #32]
1a00229e:	2a00      	cmp	r2, #0
1a0022a0:	d04b      	beq.n	1a00233a <__swsetup_r+0xaa>
1a0022a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0022a6:	0718      	lsls	r0, r3, #28
1a0022a8:	d51c      	bpl.n	1a0022e4 <__swsetup_r+0x54>
1a0022aa:	6922      	ldr	r2, [r4, #16]
1a0022ac:	b322      	cbz	r2, 1a0022f8 <__swsetup_r+0x68>
1a0022ae:	f013 0101 	ands.w	r1, r3, #1
1a0022b2:	d007      	beq.n	1a0022c4 <__swsetup_r+0x34>
1a0022b4:	6961      	ldr	r1, [r4, #20]
1a0022b6:	2000      	movs	r0, #0
1a0022b8:	4249      	negs	r1, r1
1a0022ba:	60a0      	str	r0, [r4, #8]
1a0022bc:	61a1      	str	r1, [r4, #24]
1a0022be:	b13a      	cbz	r2, 1a0022d0 <__swsetup_r+0x40>
1a0022c0:	2000      	movs	r0, #0
1a0022c2:	bd38      	pop	{r3, r4, r5, pc}
1a0022c4:	0798      	lsls	r0, r3, #30
1a0022c6:	bf58      	it	pl
1a0022c8:	6961      	ldrpl	r1, [r4, #20]
1a0022ca:	60a1      	str	r1, [r4, #8]
1a0022cc:	2a00      	cmp	r2, #0
1a0022ce:	d1f7      	bne.n	1a0022c0 <__swsetup_r+0x30>
1a0022d0:	0619      	lsls	r1, r3, #24
1a0022d2:	bf58      	it	pl
1a0022d4:	4610      	movpl	r0, r2
1a0022d6:	d5f4      	bpl.n	1a0022c2 <__swsetup_r+0x32>
1a0022d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1a0022dc:	81a3      	strh	r3, [r4, #12]
1a0022de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a0022e2:	bd38      	pop	{r3, r4, r5, pc}
1a0022e4:	06d9      	lsls	r1, r3, #27
1a0022e6:	d52c      	bpl.n	1a002342 <__swsetup_r+0xb2>
1a0022e8:	075a      	lsls	r2, r3, #29
1a0022ea:	d412      	bmi.n	1a002312 <__swsetup_r+0x82>
1a0022ec:	6922      	ldr	r2, [r4, #16]
1a0022ee:	f043 0308 	orr.w	r3, r3, #8
1a0022f2:	81a3      	strh	r3, [r4, #12]
1a0022f4:	2a00      	cmp	r2, #0
1a0022f6:	d1da      	bne.n	1a0022ae <__swsetup_r+0x1e>
1a0022f8:	f403 7120 	and.w	r1, r3, #640	@ 0x280
1a0022fc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
1a002300:	d0d5      	beq.n	1a0022ae <__swsetup_r+0x1e>
1a002302:	4621      	mov	r1, r4
1a002304:	4628      	mov	r0, r5
1a002306:	f000 fa2f 	bl	1a002768 <__smakebuf_r>
1a00230a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00230e:	6922      	ldr	r2, [r4, #16]
1a002310:	e7cd      	b.n	1a0022ae <__swsetup_r+0x1e>
1a002312:	6b61      	ldr	r1, [r4, #52]	@ 0x34
1a002314:	b151      	cbz	r1, 1a00232c <__swsetup_r+0x9c>
1a002316:	f104 0244 	add.w	r2, r4, #68	@ 0x44
1a00231a:	4291      	cmp	r1, r2
1a00231c:	d004      	beq.n	1a002328 <__swsetup_r+0x98>
1a00231e:	4628      	mov	r0, r5
1a002320:	f7ff fe60 	bl	1a001fe4 <_free_r>
1a002324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002328:	2200      	movs	r2, #0
1a00232a:	6362      	str	r2, [r4, #52]	@ 0x34
1a00232c:	6922      	ldr	r2, [r4, #16]
1a00232e:	2100      	movs	r1, #0
1a002330:	e9c4 2100 	strd	r2, r1, [r4]
1a002334:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
1a002338:	e7d9      	b.n	1a0022ee <__swsetup_r+0x5e>
1a00233a:	4618      	mov	r0, r3
1a00233c:	f7ff fcb2 	bl	1a001ca4 <__sinit>
1a002340:	e7af      	b.n	1a0022a2 <__swsetup_r+0x12>
1a002342:	2209      	movs	r2, #9
1a002344:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
1a002348:	602a      	str	r2, [r5, #0]
1a00234a:	81a3      	strh	r3, [r4, #12]
1a00234c:	e7c7      	b.n	1a0022de <__swsetup_r+0x4e>
1a00234e:	bf00      	nop
1a002350:	10000000 	.word	0x10000000

1a002354 <_realloc_r>:
1a002354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002358:	4614      	mov	r4, r2
1a00235a:	b341      	cbz	r1, 1a0023ae <_realloc_r+0x5a>
1a00235c:	b30a      	cbz	r2, 1a0023a2 <_realloc_r+0x4e>
1a00235e:	4606      	mov	r6, r0
1a002360:	460d      	mov	r5, r1
1a002362:	f000 fad5 	bl	1a002910 <_malloc_usable_size_r>
1a002366:	4284      	cmp	r4, r0
1a002368:	4607      	mov	r7, r0
1a00236a:	d802      	bhi.n	1a002372 <_realloc_r+0x1e>
1a00236c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
1a002370:	d813      	bhi.n	1a00239a <_realloc_r+0x46>
1a002372:	4621      	mov	r1, r4
1a002374:	4630      	mov	r0, r6
1a002376:	f7ff fdb5 	bl	1a001ee4 <_malloc_r>
1a00237a:	4680      	mov	r8, r0
1a00237c:	b150      	cbz	r0, 1a002394 <_realloc_r+0x40>
1a00237e:	42bc      	cmp	r4, r7
1a002380:	4622      	mov	r2, r4
1a002382:	4629      	mov	r1, r5
1a002384:	bf28      	it	cs
1a002386:	463a      	movcs	r2, r7
1a002388:	f7fe ff8a 	bl	1a0012a0 <memcpy>
1a00238c:	4629      	mov	r1, r5
1a00238e:	4630      	mov	r0, r6
1a002390:	f7ff fe28 	bl	1a001fe4 <_free_r>
1a002394:	4640      	mov	r0, r8
1a002396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00239a:	46a8      	mov	r8, r5
1a00239c:	4640      	mov	r0, r8
1a00239e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0023a2:	46a0      	mov	r8, r4
1a0023a4:	f7ff fe1e 	bl	1a001fe4 <_free_r>
1a0023a8:	4640      	mov	r0, r8
1a0023aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0023ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0023b2:	4611      	mov	r1, r2
1a0023b4:	f7ff bd96 	b.w	1a001ee4 <_malloc_r>

1a0023b8 <_printf_common>:
1a0023b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0023bc:	4692      	mov	sl, r2
1a0023be:	461f      	mov	r7, r3
1a0023c0:	690a      	ldr	r2, [r1, #16]
1a0023c2:	688b      	ldr	r3, [r1, #8]
1a0023c4:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
1a0023c8:	429a      	cmp	r2, r3
1a0023ca:	bfb8      	it	lt
1a0023cc:	461a      	movlt	r2, r3
1a0023ce:	f8ca 2000 	str.w	r2, [sl]
1a0023d2:	f891 3043 	ldrb.w	r3, [r1, #67]	@ 0x43
1a0023d6:	460c      	mov	r4, r1
1a0023d8:	4606      	mov	r6, r0
1a0023da:	b113      	cbz	r3, 1a0023e2 <_printf_common+0x2a>
1a0023dc:	3201      	adds	r2, #1
1a0023de:	f8ca 2000 	str.w	r2, [sl]
1a0023e2:	6822      	ldr	r2, [r4, #0]
1a0023e4:	0691      	lsls	r1, r2, #26
1a0023e6:	d55f      	bpl.n	1a0024a8 <_printf_common+0xf0>
1a0023e8:	f8da 3000 	ldr.w	r3, [sl]
1a0023ec:	3302      	adds	r3, #2
1a0023ee:	f8ca 3000 	str.w	r3, [sl]
1a0023f2:	6822      	ldr	r2, [r4, #0]
1a0023f4:	f012 0f06 	tst.w	r2, #6
1a0023f8:	4611      	mov	r1, r2
1a0023fa:	d11d      	bne.n	1a002438 <_printf_common+0x80>
1a0023fc:	68e1      	ldr	r1, [r4, #12]
1a0023fe:	4299      	cmp	r1, r3
1a002400:	bfd8      	it	le
1a002402:	4611      	movle	r1, r2
1a002404:	dd18      	ble.n	1a002438 <_printf_common+0x80>
1a002406:	f04f 0800 	mov.w	r8, #0
1a00240a:	f104 0b19 	add.w	fp, r4, #25
1a00240e:	e005      	b.n	1a00241c <_printf_common+0x64>
1a002410:	68e5      	ldr	r5, [r4, #12]
1a002412:	f8da 3000 	ldr.w	r3, [sl]
1a002416:	1aed      	subs	r5, r5, r3
1a002418:	4545      	cmp	r5, r8
1a00241a:	dd0c      	ble.n	1a002436 <_printf_common+0x7e>
1a00241c:	2301      	movs	r3, #1
1a00241e:	465a      	mov	r2, fp
1a002420:	4639      	mov	r1, r7
1a002422:	4630      	mov	r0, r6
1a002424:	47c8      	blx	r9
1a002426:	3001      	adds	r0, #1
1a002428:	f108 0801 	add.w	r8, r8, #1
1a00242c:	d1f0      	bne.n	1a002410 <_printf_common+0x58>
1a00242e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a002432:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002436:	6821      	ldr	r1, [r4, #0]
1a002438:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
1a00243c:	3b00      	subs	r3, #0
1a00243e:	bf18      	it	ne
1a002440:	2301      	movne	r3, #1
1a002442:	068a      	lsls	r2, r1, #26
1a002444:	d50a      	bpl.n	1a00245c <_printf_common+0xa4>
1a002446:	18e1      	adds	r1, r4, r3
1a002448:	1c5a      	adds	r2, r3, #1
1a00244a:	2030      	movs	r0, #48	@ 0x30
1a00244c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
1a002450:	4422      	add	r2, r4
1a002452:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
1a002456:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
1a00245a:	3302      	adds	r3, #2
1a00245c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
1a002460:	4639      	mov	r1, r7
1a002462:	4630      	mov	r0, r6
1a002464:	47c8      	blx	r9
1a002466:	3001      	adds	r0, #1
1a002468:	d0e1      	beq.n	1a00242e <_printf_common+0x76>
1a00246a:	6823      	ldr	r3, [r4, #0]
1a00246c:	f8da 5000 	ldr.w	r5, [sl]
1a002470:	6921      	ldr	r1, [r4, #16]
1a002472:	f003 0306 	and.w	r3, r3, #6
1a002476:	2b04      	cmp	r3, #4
1a002478:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
1a00247c:	d01b      	beq.n	1a0024b6 <_printf_common+0xfe>
1a00247e:	428a      	cmp	r2, r1
1a002480:	dd20      	ble.n	1a0024c4 <_printf_common+0x10c>
1a002482:	f04f 0800 	mov.w	r8, #0
1a002486:	1a52      	subs	r2, r2, r1
1a002488:	4490      	add	r8, r2
1a00248a:	341a      	adds	r4, #26
1a00248c:	2500      	movs	r5, #0
1a00248e:	e001      	b.n	1a002494 <_printf_common+0xdc>
1a002490:	4545      	cmp	r5, r8
1a002492:	da17      	bge.n	1a0024c4 <_printf_common+0x10c>
1a002494:	2301      	movs	r3, #1
1a002496:	4622      	mov	r2, r4
1a002498:	4639      	mov	r1, r7
1a00249a:	4630      	mov	r0, r6
1a00249c:	47c8      	blx	r9
1a00249e:	3001      	adds	r0, #1
1a0024a0:	f105 0501 	add.w	r5, r5, #1
1a0024a4:	d1f4      	bne.n	1a002490 <_printf_common+0xd8>
1a0024a6:	e7c2      	b.n	1a00242e <_printf_common+0x76>
1a0024a8:	f012 0f06 	tst.w	r2, #6
1a0024ac:	d00d      	beq.n	1a0024ca <_printf_common+0x112>
1a0024ae:	3b00      	subs	r3, #0
1a0024b0:	bf18      	it	ne
1a0024b2:	2301      	movne	r3, #1
1a0024b4:	e7d2      	b.n	1a00245c <_printf_common+0xa4>
1a0024b6:	1b40      	subs	r0, r0, r5
1a0024b8:	428a      	cmp	r2, r1
1a0024ba:	ea20 78e0 	bic.w	r8, r0, r0, asr #31
1a0024be:	dce2      	bgt.n	1a002486 <_printf_common+0xce>
1a0024c0:	2800      	cmp	r0, #0
1a0024c2:	dce2      	bgt.n	1a00248a <_printf_common+0xd2>
1a0024c4:	2000      	movs	r0, #0
1a0024c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a0024ca:	68e1      	ldr	r1, [r4, #12]
1a0024cc:	f8da 3000 	ldr.w	r3, [sl]
1a0024d0:	4299      	cmp	r1, r3
1a0024d2:	bfd8      	it	le
1a0024d4:	4611      	movle	r1, r2
1a0024d6:	dc96      	bgt.n	1a002406 <_printf_common+0x4e>
1a0024d8:	e7ae      	b.n	1a002438 <_printf_common+0x80>
1a0024da:	bf00      	nop

1a0024dc <_printf_i>:
1a0024dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0024e0:	4617      	mov	r7, r2
1a0024e2:	b084      	sub	sp, #16
1a0024e4:	7e0a      	ldrb	r2, [r1, #24]
1a0024e6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
1a0024e8:	460c      	mov	r4, r1
1a0024ea:	4606      	mov	r6, r0
1a0024ec:	4698      	mov	r8, r3
1a0024ee:	f101 0c43 	add.w	ip, r1, #67	@ 0x43
1a0024f2:	2a00      	cmp	r2, #0
1a0024f4:	d035      	beq.n	1a002562 <_printf_i+0x86>
1a0024f6:	f1a2 0358 	sub.w	r3, r2, #88	@ 0x58
1a0024fa:	b2d9      	uxtb	r1, r3
1a0024fc:	2920      	cmp	r1, #32
1a0024fe:	d869      	bhi.n	1a0025d4 <_printf_i+0xf8>
1a002500:	2b20      	cmp	r3, #32
1a002502:	d867      	bhi.n	1a0025d4 <_printf_i+0xf8>
1a002504:	e8df f013 	tbh	[pc, r3, lsl #1]
1a002508:	006600e6 	.word	0x006600e6
1a00250c:	00660066 	.word	0x00660066
1a002510:	00660066 	.word	0x00660066
1a002514:	00660066 	.word	0x00660066
1a002518:	00660066 	.word	0x00660066
1a00251c:	00ac0066 	.word	0x00ac0066
1a002520:	00660070 	.word	0x00660070
1a002524:	00660066 	.word	0x00660066
1a002528:	00700066 	.word	0x00700066
1a00252c:	00660066 	.word	0x00660066
1a002530:	00660066 	.word	0x00660066
1a002534:	00830021 	.word	0x00830021
1a002538:	006600c6 	.word	0x006600c6
1a00253c:	00b60066 	.word	0x00b60066
1a002540:	00830066 	.word	0x00830066
1a002544:	00660066 	.word	0x00660066
1a002548:	00ec      	.short	0x00ec
1a00254a:	682b      	ldr	r3, [r5, #0]
1a00254c:	6822      	ldr	r2, [r4, #0]
1a00254e:	6961      	ldr	r1, [r4, #20]
1a002550:	1d18      	adds	r0, r3, #4
1a002552:	6028      	str	r0, [r5, #0]
1a002554:	0610      	lsls	r0, r2, #24
1a002556:	681b      	ldr	r3, [r3, #0]
1a002558:	d402      	bmi.n	1a002560 <_printf_i+0x84>
1a00255a:	0652      	lsls	r2, r2, #25
1a00255c:	f100 80e0 	bmi.w	1a002720 <_printf_i+0x244>
1a002560:	6019      	str	r1, [r3, #0]
1a002562:	2300      	movs	r3, #0
1a002564:	46e1      	mov	r9, ip
1a002566:	6123      	str	r3, [r4, #16]
1a002568:	f8cd 8000 	str.w	r8, [sp]
1a00256c:	463b      	mov	r3, r7
1a00256e:	aa03      	add	r2, sp, #12
1a002570:	4621      	mov	r1, r4
1a002572:	4630      	mov	r0, r6
1a002574:	f7ff ff20 	bl	1a0023b8 <_printf_common>
1a002578:	3001      	adds	r0, #1
1a00257a:	d020      	beq.n	1a0025be <_printf_i+0xe2>
1a00257c:	6923      	ldr	r3, [r4, #16]
1a00257e:	464a      	mov	r2, r9
1a002580:	4639      	mov	r1, r7
1a002582:	4630      	mov	r0, r6
1a002584:	47c0      	blx	r8
1a002586:	3001      	adds	r0, #1
1a002588:	d019      	beq.n	1a0025be <_printf_i+0xe2>
1a00258a:	6823      	ldr	r3, [r4, #0]
1a00258c:	68e0      	ldr	r0, [r4, #12]
1a00258e:	f8dd 900c 	ldr.w	r9, [sp, #12]
1a002592:	079b      	lsls	r3, r3, #30
1a002594:	d518      	bpl.n	1a0025c8 <_printf_i+0xec>
1a002596:	4548      	cmp	r0, r9
1a002598:	dd16      	ble.n	1a0025c8 <_printf_i+0xec>
1a00259a:	2500      	movs	r5, #0
1a00259c:	f104 0a19 	add.w	sl, r4, #25
1a0025a0:	e004      	b.n	1a0025ac <_printf_i+0xd0>
1a0025a2:	68e0      	ldr	r0, [r4, #12]
1a0025a4:	eba0 0309 	sub.w	r3, r0, r9
1a0025a8:	42ab      	cmp	r3, r5
1a0025aa:	dd0d      	ble.n	1a0025c8 <_printf_i+0xec>
1a0025ac:	2301      	movs	r3, #1
1a0025ae:	4652      	mov	r2, sl
1a0025b0:	4639      	mov	r1, r7
1a0025b2:	4630      	mov	r0, r6
1a0025b4:	47c0      	blx	r8
1a0025b6:	3001      	adds	r0, #1
1a0025b8:	f105 0501 	add.w	r5, r5, #1
1a0025bc:	d1f1      	bne.n	1a0025a2 <_printf_i+0xc6>
1a0025be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
1a0025c2:	b004      	add	sp, #16
1a0025c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0025c8:	4548      	cmp	r0, r9
1a0025ca:	bfb8      	it	lt
1a0025cc:	4648      	movlt	r0, r9
1a0025ce:	b004      	add	sp, #16
1a0025d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0025d4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
1a0025d8:	2001      	movs	r0, #1
1a0025da:	f104 0942 	add.w	r9, r4, #66	@ 0x42
1a0025de:	2300      	movs	r3, #0
1a0025e0:	6120      	str	r0, [r4, #16]
1a0025e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1a0025e6:	e7bf      	b.n	1a002568 <_printf_i+0x8c>
1a0025e8:	682a      	ldr	r2, [r5, #0]
1a0025ea:	6823      	ldr	r3, [r4, #0]
1a0025ec:	1d11      	adds	r1, r2, #4
1a0025ee:	0618      	lsls	r0, r3, #24
1a0025f0:	6029      	str	r1, [r5, #0]
1a0025f2:	d402      	bmi.n	1a0025fa <_printf_i+0x11e>
1a0025f4:	0659      	lsls	r1, r3, #25
1a0025f6:	f100 8095 	bmi.w	1a002724 <_printf_i+0x248>
1a0025fa:	6810      	ldr	r0, [r2, #0]
1a0025fc:	4601      	mov	r1, r0
1a0025fe:	2800      	cmp	r0, #0
1a002600:	6862      	ldr	r2, [r4, #4]
1a002602:	f2c0 8093 	blt.w	1a00272c <_printf_i+0x250>
1a002606:	4854      	ldr	r0, [pc, #336]	@ (1a002758 <_printf_i+0x27c>)
1a002608:	f04f 0e0a 	mov.w	lr, #10
1a00260c:	e015      	b.n	1a00263a <_printf_i+0x15e>
1a00260e:	6820      	ldr	r0, [r4, #0]
1a002610:	682b      	ldr	r3, [r5, #0]
1a002612:	f010 0f80 	tst.w	r0, #128	@ 0x80
1a002616:	f853 1b04 	ldr.w	r1, [r3], #4
1a00261a:	d102      	bne.n	1a002622 <_printf_i+0x146>
1a00261c:	0640      	lsls	r0, r0, #25
1a00261e:	bf48      	it	mi
1a002620:	b289      	uxthmi	r1, r1
1a002622:	2a6f      	cmp	r2, #111	@ 0x6f
1a002624:	484c      	ldr	r0, [pc, #304]	@ (1a002758 <_printf_i+0x27c>)
1a002626:	602b      	str	r3, [r5, #0]
1a002628:	bf14      	ite	ne
1a00262a:	f04f 0e0a 	movne.w	lr, #10
1a00262e:	f04f 0e08 	moveq.w	lr, #8
1a002632:	2300      	movs	r3, #0
1a002634:	6862      	ldr	r2, [r4, #4]
1a002636:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
1a00263a:	2a00      	cmp	r2, #0
1a00263c:	60a2      	str	r2, [r4, #8]
1a00263e:	db51      	blt.n	1a0026e4 <_printf_i+0x208>
1a002640:	6823      	ldr	r3, [r4, #0]
1a002642:	f023 0304 	bic.w	r3, r3, #4
1a002646:	6023      	str	r3, [r4, #0]
1a002648:	2900      	cmp	r1, #0
1a00264a:	d14b      	bne.n	1a0026e4 <_printf_i+0x208>
1a00264c:	2a00      	cmp	r2, #0
1a00264e:	d17b      	bne.n	1a002748 <_printf_i+0x26c>
1a002650:	46e1      	mov	r9, ip
1a002652:	f1be 0f08 	cmp.w	lr, #8
1a002656:	d056      	beq.n	1a002706 <_printf_i+0x22a>
1a002658:	ebac 0309 	sub.w	r3, ip, r9
1a00265c:	6123      	str	r3, [r4, #16]
1a00265e:	e783      	b.n	1a002568 <_printf_i+0x8c>
1a002660:	682b      	ldr	r3, [r5, #0]
1a002662:	681a      	ldr	r2, [r3, #0]
1a002664:	3304      	adds	r3, #4
1a002666:	602b      	str	r3, [r5, #0]
1a002668:	f104 0942 	add.w	r9, r4, #66	@ 0x42
1a00266c:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
1a002670:	2001      	movs	r0, #1
1a002672:	e7b4      	b.n	1a0025de <_printf_i+0x102>
1a002674:	682b      	ldr	r3, [r5, #0]
1a002676:	6862      	ldr	r2, [r4, #4]
1a002678:	1d19      	adds	r1, r3, #4
1a00267a:	6029      	str	r1, [r5, #0]
1a00267c:	f8d3 9000 	ldr.w	r9, [r3]
1a002680:	2100      	movs	r1, #0
1a002682:	4648      	mov	r0, r9
1a002684:	f7ff fdb4 	bl	1a0021f0 <memchr>
1a002688:	2800      	cmp	r0, #0
1a00268a:	d063      	beq.n	1a002754 <_printf_i+0x278>
1a00268c:	eba0 0009 	sub.w	r0, r0, r9
1a002690:	6060      	str	r0, [r4, #4]
1a002692:	e7a4      	b.n	1a0025de <_printf_i+0x102>
1a002694:	6823      	ldr	r3, [r4, #0]
1a002696:	f043 0320 	orr.w	r3, r3, #32
1a00269a:	6023      	str	r3, [r4, #0]
1a00269c:	2278      	movs	r2, #120	@ 0x78
1a00269e:	482f      	ldr	r0, [pc, #188]	@ (1a00275c <_printf_i+0x280>)
1a0026a0:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
1a0026a4:	682a      	ldr	r2, [r5, #0]
1a0026a6:	f013 0f80 	tst.w	r3, #128	@ 0x80
1a0026aa:	f852 1b04 	ldr.w	r1, [r2], #4
1a0026ae:	d103      	bne.n	1a0026b8 <_printf_i+0x1dc>
1a0026b0:	f013 0f40 	tst.w	r3, #64	@ 0x40
1a0026b4:	bf18      	it	ne
1a0026b6:	b289      	uxthne	r1, r1
1a0026b8:	602a      	str	r2, [r5, #0]
1a0026ba:	07da      	lsls	r2, r3, #31
1a0026bc:	bf44      	itt	mi
1a0026be:	f043 0320 	orrmi.w	r3, r3, #32
1a0026c2:	6023      	strmi	r3, [r4, #0]
1a0026c4:	b919      	cbnz	r1, 1a0026ce <_printf_i+0x1f2>
1a0026c6:	6823      	ldr	r3, [r4, #0]
1a0026c8:	f023 0320 	bic.w	r3, r3, #32
1a0026cc:	6023      	str	r3, [r4, #0]
1a0026ce:	f04f 0e10 	mov.w	lr, #16
1a0026d2:	e7ae      	b.n	1a002632 <_printf_i+0x156>
1a0026d4:	2358      	movs	r3, #88	@ 0x58
1a0026d6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
1a0026da:	481f      	ldr	r0, [pc, #124]	@ (1a002758 <_printf_i+0x27c>)
1a0026dc:	6823      	ldr	r3, [r4, #0]
1a0026de:	e7e1      	b.n	1a0026a4 <_printf_i+0x1c8>
1a0026e0:	6823      	ldr	r3, [r4, #0]
1a0026e2:	e7db      	b.n	1a00269c <_printf_i+0x1c0>
1a0026e4:	4675      	mov	r5, lr
1a0026e6:	46e1      	mov	r9, ip
1a0026e8:	fbb1 f3f5 	udiv	r3, r1, r5
1a0026ec:	fb05 1a13 	mls	sl, r5, r3, r1
1a0026f0:	460a      	mov	r2, r1
1a0026f2:	42aa      	cmp	r2, r5
1a0026f4:	f810 100a 	ldrb.w	r1, [r0, sl]
1a0026f8:	f809 1d01 	strb.w	r1, [r9, #-1]!
1a0026fc:	4619      	mov	r1, r3
1a0026fe:	d2f3      	bcs.n	1a0026e8 <_printf_i+0x20c>
1a002700:	f1be 0f08 	cmp.w	lr, #8
1a002704:	d1a8      	bne.n	1a002658 <_printf_i+0x17c>
1a002706:	6823      	ldr	r3, [r4, #0]
1a002708:	07dd      	lsls	r5, r3, #31
1a00270a:	d5a5      	bpl.n	1a002658 <_printf_i+0x17c>
1a00270c:	6862      	ldr	r2, [r4, #4]
1a00270e:	6923      	ldr	r3, [r4, #16]
1a002710:	429a      	cmp	r2, r3
1a002712:	dca1      	bgt.n	1a002658 <_printf_i+0x17c>
1a002714:	2330      	movs	r3, #48	@ 0x30
1a002716:	f809 3c01 	strb.w	r3, [r9, #-1]
1a00271a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
1a00271e:	e79b      	b.n	1a002658 <_printf_i+0x17c>
1a002720:	8019      	strh	r1, [r3, #0]
1a002722:	e71e      	b.n	1a002562 <_printf_i+0x86>
1a002724:	f9b2 1000 	ldrsh.w	r1, [r2]
1a002728:	4608      	mov	r0, r1
1a00272a:	e768      	b.n	1a0025fe <_printf_i+0x122>
1a00272c:	202d      	movs	r0, #45	@ 0x2d
1a00272e:	2a00      	cmp	r2, #0
1a002730:	60a2      	str	r2, [r4, #8]
1a002732:	f884 0043 	strb.w	r0, [r4, #67]	@ 0x43
1a002736:	db02      	blt.n	1a00273e <_printf_i+0x262>
1a002738:	f023 0304 	bic.w	r3, r3, #4
1a00273c:	6023      	str	r3, [r4, #0]
1a00273e:	250a      	movs	r5, #10
1a002740:	4805      	ldr	r0, [pc, #20]	@ (1a002758 <_printf_i+0x27c>)
1a002742:	4249      	negs	r1, r1
1a002744:	46ae      	mov	lr, r5
1a002746:	e7ce      	b.n	1a0026e6 <_printf_i+0x20a>
1a002748:	7803      	ldrb	r3, [r0, #0]
1a00274a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
1a00274e:	f104 0942 	add.w	r9, r4, #66	@ 0x42
1a002752:	e77e      	b.n	1a002652 <_printf_i+0x176>
1a002754:	6860      	ldr	r0, [r4, #4]
1a002756:	e742      	b.n	1a0025de <_printf_i+0x102>
1a002758:	1a002950 	.word	0x1a002950
1a00275c:	1a002964 	.word	0x1a002964

1a002760 <__malloc_lock>:
1a002760:	4770      	bx	lr
1a002762:	bf00      	nop

1a002764 <__malloc_unlock>:
1a002764:	4770      	bx	lr
1a002766:	bf00      	nop

1a002768 <__smakebuf_r>:
1a002768:	b570      	push	{r4, r5, r6, lr}
1a00276a:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
1a00276e:	460c      	mov	r4, r1
1a002770:	0799      	lsls	r1, r3, #30
1a002772:	b096      	sub	sp, #88	@ 0x58
1a002774:	d507      	bpl.n	1a002786 <__smakebuf_r+0x1e>
1a002776:	f104 0347 	add.w	r3, r4, #71	@ 0x47
1a00277a:	2201      	movs	r2, #1
1a00277c:	e9c4 3204 	strd	r3, r2, [r4, #16]
1a002780:	6023      	str	r3, [r4, #0]
1a002782:	b016      	add	sp, #88	@ 0x58
1a002784:	bd70      	pop	{r4, r5, r6, pc}
1a002786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a00278a:	2900      	cmp	r1, #0
1a00278c:	4605      	mov	r5, r0
1a00278e:	db29      	blt.n	1a0027e4 <__smakebuf_r+0x7c>
1a002790:	466a      	mov	r2, sp
1a002792:	f7fe fb70 	bl	1a000e76 <_fstat_r>
1a002796:	2800      	cmp	r0, #0
1a002798:	db22      	blt.n	1a0027e0 <__smakebuf_r+0x78>
1a00279a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
1a00279e:	4628      	mov	r0, r5
1a0027a0:	9e01      	ldr	r6, [sp, #4]
1a0027a2:	f7ff fb9f 	bl	1a001ee4 <_malloc_r>
1a0027a6:	b388      	cbz	r0, 1a00280c <__smakebuf_r+0xa4>
1a0027a8:	89a3      	ldrh	r3, [r4, #12]
1a0027aa:	6020      	str	r0, [r4, #0]
1a0027ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1a0027b0:	f406 4670 	and.w	r6, r6, #61440	@ 0xf000
1a0027b4:	81a3      	strh	r3, [r4, #12]
1a0027b6:	f5b6 5f00 	cmp.w	r6, #8192	@ 0x2000
1a0027ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
1a0027be:	e9c4 0304 	strd	r0, r3, [r4, #16]
1a0027c2:	d1de      	bne.n	1a002782 <__smakebuf_r+0x1a>
1a0027c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0027c8:	4628      	mov	r0, r5
1a0027ca:	f7fe fb59 	bl	1a000e80 <_isatty_r>
1a0027ce:	2800      	cmp	r0, #0
1a0027d0:	d0d7      	beq.n	1a002782 <__smakebuf_r+0x1a>
1a0027d2:	89a3      	ldrh	r3, [r4, #12]
1a0027d4:	f023 0303 	bic.w	r3, r3, #3
1a0027d8:	f043 0301 	orr.w	r3, r3, #1
1a0027dc:	81a3      	strh	r3, [r4, #12]
1a0027de:	e7d0      	b.n	1a002782 <__smakebuf_r+0x1a>
1a0027e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0027e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
1a0027e8:	bf14      	ite	ne
1a0027ea:	2640      	movne	r6, #64	@ 0x40
1a0027ec:	f44f 6680 	moveq.w	r6, #1024	@ 0x400
1a0027f0:	4631      	mov	r1, r6
1a0027f2:	4628      	mov	r0, r5
1a0027f4:	f7ff fb76 	bl	1a001ee4 <_malloc_r>
1a0027f8:	b140      	cbz	r0, 1a00280c <__smakebuf_r+0xa4>
1a0027fa:	89a3      	ldrh	r3, [r4, #12]
1a0027fc:	6020      	str	r0, [r4, #0]
1a0027fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
1a002802:	e9c4 0604 	strd	r0, r6, [r4, #16]
1a002806:	81a3      	strh	r3, [r4, #12]
1a002808:	b016      	add	sp, #88	@ 0x58
1a00280a:	bd70      	pop	{r4, r5, r6, pc}
1a00280c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a002810:	059a      	lsls	r2, r3, #22
1a002812:	d4b6      	bmi.n	1a002782 <__smakebuf_r+0x1a>
1a002814:	f023 0303 	bic.w	r3, r3, #3
1a002818:	f104 0247 	add.w	r2, r4, #71	@ 0x47
1a00281c:	f043 0302 	orr.w	r3, r3, #2
1a002820:	2101      	movs	r1, #1
1a002822:	e9c4 2104 	strd	r2, r1, [r4, #16]
1a002826:	81a3      	strh	r3, [r4, #12]
1a002828:	6022      	str	r2, [r4, #0]
1a00282a:	e7aa      	b.n	1a002782 <__smakebuf_r+0x1a>

1a00282c <__swhatbuf_r>:
1a00282c:	b570      	push	{r4, r5, r6, lr}
1a00282e:	460c      	mov	r4, r1
1a002830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002834:	2900      	cmp	r1, #0
1a002836:	b096      	sub	sp, #88	@ 0x58
1a002838:	4615      	mov	r5, r2
1a00283a:	461e      	mov	r6, r3
1a00283c:	db0f      	blt.n	1a00285e <__swhatbuf_r+0x32>
1a00283e:	466a      	mov	r2, sp
1a002840:	f7fe fb19 	bl	1a000e76 <_fstat_r>
1a002844:	2800      	cmp	r0, #0
1a002846:	db0a      	blt.n	1a00285e <__swhatbuf_r+0x32>
1a002848:	9b01      	ldr	r3, [sp, #4]
1a00284a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
1a00284e:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
1a002852:	fab3 f383 	clz	r3, r3
1a002856:	f44f 6280 	mov.w	r2, #1024	@ 0x400
1a00285a:	095b      	lsrs	r3, r3, #5
1a00285c:	e008      	b.n	1a002870 <__swhatbuf_r+0x44>
1a00285e:	89a2      	ldrh	r2, [r4, #12]
1a002860:	f012 0f80 	tst.w	r2, #128	@ 0x80
1a002864:	f04f 0300 	mov.w	r3, #0
1a002868:	bf14      	ite	ne
1a00286a:	2240      	movne	r2, #64	@ 0x40
1a00286c:	f44f 6280 	moveq.w	r2, #1024	@ 0x400
1a002870:	2000      	movs	r0, #0
1a002872:	6033      	str	r3, [r6, #0]
1a002874:	602a      	str	r2, [r5, #0]
1a002876:	b016      	add	sp, #88	@ 0x58
1a002878:	bd70      	pop	{r4, r5, r6, pc}
1a00287a:	bf00      	nop

1a00287c <__sread>:
1a00287c:	b510      	push	{r4, lr}
1a00287e:	460c      	mov	r4, r1
1a002880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a002884:	f7fe fb0a 	bl	1a000e9c <_read_r>
1a002888:	2800      	cmp	r0, #0
1a00288a:	db03      	blt.n	1a002894 <__sread+0x18>
1a00288c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
1a00288e:	4403      	add	r3, r0
1a002890:	6563      	str	r3, [r4, #84]	@ 0x54
1a002892:	bd10      	pop	{r4, pc}
1a002894:	89a3      	ldrh	r3, [r4, #12]
1a002896:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
1a00289a:	81a3      	strh	r3, [r4, #12]
1a00289c:	bd10      	pop	{r4, pc}
1a00289e:	bf00      	nop

1a0028a0 <__seofread>:
1a0028a0:	2000      	movs	r0, #0
1a0028a2:	4770      	bx	lr

1a0028a4 <__swrite>:
1a0028a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0028a8:	460c      	mov	r4, r1
1a0028aa:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
1a0028ae:	461f      	mov	r7, r3
1a0028b0:	05cb      	lsls	r3, r1, #23
1a0028b2:	4605      	mov	r5, r0
1a0028b4:	4616      	mov	r6, r2
1a0028b6:	d40b      	bmi.n	1a0028d0 <__swrite+0x2c>
1a0028b8:	f421 5180 	bic.w	r1, r1, #4096	@ 0x1000
1a0028bc:	81a1      	strh	r1, [r4, #12]
1a0028be:	463b      	mov	r3, r7
1a0028c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0028c4:	4632      	mov	r2, r6
1a0028c6:	4628      	mov	r0, r5
1a0028c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0028cc:	f7fe bb0a 	b.w	1a000ee4 <_write_r>
1a0028d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0028d4:	2302      	movs	r3, #2
1a0028d6:	2200      	movs	r2, #0
1a0028d8:	f7fe fadb 	bl	1a000e92 <_lseek_r>
1a0028dc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
1a0028e0:	e7ea      	b.n	1a0028b8 <__swrite+0x14>
1a0028e2:	bf00      	nop

1a0028e4 <__sseek>:
1a0028e4:	b510      	push	{r4, lr}
1a0028e6:	460c      	mov	r4, r1
1a0028e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0028ec:	f7fe fad1 	bl	1a000e92 <_lseek_r>
1a0028f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0028f4:	1c42      	adds	r2, r0, #1
1a0028f6:	bf0e      	itee	eq
1a0028f8:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
1a0028fc:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
1a002900:	6560      	strne	r0, [r4, #84]	@ 0x54
1a002902:	81a3      	strh	r3, [r4, #12]
1a002904:	bd10      	pop	{r4, pc}
1a002906:	bf00      	nop

1a002908 <__sclose>:
1a002908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00290c:	f7fe baae 	b.w	1a000e6c <_close_r>

1a002910 <_malloc_usable_size_r>:
1a002910:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a002914:	1f18      	subs	r0, r3, #4
1a002916:	2b00      	cmp	r3, #0
1a002918:	bfbc      	itt	lt
1a00291a:	580b      	ldrlt	r3, [r1, r0]
1a00291c:	18c0      	addlt	r0, r0, r3
1a00291e:	4770      	bx	lr
1a002920:	616c6f48 	.word	0x616c6f48
1a002924:	6e756d20 	.word	0x6e756d20
1a002928:	61206f64 	.word	0x61206f64
1a00292c:	64252074 	.word	0x64252074
1a002930:	00000a0d 	.word	0x00000a0d
1a002934:	0f0f0f03 	.word	0x0f0f0f03
1a002938:	000000ff 	.word	0x000000ff
1a00293c:	2b302d23 	.word	0x2b302d23
1a002940:	00000020 	.word	0x00000020
1a002944:	004c6c68 	.word	0x004c6c68
1a002948:	45676665 	.word	0x45676665
1a00294c:	00004746 	.word	0x00004746
1a002950:	33323130 	.word	0x33323130
1a002954:	37363534 	.word	0x37363534
1a002958:	42413938 	.word	0x42413938
1a00295c:	46454443 	.word	0x46454443
1a002960:	00000000 	.word	0x00000000
1a002964:	33323130 	.word	0x33323130
1a002968:	37363534 	.word	0x37363534
1a00296c:	62613938 	.word	0x62613938
1a002970:	66656463 	.word	0x66656463
1a002974:	00000000 	.word	0x00000000

1a002978 <periph_to_base>:
1a002978:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a002988:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a002998:	000100e0 01000100 01200003 00060120     .......... . ...
1a0029a8:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a0029b8:	01820013 00120182 01a201a2 01c20011     ................
1a0029c8:	001001c2 01e201e2 0202000f 000e0202     ................
1a0029d8:	02220222 0223000d 001c0223              "."...#.#...

1a0029e4 <InitClkStates>:
1a0029e4:	00010100 00010909 0001090a 01010701     ................
1a0029f4:	00010902 00010906 0101090c 0001090d     ................
1a002a04:	0001090e 0001090f 00010910 00010911     ................
1a002a14:	00010912 00010913 00011114 00011119     ................
1a002a24:	0001111a 0001111b                       ........

1a002a2c <UART_BClock>:
1a002a2c:	01a201c2 01620182                       ......b.

1a002a34 <UART_PClock>:
1a002a34:	00820081 00a200a1                       ........

1a002a3c <gpioLEDBits>:
1a002a3c:	0b010e00 00050c01 02050105              ............

1a002a48 <OscRateIn>:
1a002a48:	00b71b00                                ....

1a002a4c <ExtRateIn>:
1a002a4c:	00000000                                ....

1a002a50 <pinmuxing>:
1a002a50:	00400a02 00400b02 00400c02 00440002     ..@...@...@...D.
1a002a60:	00440102 00440202 00520302 00520402     ..D...D...R...R.
1a002a70:	00520509 00570609 00570206 00500001     ..R...W...W...P.
1a002a80:	00500101 00500201 00500601 00f30f01     ..P...P...P.....
1a002a90:	00f71001 00f31101 00b31201 00f01301     ................
1a002aa0:	00b31401 00b60707 00f20000 00b60100     ................

1a002ab0 <InitClkStates>:
1a002ab0:	00010308 00010307 01010f01              ............
